

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Nov 29 21:17:06 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           ; Version 1.42
    63                           ; Generated 13/04/2017 GMT
    64                           ; 
    65                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F46K22 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataBANK0
    98  0032BC                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for hdc1000_get_humidity@F7147
   102  0032BC  01                 	db	1
   103  0032BD  00                 	db	0
   104                           
   105                           	psect	smallconst
   106  001000                     __psmallconst:
   107                           	opt stack 0
   108  001000  00                 	db	0
   109  001001                     _dpowers:
   110                           	opt stack 0
   111  001001  0001               	dw	1
   112  001003  0000               	dw	0
   113  001005  000A               	dw	10
   114  001007  0000               	dw	0
   115  001009  0064               	dw	100
   116  00100B  0000               	dw	0
   117  00100D  03E8               	dw	1000
   118  00100F  0000               	dw	0
   119  001011  2710               	dw	10000
   120  001013  0000               	dw	0
   121  001015  86A0               	dw	34464
   122  001017  0001               	dw	1
   123  001019  4240               	dw	16960
   124  00101B  000F               	dw	15
   125  00101D  9680               	dw	38528
   126  00101F  0098               	dw	152
   127  001021  E100               	dw	57600
   128  001023  05F5               	dw	1525
   129  001025  CA00               	dw	51712
   130  001027  3B9A               	dw	15258
   131  001029                     __end_of_dpowers:
   132                           	opt stack 0
   133  001029                     __powers_:
   134                           	opt stack 0
   135  001029  00                 	db	0
   136  00102A  80                 	db	128
   137  00102B  3F                 	db	63
   138  00102C  00                 	db	0
   139  00102D  20                 	db	32
   140  00102E  41                 	db	65
   141  00102F  00                 	db	0
   142  001030  C8                 	db	200
   143  001031  42                 	db	66
   144  001032  00                 	db	0
   145  001033  7A                 	db	122
   146  001034  44                 	db	68
   147  001035  40                 	db	64
   148  001036  1C                 	db	28
   149  001037  46                 	db	70
   150  001038  50                 	db	80
   151  001039  C3                 	db	195
   152  00103A  47                 	db	71
   153  00103B  24                 	db	36
   154  00103C  74                 	db	116
   155  00103D  49                 	db	73
   156  00103E  97                 	db	151
   157  00103F  18                 	db	24
   158  001040  4B                 	db	75
   159  001041  BC                 	db	188
   160  001042  BE                 	db	190
   161  001043  4C                 	db	76
   162  001044  6B                 	db	107
   163  001045  6E                 	db	110
   164  001046  4E                 	db	78
   165  001047  03                 	db	3
   166  001048  15                 	db	21
   167  001049  50                 	db	80
   168  00104A  79                 	db	121
   169  00104B  AD                 	db	173
   170  00104C  60                 	db	96
   171  00104D  F3                 	db	243
   172  00104E  49                 	db	73
   173  00104F  71                 	db	113
   174  001050                     __end_of__powers_:
   175                           	opt stack 0
   176  001050                     __npowers_:
   177                           	opt stack 0
   178  001050  00                 	db	0
   179  001051  80                 	db	128
   180  001052  3F                 	db	63
   181  001053  CD                 	db	205
   182  001054  CC                 	db	204
   183  001055  3D                 	db	61
   184  001056  D7                 	db	215
   185  001057  23                 	db	35
   186  001058  3C                 	db	60
   187  001059  12                 	db	18
   188  00105A  83                 	db	131
   189  00105B  3A                 	db	58
   190  00105C  B7                 	db	183
   191  00105D  D1                 	db	209
   192  00105E  38                 	db	56
   193  00105F  C6                 	db	198
   194  001060  27                 	db	39
   195  001061  37                 	db	55
   196  001062  38                 	db	56
   197  001063  86                 	db	134
   198  001064  35                 	db	53
   199  001065  C0                 	db	192
   200  001066  D6                 	db	214
   201  001067  33                 	db	51
   202  001068  CC                 	db	204
   203  001069  2B                 	db	43
   204  00106A  32                 	db	50
   205  00106B  70                 	db	112
   206  00106C  89                 	db	137
   207  00106D  30                 	db	48
   208  00106E  E7                 	db	231
   209  00106F  DB                 	db	219
   210  001070  2E                 	db	46
   211  001071  E5                 	db	229
   212  001072  3C                 	db	60
   213  001073  1E                 	db	30
   214  001074  42                 	db	66
   215  001075  A2                 	db	162
   216  001076  0D                 	db	13
   217  001077                     __end_of__npowers_:
   218                           	opt stack 0
   219  0000                     _ANSELA	set	3896
   220  0000                     _ANSELE	set	3900
   221  0000                     _ANSELD	set	3899
   222  0000                     _ANSELB	set	3897
   223  0000                     _ANSELC	set	3898
   224  0000                     _OSCTUNE	set	3995
   225  0000                     _OSCCON2	set	4050
   226  0000                     _OSCCON	set	4051
   227  0000                     _PIR2bits	set	4001
   228  0000                     _PIE2bits	set	4000
   229  0000                     _INTCONbits	set	4082
   230  0000                     _RCONbits	set	4048
   231  0000                     _TXREG1	set	4013
   232  0000                     _RCREG1	set	4014
   233  0000                     _RCSTA1bits	set	4011
   234  0000                     _SPBRGH1	set	4016
   235  0000                     _SPBRG1	set	4015
   236  0000                     _TXSTA1	set	4012
   237  0000                     _RCSTA1	set	4011
   238  0000                     _BAUDCON1	set	4024
   239  0000                     _SSP1BUF	set	4041
   240  0000                     _SSP1CON2bits	set	4037
   241  0000                     _SSP1CON1bits	set	4038
   242  0000                     _PIE1bits	set	3997
   243  0000                     _PIR1bits	set	3998
   244  0000                     _SSP1ADD	set	4040
   245  0000                     _SSP1CON3	set	4043
   246  0000                     _SSP1CON1	set	4038
   247  0000                     _SSP1STAT	set	4039
   248  0000                     _INTCON2bits	set	4081
   249  0000                     _WPUB	set	3937
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISA	set	3986
   254  0000                     _TRISE	set	3990
   255  0000                     _LATC	set	3979
   256  0000                     _LATB	set	3978
   257  0000                     _LATA	set	3977
   258  0000                     _LATD	set	3980
   259  0000                     _LATE	set	3981
   260  001077                     STR_1:
   261  001077  25                 	db	37
   262  001078  2E                 	db	46
   263  001079  32                 	db	50	;'2'
   264  00107A  66                 	db	102	;'f'
   265  00107B  2C                 	db	44
   266  00107C  20                 	db	32
   267  00107D  25                 	db	37
   268  00107E  2E                 	db	46
   269  00107F  32                 	db	50	;'2'
   270  001080  66                 	db	102	;'f'
   271  001081  0D                 	db	13
   272  001082  0A                 	db	10
   273  001083  00                 	db	0
   274                           
   275                           ; #config settings
   276  001084  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  0030F0                     __pcinit:
   280                           	opt stack 0
   281  0030F0                     start_initialization:
   282                           	opt stack 0
   283  0030F0                     __initialization:
   284                           	opt stack 0
   285                           
   286                           ; Initialize objects allocated to BANK0 (2 bytes)
   287                           ; load TBLPTR registers with __pidataBANK0
   288  0030F0  0EBC               	movlw	low __pidataBANK0
   289  0030F2  6EF6               	movwf	tblptrl,c
   290  0030F4  0E32               	movlw	high __pidataBANK0
   291  0030F6  6EF7               	movwf	tblptrh,c
   292  0030F8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   293  0030FA  6EF8               	movwf	tblptru,c
   294  0030FC  0009               	tblrd		*+	;fetch initializer
   295  0030FE  CFF5 F0CF          	movff	tablat,__pdataBANK0
   296  003102  0009               	tblrd		*+	;fetch initializer
   297  003104  CFF5 F0D0          	movff	tablat,__pdataBANK0+1
   298                           
   299                           ; Clear objects allocated to BANK0 (30 bytes)
   300  003108  EE00  F0B1         	lfsr	0,__pbssBANK0
   301  00310C  0E1E               	movlw	30
   302  00310E                     clear_0:
   303  00310E  6AEE               	clrf	postinc0,c
   304  003110  06E8               	decf	wreg,f,c
   305  003112  E1FD               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to COMRAM (19 bytes)
   308  003114  EE00  F039         	lfsr	0,__pbssCOMRAM
   309  003118  0E13               	movlw	19
   310  00311A                     clear_1:
   311  00311A  6AEE               	clrf	postinc0,c
   312  00311C  06E8               	decf	wreg,f,c
   313  00311E  E1FD               	bnz	clear_1
   314  003120                     end_of_initialization:
   315                           	opt stack 0
   316  003120                     __end_of__initialization:
   317                           	opt stack 0
   318  003120  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   319  003122  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   320  003124  0E00               	movlw	low (__Lmediumconst shr (0+16))
   321  003126  6EF8               	movwf	tblptru,c
   322  003128  0100               	movlb	0
   323  00312A  EFD1  F012         	goto	_main	;jump to C main() function
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	bssCOMRAM
   332  000039                     __pbssCOMRAM:
   333                           	opt stack 0
   334  000039                     _i2c1_object:
   335                           	opt stack 0
   336  000039                     	ds	7
   337  000040                     I2C1_ISR@pi2c_buf_ptr:
   338                           	opt stack 0
   339  000040                     	ds	2
   340  000042                     _p_i2c1_current:
   341                           	opt stack 0
   342  000042                     	ds	2
   343  000044                     _p_i2c1_trb_current:
   344                           	opt stack 0
   345  000044                     	ds	2
   346  000046                     I2C1_ISR@i2c_10bit_address_restart:
   347                           	opt stack 0
   348  000046                     	ds	1
   349  000047                     I2C1_ISR@i2c_bytes_left:
   350                           	opt stack 0
   351  000047                     	ds	1
   352  000048                     _i2c1_trb_count:
   353                           	opt stack 0
   354  000048                     	ds	1
   355  000049                     _i2c1_state:
   356                           	opt stack 0
   357  000049                     	ds	1
   358  00004A                     I2C1_ISR@i2c_address:
   359                           	opt stack 0
   360  00004A                     	ds	2
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           
   368                           	psect	bssBANK0
   369  0000B1                     __pbssBANK0:
   370                           	opt stack 0
   371  0000B1                     hdc1000_get_everything@F7153:
   372                           	opt stack 0
   373  0000B1                     	ds	4
   374  0000B5                     hdc1000_get_everything@F7151:
   375                           	opt stack 0
   376  0000B5                     	ds	4
   377  0000B9                     hdc1000_set_reg@F7137:
   378                           	opt stack 0
   379  0000B9                     	ds	3
   380  0000BC                     hdc1000_get_temperature@F7143:
   381                           	opt stack 0
   382  0000BC                     	ds	2
   383  0000BE                     hdc1000_get_reg@F7140:
   384                           	opt stack 0
   385  0000BE                     	ds	2
   386  0000C0                     I2C1_MasterRead@trBlock:
   387                           	opt stack 0
   388  0000C0                     	ds	5
   389  0000C5                     I2C1_MasterWrite@trBlock:
   390                           	opt stack 0
   391  0000C5                     	ds	5
   392  0000CA                     _i2c1_tr_queue:
   393                           	opt stack 0
   394  0000CA                     	ds	5
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           
   402                           	psect	dataBANK0
   403  0000CF                     __pdataBANK0:
   404                           	opt stack 0
   405  0000CF                     hdc1000_get_humidity@F7147:
   406                           	opt stack 0
   407  0000CF                     	ds	2
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415                           	psect	cstackBANK0
   416  000060                     __pcstackBANK0:
   417                           	opt stack 0
   418  000060                     ___ftmul@exp:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x0
   422  000060                     	ds	1
   423  000061                     ___ftmul@f3_as_product:
   424                           	opt stack 0
   425                           
   426                           ; 3 bytes @ 0x1
   427  000061                     	ds	3
   428  000064                     ___ftmul@cntr:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x4
   432  000064                     	ds	1
   433  000065                     ___ftmul@sign:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x5
   437  000065                     	ds	1
   438  000066                     ?_fround:
   439                           	opt stack 0
   440  000066                     ?_scale:
   441                           	opt stack 0
   442                           
   443                           ; 3 bytes @ 0x6
   444  000066                     	ds	3
   445  000069                     _fround$1617:
   446                           	opt stack 0
   447  000069                     _scale$1618:
   448                           	opt stack 0
   449                           
   450                           ; 3 bytes @ 0x9
   451  000069                     	ds	3
   452  00006C                     scale@scl:
   453                           	opt stack 0
   454  00006C                     _fround$1616:
   455                           	opt stack 0
   456                           
   457                           ; 3 bytes @ 0xC
   458  00006C                     	ds	1
   459  00006D                     ?___fttol:
   460                           	opt stack 0
   461  00006D                     ___fttol@f1:
   462                           	opt stack 0
   463                           
   464                           ; 3 bytes @ 0xD
   465  00006D                     	ds	2
   466  00006F                     fround@prec:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0xF
   470  00006F                     	ds	1
   471  000070                     ?___ftadd:
   472                           	opt stack 0
   473  000070                     ___ftadd@f1:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0x10
   477  000070                     	ds	1
   478  000071                     ??___fttol:
   479                           
   480                           ; 1 bytes @ 0x11
   481  000071                     	ds	2
   482  000073                     ___ftadd@f2:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x13
   486  000073                     	ds	3
   487  000076                     ??___ftadd:
   488  000076                     ___fttol@sign1:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x16
   492  000076                     	ds	1
   493  000077                     ___fttol@lval:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x17
   497  000077                     	ds	2
   498  000079                     ___ftadd@sign:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x19
   502  000079                     	ds	1
   503  00007A                     ___ftadd@exp2:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x1A
   507  00007A                     	ds	1
   508  00007B                     ___ftadd@exp1:
   509                           	opt stack 0
   510  00007B                     ___fttol@exp1:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x1B
   514  00007B                     	ds	1
   515  00007C                     ?___ftsub:
   516                           	opt stack 0
   517  00007C                     ___ftsub@f1:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x1C
   521  00007C                     	ds	3
   522  00007F                     ___ftsub@f2:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x1F
   526  00007F                     	ds	3
   527  000082                     ?_printf:
   528                           	opt stack 0
   529  000082                     printf@f:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x22
   533  000082                     	ds	8
   534  00008A                     ??_printf:
   535                           
   536                           ; 1 bytes @ 0x2A
   537  00008A                     	ds	6
   538  000090                     _printf$1619:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x30
   542  000090                     	ds	3
   543  000093                     printf@ap:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x33
   547  000093                     	ds	2
   548  000095                     printf@flag:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x35
   552  000095                     	ds	2
   553  000097                     printf@val:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x37
   557  000097                     	ds	4
   558  00009B                     printf@exp:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x3B
   562  00009B                     	ds	2
   563  00009D                     printf@tmpval:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x3D
   567  00009D                     	ds	4
   568  0000A1                     printf@prec:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x41
   572  0000A1                     	ds	2
   573  0000A3                     printf@fval:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x43
   577  0000A3                     	ds	3
   578  0000A6                     printf@c:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x46
   582  0000A6                     	ds	1
   583  0000A7                     main@temperature:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x47
   587  0000A7                     	ds	3
   588  0000AA                     main@humidity:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x4A
   592  0000AA                     	ds	3
   593  0000AD                     main@temperature_raw:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x4D
   597  0000AD                     	ds	2
   598  0000AF                     main@humidity_raw:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x4F
   602  0000AF                     	ds	2
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           
   610                           	psect	cstackCOMRAM
   611  000001                     __pcstackCOMRAM:
   612                           	opt stack 0
   613  000001                     ??_I2C1_Stop:
   614  000001                     
   615                           ; 1 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     I2C1_Stop@completion_code:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x2
   621  000003                     	ds	1
   622  000004                     ??_I2C1_ISR:
   623                           
   624                           ; 1 bytes @ 0x3
   625  000004                     	ds	2
   626  000006                     ??_INTERRUPT_InterruptManager:
   627                           
   628                           ; 1 bytes @ 0x5
   629  000006                     	ds	14
   630  000014                     ??_isdigit:
   631  000014                     ?___awmod:
   632                           	opt stack 0
   633  000014                     ?___ftpack:
   634                           	opt stack 0
   635  000014                     ?___ftneg:
   636                           	opt stack 0
   637  000014                     ?__tdiv_to_l_:
   638                           	opt stack 0
   639  000014                     ?__div_to_l_:
   640                           	opt stack 0
   641  000014                     ?___lldiv:
   642                           	opt stack 0
   643  000014                     ?___llmod:
   644                           	opt stack 0
   645  000014                     EUSART1_Write@txData:
   646                           	opt stack 0
   647  000014                     I2C1_MasterTRBInsert@ptrb_list:
   648                           	opt stack 0
   649  000014                     I2C1_MasterReadTRBBuild@ptrb:
   650                           	opt stack 0
   651  000014                     I2C1_MasterWriteTRBBuild@ptrb:
   652                           	opt stack 0
   653  000014                     ___awmod@dividend:
   654                           	opt stack 0
   655  000014                     __div_to_l_@f1:
   656                           	opt stack 0
   657  000014                     ___ftpack@arg:
   658                           	opt stack 0
   659  000014                     __tdiv_to_l_@f1:
   660                           	opt stack 0
   661  000014                     ___ftge@ff1:
   662                           	opt stack 0
   663  000014                     ___ftneg@f1:
   664                           	opt stack 0
   665  000014                     ___lldiv@dividend:
   666                           	opt stack 0
   667  000014                     ___llmod@dividend:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x13
   671  000014                     	ds	1
   672  000015                     putch@txData:
   673                           	opt stack 0
   674  000015                     _isdigit$1234:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x14
   678  000015                     	ds	1
   679  000016                     isdigit@c:
   680                           	opt stack 0
   681  000016                     I2C1_MasterTRBInsert@pflag:
   682                           	opt stack 0
   683  000016                     I2C1_MasterReadTRBBuild@pdata:
   684                           	opt stack 0
   685  000016                     I2C1_MasterWriteTRBBuild@pdata:
   686                           	opt stack 0
   687  000016                     ___awmod@divisor:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x15
   691  000016                     	ds	1
   692  000017                     ___ftpack@exp:
   693                           	opt stack 0
   694  000017                     __div_to_l_@f2:
   695                           	opt stack 0
   696  000017                     __tdiv_to_l_@f2:
   697                           	opt stack 0
   698  000017                     ___ftge@ff2:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0x16
   702  000017                     	ds	1
   703  000018                     I2C1_MasterReadTRBBuild@length:
   704                           	opt stack 0
   705  000018                     I2C1_MasterWriteTRBBuild@length:
   706                           	opt stack 0
   707  000018                     ___awmod@counter:
   708                           	opt stack 0
   709  000018                     ___ftpack@sign:
   710                           	opt stack 0
   711  000018                     ___lldiv@divisor:
   712                           	opt stack 0
   713  000018                     ___llmod@divisor:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x17
   717  000018                     	ds	1
   718  000019                     ??___ftpack:
   719  000019                     I2C1_MasterTRBInsert@count:
   720                           	opt stack 0
   721  000019                     ___awmod@sign:
   722                           	opt stack 0
   723  000019                     I2C1_MasterReadTRBBuild@address:
   724                           	opt stack 0
   725  000019                     I2C1_MasterWriteTRBBuild@address:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x18
   729  000019                     	ds	1
   730  00001A                     ??__tdiv_to_l_:
   731  00001A                     ??___ftge:
   732  00001A                     ?___awdiv:
   733                           	opt stack 0
   734  00001A                     ___awdiv@dividend:
   735                           	opt stack 0
   736  00001A                     __div_to_l_@quot:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x19
   740  00001A                     	ds	1
   741  00001B                     ??_I2C1_MasterWriteTRBBuild:
   742  00001B                     ??_I2C1_MasterReadTRBBuild:
   743                           
   744                           ; 1 bytes @ 0x1A
   745  00001B                     	ds	1
   746  00001C                     ?___lltoft:
   747                           	opt stack 0
   748  00001C                     ?___lwtoft:
   749                           	opt stack 0
   750  00001C                     ___llmod@counter:
   751                           	opt stack 0
   752  00001C                     ___awdiv@divisor:
   753                           	opt stack 0
   754  00001C                     ___lwtoft@c:
   755                           	opt stack 0
   756  00001C                     ___lldiv@quotient:
   757                           	opt stack 0
   758  00001C                     ___lltoft@c:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x1B
   762  00001C                     	ds	1
   763  00001D                     I2C1_MasterWrite@pdata:
   764                           	opt stack 0
   765  00001D                     I2C1_MasterRead@pdata:
   766                           	opt stack 0
   767  00001D                     __tdiv_to_l_@quot:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x1C
   771  00001D                     	ds	1
   772  00001E                     ___awdiv@counter:
   773                           	opt stack 0
   774  00001E                     __div_to_l_@cntr:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x1D
   778  00001E                     	ds	1
   779  00001F                     ?___ftdiv:
   780                           	opt stack 0
   781  00001F                     I2C1_MasterWrite@length:
   782                           	opt stack 0
   783  00001F                     I2C1_MasterRead@length:
   784                           	opt stack 0
   785  00001F                     ___awdiv@sign:
   786                           	opt stack 0
   787  00001F                     __div_to_l_@exp1:
   788                           	opt stack 0
   789  00001F                     ___ftdiv@f1:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x1E
   793  00001F                     	ds	1
   794  000020                     ??___lltoft:
   795  000020                     ___lldiv@counter:
   796                           	opt stack 0
   797  000020                     I2C1_MasterWrite@address:
   798                           	opt stack 0
   799  000020                     I2C1_MasterRead@address:
   800                           	opt stack 0
   801  000020                     ___awdiv@quotient:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x1F
   805  000020                     	ds	1
   806  000021                     __tdiv_to_l_@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x20
   810  000021                     	ds	1
   811  000022                     ?___wmul:
   812                           	opt stack 0
   813  000022                     __tdiv_to_l_@exp1:
   814                           	opt stack 0
   815  000022                     I2C1_MasterWrite@pflag:
   816                           	opt stack 0
   817  000022                     I2C1_MasterRead@pflag:
   818                           	opt stack 0
   819  000022                     ___wmul@multiplier:
   820                           	opt stack 0
   821  000022                     ___ftdiv@f2:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x21
   825  000022                     	ds	2
   826  000024                     ___lltoft@exp:
   827                           	opt stack 0
   828  000024                     hdc1000_read@data_ptr:
   829                           	opt stack 0
   830  000024                     hdc1000_write@data_ptr:
   831                           	opt stack 0
   832  000024                     ___wmul@multiplicand:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x23
   836  000024                     	ds	1
   837  000025                     ??___ftdiv:
   838                           
   839                           ; 1 bytes @ 0x24
   840  000025                     	ds	1
   841  000026                     hdc1000_read@length:
   842                           	opt stack 0
   843  000026                     hdc1000_write@length:
   844                           	opt stack 0
   845  000026                     ___wmul@product:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x25
   849  000026                     	ds	1
   850  000027                     hdc1000_read@time_out:
   851                           	opt stack 0
   852  000027                     hdc1000_write@time_out:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x26
   856  000027                     	ds	1
   857  000028                     hdc1000_read@status:
   858                           	opt stack 0
   859  000028                     hdc1000_write@status:
   860                           	opt stack 0
   861  000028                     ___ftdiv@cntr:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x27
   865  000028                     	ds	1
   866  000029                     ?_hdc1000_get_temperature:
   867                           	opt stack 0
   868  000029                     ?_hdc1000_get_humidity:
   869                           	opt stack 0
   870  000029                     hdc1000_set_reg@value:
   871                           	opt stack 0
   872  000029                     ___ftdiv@f3:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x28
   876  000029                     	ds	2
   877  00002B                     ??_hdc1000_get_temperature:
   878  00002B                     ??_hdc1000_get_humidity:
   879  00002B                     hdc1000_set_reg@address:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x2A
   883  00002B                     	ds	1
   884  00002C                     ___ftdiv@exp:
   885                           	opt stack 0
   886  00002C                     hdc1000_set_reg@data:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0x2B
   890  00002C                     	ds	1
   891  00002D                     ___ftdiv@sign:
   892                           	opt stack 0
   893  00002D                     hdc1000_get_temperature@data:
   894                           	opt stack 0
   895  00002D                     hdc1000_get_humidity@data:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x2C
   899  00002D                     	ds	1
   900  00002E                     ?___ftmul:
   901                           	opt stack 0
   902  00002E                     ___ftmul@f1:
   903                           	opt stack 0
   904                           
   905                           ; 3 bytes @ 0x2D
   906  00002E                     	ds	3
   907  000031                     ___ftmul@f2:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x30
   911  000031                     	ds	3
   912  000034                     ??___ftmul:
   913                           
   914                           ; 1 bytes @ 0x33
   915  000034                     	ds	3
   916  000037                     ??_main:
   917  000037                     
   918                           ; 1 bytes @ 0x36
   919  000037                     	ds	2
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           postinc0	equ	0xFEE
   925                           wreg	equ	0xFE8
   926                           
   927 ;;
   928 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   929 ;;
   930 ;; *************** function _main *****************
   931 ;; Defined at:
   932 ;;		line 54 in file "main.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  humidity        3   74[BANK0 ] float 
   937 ;;  temperature     3   71[BANK0 ] float 
   938 ;;  humidity_raw    2   79[BANK0 ] unsigned int 
   939 ;;  temperature_    2   77[BANK0 ] unsigned int 
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;Total ram usage:       12 bytes
   954 ;; Hardware stack levels required when called:    7
   955 ;; This function calls:
   956 ;;		_SYSTEM_Initialize
   957 ;;		___ftadd
   958 ;;		___ftdiv
   959 ;;		___ftmul
   960 ;;		___lwtoft
   961 ;;		_hdc1000_get_humidity
   962 ;;		_hdc1000_get_temperature
   963 ;;		_hdc1000_set_reg
   964 ;;		_printf
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text0
   971  0025A2                     __ptext0:
   972                           	opt stack 0
   973  0025A2                     _main:
   974                           	opt stack 24
   975                           
   976                           ;main.c: 57: SYSTEM_Initialize();
   977                           
   978                           ;incstack = 0
   979  0025A2  EC34  F019         	call	_SYSTEM_Initialize	;wreg free
   980                           
   981                           ;main.c: 76: (INTCONbits.GIE = 1);
   982  0025A6  8EF2               	bsf	intcon,7,c	;volatile
   983                           
   984                           ;main.c: 82: (INTCONbits.PEIE = 1);
   985  0025A8  8CF2               	bsf	intcon,6,c	;volatile
   986                           
   987                           ;main.c: 87: uint16_t temperature_raw;
   988                           ;main.c: 88: uint16_t humidity_raw;
   989                           ;main.c: 89: float temperature;
   990                           ;main.c: 90: float humidity;
   991                           ;main.c: 95: hdc1000_set_reg(0X02, 0x0000 | 0x0000 | 0x0000);
   992  0025AA  0E00               	movlw	0
   993  0025AC  6E2A               	movwf	hdc1000_set_reg@value+1,c
   994  0025AE  0E00               	movlw	0
   995  0025B0  6E29               	movwf	hdc1000_set_reg@value,c
   996  0025B2  0E02               	movlw	2
   997  0025B4  ECCD  F018         	call	_hdc1000_set_reg
   998  0025B8                     l4094:
   999                           
  1000                           ;main.c: 98: {
  1001                           ;main.c: 100: temperature_raw = hdc1000_get_temperature();
  1002  0025B8  ECEC  F017         	call	_hdc1000_get_temperature	;wreg free
  1003  0025BC  C029  F0AD         	movff	?_hdc1000_get_temperature,main@temperature_raw
  1004  0025C0  C02A  F0AE         	movff	?_hdc1000_get_temperature+1,main@temperature_raw+1
  1005                           
  1006                           ;main.c: 101: humidity_raw = hdc1000_get_humidity();
  1007  0025C4  EC10  F018         	call	_hdc1000_get_humidity	;wreg free
  1008  0025C8  C029  F0AF         	movff	?_hdc1000_get_humidity,main@humidity_raw
  1009  0025CC  C02A  F0B0         	movff	?_hdc1000_get_humidity+1,main@humidity_raw+1
  1010                           
  1011                           ;main.c: 104: temperature = ((temperature_raw / 65536.0) * 165.0) - 40.0;
  1012  0025D0  0E00               	movlw	0
  1013  0025D2  6E31               	movwf	___ftmul@f2,c
  1014  0025D4  0E25               	movlw	37
  1015  0025D6  6E32               	movwf	___ftmul@f2+1,c
  1016  0025D8  0E43               	movlw	67
  1017  0025DA  6E33               	movwf	___ftmul@f2+2,c
  1018  0025DC  0E00               	movlw	0
  1019  0025DE  6E22               	movwf	___ftdiv@f2,c
  1020  0025E0  0E80               	movlw	128
  1021  0025E2  6E23               	movwf	___ftdiv@f2+1,c
  1022  0025E4  0E47               	movlw	71
  1023  0025E6  6E24               	movwf	___ftdiv@f2+2,c
  1024  0025E8  C0AD  F01C         	movff	main@temperature_raw,___lwtoft@c
  1025  0025EC  C0AE  F01D         	movff	main@temperature_raw+1,___lwtoft@c+1
  1026  0025F0  EC07  F019         	call	___lwtoft	;wreg free
  1027  0025F4  C01C  F01F         	movff	?___lwtoft,___ftdiv@f1
  1028  0025F8  C01D  F020         	movff	?___lwtoft+1,___ftdiv@f1+1
  1029  0025FC  C01E  F021         	movff	?___lwtoft+2,___ftdiv@f1+2
  1030  002600  EC8D  F014         	call	___ftdiv	;wreg free
  1031  002604  C01F  F02E         	movff	?___ftdiv,___ftmul@f1
  1032  002608  C020  F02F         	movff	?___ftdiv+1,___ftmul@f1+1
  1033  00260C  C021  F030         	movff	?___ftdiv+2,___ftmul@f1+2
  1034  002610  ECFD  F013         	call	___ftmul	;wreg free
  1035  002614  C02E  F070         	movff	?___ftmul,___ftadd@f1
  1036  002618  C02F  F071         	movff	?___ftmul+1,___ftadd@f1+1
  1037  00261C  C030  F072         	movff	?___ftmul+2,___ftadd@f1+2
  1038  002620  0E00               	movlw	0
  1039  002622  0100               	movlb	0	; () banked
  1040  002624  6F73               	movwf	___ftadd@f2& (0+255),b
  1041  002626  0E20               	movlw	32
  1042  002628  0100               	movlb	0	; () banked
  1043  00262A  6F74               	movwf	(___ftadd@f2+1)& (0+255),b
  1044  00262C  0EC2               	movlw	194
  1045  00262E  0100               	movlb	0	; () banked
  1046  002630  6F75               	movwf	(___ftadd@f2+2)& (0+255),b
  1047  002632  EC1C  F00E         	call	___ftadd	;wreg free
  1048  002636  C070  F0A7         	movff	?___ftadd,main@temperature
  1049  00263A  C071  F0A8         	movff	?___ftadd+1,main@temperature+1
  1050  00263E  C072  F0A9         	movff	?___ftadd+2,main@temperature+2
  1051                           
  1052                           ;main.c: 106: humidity = (humidity_raw / 65536.0) * 100.0;
  1053  002642  0E00               	movlw	0
  1054  002644  6E22               	movwf	___ftdiv@f2,c
  1055  002646  0E80               	movlw	128
  1056  002648  6E23               	movwf	___ftdiv@f2+1,c
  1057  00264A  0E47               	movlw	71
  1058  00264C  6E24               	movwf	___ftdiv@f2+2,c
  1059  00264E  C0AF  F01C         	movff	main@humidity_raw,___lwtoft@c
  1060  002652  C0B0  F01D         	movff	main@humidity_raw+1,___lwtoft@c+1
  1061  002656  EC07  F019         	call	___lwtoft	;wreg free
  1062  00265A  C01C  F01F         	movff	?___lwtoft,___ftdiv@f1
  1063  00265E  C01D  F020         	movff	?___lwtoft+1,___ftdiv@f1+1
  1064  002662  C01E  F021         	movff	?___lwtoft+2,___ftdiv@f1+2
  1065  002666  EC8D  F014         	call	___ftdiv	;wreg free
  1066  00266A  C01F  F02E         	movff	?___ftdiv,___ftmul@f1
  1067  00266E  C020  F02F         	movff	?___ftdiv+1,___ftmul@f1+1
  1068  002672  C021  F030         	movff	?___ftdiv+2,___ftmul@f1+2
  1069  002676  0E00               	movlw	0
  1070  002678  6E31               	movwf	___ftmul@f2,c
  1071  00267A  0EC8               	movlw	200
  1072  00267C  6E32               	movwf	___ftmul@f2+1,c
  1073  00267E  0E42               	movlw	66
  1074  002680  6E33               	movwf	___ftmul@f2+2,c
  1075  002682  ECFD  F013         	call	___ftmul	;wreg free
  1076  002686  C02E  F0AA         	movff	?___ftmul,main@humidity
  1077  00268A  C02F  F0AB         	movff	?___ftmul+1,main@humidity+1
  1078  00268E  C030  F0AC         	movff	?___ftmul+2,main@humidity+2
  1079                           
  1080                           ;main.c: 109: printf("%.2f, %.2f\r\n", temperature, humidity);
  1081  002692  0E77               	movlw	low STR_1
  1082  002694  0100               	movlb	0	; () banked
  1083  002696  6F82               	movwf	printf@f& (0+255),b
  1084  002698  0E10               	movlw	high STR_1
  1085  00269A  0100               	movlb	0	; () banked
  1086  00269C  6F83               	movwf	(printf@f+1)& (0+255),b
  1087  00269E  C0A7  F084         	movff	main@temperature,?_printf+2
  1088  0026A2  C0A8  F085         	movff	main@temperature+1,?_printf+3
  1089  0026A6  C0A9  F086         	movff	main@temperature+2,?_printf+4
  1090  0026AA  C0AA  F087         	movff	main@humidity,?_printf+5
  1091  0026AE  C0AB  F088         	movff	main@humidity+1,?_printf+6
  1092  0026B2  C0AC  F089         	movff	main@humidity+2,?_printf+7
  1093  0026B6  EC43  F008         	call	_printf	;wreg free
  1094                           
  1095                           ;main.c: 112: _delay((unsigned long)((1000)*(2000000/4000.0)));
  1096  0026BA  0E03               	movlw	3
  1097  0026BC  6E38               	movwf	(??_main+1)& (0+255),c
  1098  0026BE  0E8A               	movlw	138
  1099  0026C0  6E37               	movwf	??_main& (0+255),c
  1100  0026C2  0E56               	movlw	86
  1101  0026C4                     u4417:
  1102  0026C4  2EE8               	decfsz	wreg,f,c
  1103  0026C6  D7FE               	bra	u4417
  1104  0026C8  2E37               	decfsz	??_main& (0+255),f,c
  1105  0026CA  D7FC               	bra	u4417
  1106  0026CC  2E38               	decfsz	(??_main+1)& (0+255),f,c
  1107  0026CE  D7FA               	bra	u4417
  1108  0026D0  D773               	goto	l4094
  1109  0026D2                     __end_of_main:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           intcon	equ	0xFF2
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           
  1119 ;; *************** function _printf *****************
  1120 ;; Defined at:
  1121 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  1124 ;;		 -> STR_1(13), 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  tmpval          4   61[BANK0 ] struct .
  1127 ;;  val             4   55[BANK0 ] unsigned long 
  1128 ;;  fval            3   67[BANK0 ] unsigned long 
  1129 ;;  cp              3    0        PTR const unsigned char 
  1130 ;;  prec            2   65[BANK0 ] int 
  1131 ;;  exp             2   59[BANK0 ] int 
  1132 ;;  flag            2   53[BANK0 ] unsigned short 
  1133 ;;  ap              2   51[BANK0 ] PTR void [1]
  1134 ;;		 -> ?_printf(2), 
  1135 ;;  len             2    0        unsigned int 
  1136 ;;  width           2    0        int 
  1137 ;;  c               1   70[BANK0 ] char 
  1138 ;;  d               1    0        unsigned char 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  2   34[BANK0 ] int 
  1141 ;; Registers used:
  1142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1148 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1149 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1150 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;Total ram usage:       37 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    6
  1155 ;; This function calls:
  1156 ;;		___awdiv
  1157 ;;		___ftadd
  1158 ;;		___ftge
  1159 ;;		___ftmul
  1160 ;;		___ftneg
  1161 ;;		___ftsub
  1162 ;;		___fttol
  1163 ;;		___lldiv
  1164 ;;		___llmod
  1165 ;;		___lltoft
  1166 ;;		___wmul
  1167 ;;		__div_to_l_
  1168 ;;		__tdiv_to_l_
  1169 ;;		_fround
  1170 ;;		_isdigit
  1171 ;;		_putch
  1172 ;;		_scale
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text1
  1179  001086                     __ptext1:
  1180                           	opt stack 0
  1181  001086                     _printf:
  1182                           	opt stack 24
  1183                           
  1184                           ;doprnt.c: 466: va_list ap;
  1185                           ;doprnt.c: 499: signed char c;
  1186                           ;doprnt.c: 501: int width;
  1187                           ;doprnt.c: 504: int prec;
  1188                           ;doprnt.c: 508: unsigned short flag;
  1189                           ;doprnt.c: 515: char d;
  1190                           ;doprnt.c: 516: double fval;
  1191                           ;doprnt.c: 517: int exp;
  1192                           ;doprnt.c: 523: union {
  1193                           ;doprnt.c: 524: unsigned long vd;
  1194                           ;doprnt.c: 525: double integ;
  1195                           ;doprnt.c: 526: } tmpval;
  1196                           ;doprnt.c: 528: unsigned long val;
  1197                           ;doprnt.c: 529: unsigned len;
  1198                           ;doprnt.c: 530: const char * cp;
  1199                           ;doprnt.c: 533: *ap = __va_start();
  1200                           
  1201                           ;incstack = 0
  1202  001086  0E84               	movlw	low (?_printf+2)
  1203  001088  0100               	movlb	0	; () banked
  1204  00108A  6F93               	movwf	printf@ap& (0+255),b
  1205  00108C  0E00               	movlw	high (?_printf+2)
  1206  00108E  0100               	movlb	0	; () banked
  1207  001090  6F94               	movwf	(printf@ap+1)& (0+255),b
  1208                           
  1209                           ;doprnt.c: 536: while(c = *f++) {
  1210  001092  D3B8               	goto	l4034
  1211  001094                     l3854:
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;doprnt.c: 538: if(c != '%')
  1215  001094  0E25               	movlw	37
  1216  001096  0100               	movlb	0	; () banked
  1217  001098  19A6               	xorwf	printf@c& (0+255),w,b
  1218  00109A  B4D8               	btfsc	status,2,c
  1219  00109C  D005               	goto	l3858
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;doprnt.c: 540: {
  1223                           ;doprnt.c: 541: (putch(c) );
  1224  00109E  0100               	movlb	0	; () banked
  1225  0010A0  51A6               	movf	printf@c& (0+255),w,b
  1226  0010A2  EC57  F019         	call	_putch
  1227                           
  1228                           ;doprnt.c: 542: continue;
  1229  0010A6  D3AE               	goto	l4034
  1230  0010A8                     l3858:
  1231                           
  1232                           ;doprnt.c: 543: }
  1233                           ;doprnt.c: 548: flag = 0;
  1234  0010A8  0E00               	movlw	0
  1235  0010AA  0100               	movlb	0	; () banked
  1236  0010AC  6F96               	movwf	(printf@flag+1)& (0+255),b
  1237  0010AE  0E00               	movlw	0
  1238  0010B0  6F95               	movwf	printf@flag& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 611: if(*f == '.') {
  1242  0010B2  C082  FFF6         	movff	printf@f,tblptrl
  1243  0010B6  C083  FFF7         	movff	printf@f+1,tblptrh
  1244  0010BA                     	if	0	;tblptru may be non-zero
  1245  0010BA                     	endif
  1246  0010BA                     	if	0	;tblptru may be non-zero
  1247  0010BA                     	endif
  1248  0010BA  0008               	tblrd		*
  1249  0010BC  50F5               	movf	tablat,w,c
  1250  0010BE  0A2E               	xorlw	46
  1251  0010C0  A4D8               	btfss	status,2,c
  1252  0010C2  D034               	goto	l3872
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;doprnt.c: 612: flag |= 0x4000;
  1256  0010C4  0100               	movlb	0	; () banked
  1257  0010C6  8D96               	bsf	(printf@flag+1)& (0+255),6,b
  1258                           
  1259                           ;doprnt.c: 613: f++;
  1260  0010C8  0100               	movlb	0	; () banked
  1261  0010CA  4B82               	infsnz	printf@f& (0+255),f,b
  1262  0010CC  2B83               	incf	(printf@f+1)& (0+255),f,b
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;doprnt.c: 620: {
  1266                           ;doprnt.c: 621: prec = 0;
  1267  0010CE  0E00               	movlw	0
  1268  0010D0  0100               	movlb	0	; () banked
  1269  0010D2  6FA2               	movwf	(printf@prec+1)& (0+255),b
  1270  0010D4  0E00               	movlw	0
  1271  0010D6  6FA1               	movwf	printf@prec& (0+255),b
  1272                           
  1273                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1274  0010D8  D01E               	goto	l3870
  1275  0010DA                     l3866:
  1276                           
  1277                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1278  0010DA  C0A1  F022         	movff	printf@prec,___wmul@multiplier
  1279  0010DE  C0A2  F023         	movff	printf@prec+1,___wmul@multiplier+1
  1280  0010E2  0E00               	movlw	0
  1281  0010E4  6E25               	movwf	___wmul@multiplicand+1,c
  1282  0010E6  0E0A               	movlw	10
  1283  0010E8  6E24               	movwf	___wmul@multiplicand,c
  1284  0010EA  ECE2  F018         	call	___wmul	;wreg free
  1285  0010EE  C082  FFF6         	movff	printf@f,tblptrl
  1286  0010F2  C083  FFF7         	movff	printf@f+1,tblptrh
  1287  0010F6                     	if	0	;tblptru may be non-zero
  1288  0010F6                     	endif
  1289  0010F6                     	if	0	;tblptru may be non-zero
  1290  0010F6                     	endif
  1291  0010F6  0008               	tblrd		*
  1292  0010F8  50F5               	movf	tablat,w,c
  1293  0010FA  2622               	addwf	?___wmul,f,c
  1294  0010FC  0E00               	movlw	0
  1295  0010FE  2223               	addwfc	?___wmul+1,f,c
  1296  001100  0ED0               	movlw	208
  1297  001102  2422               	addwf	?___wmul,w,c
  1298  001104  0100               	movlb	0	; () banked
  1299  001106  6FA1               	movwf	printf@prec& (0+255),b
  1300  001108  0EFF               	movlw	255
  1301  00110A  2023               	addwfc	?___wmul+1,w,c
  1302  00110C  0100               	movlb	0	; () banked
  1303  00110E  6FA2               	movwf	(printf@prec+1)& (0+255),b
  1304                           
  1305                           ; BSR set to: 0
  1306  001110  0100               	movlb	0	; () banked
  1307  001112  4B82               	infsnz	printf@f& (0+255),f,b
  1308  001114  2B83               	incf	(printf@f+1)& (0+255),f,b
  1309  001116                     l3870:
  1310                           
  1311                           ; BSR set to: 0
  1312  001116  C082  FFF6         	movff	printf@f,tblptrl
  1313  00111A  C083  FFF7         	movff	printf@f+1,tblptrh
  1314  00111E                     	if	0	;tblptru may be non-zero
  1315  00111E                     	endif
  1316  00111E                     	if	0	;tblptru may be non-zero
  1317  00111E                     	endif
  1318  00111E  0008               	tblrd		*
  1319  001120  50F5               	movf	tablat,w,c
  1320  001122  EC19  F019         	call	_isdigit
  1321  001126  A0D8               	btfss	status,0,c
  1322  001128  D00C               	goto	l3880
  1323  00112A  D7D7               	goto	l3866
  1324  00112C                     l3872:
  1325                           
  1326                           ;doprnt.c: 626: prec = 0;
  1327  00112C  0E00               	movlw	0
  1328  00112E  0100               	movlb	0	; () banked
  1329  001130  6FA2               	movwf	(printf@prec+1)& (0+255),b
  1330  001132  0E00               	movlw	0
  1331  001134  6FA1               	movwf	printf@prec& (0+255),b
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;doprnt.c: 628: flag |= 0x1000;
  1335  001136  0100               	movlb	0	; () banked
  1336  001138  8996               	bsf	(printf@flag+1)& (0+255),4,b
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;doprnt.c: 630: }
  1340                           ;doprnt.c: 635: switch(c = *f++) {
  1341  00113A  D003               	goto	l3880
  1342  00113C                     l3876:
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;doprnt.c: 663: flag |= 0x400;
  1346  00113C  0100               	movlb	0	; () banked
  1347  00113E  8596               	bsf	(printf@flag+1)& (0+255),2,b
  1348                           
  1349                           ;doprnt.c: 664: break;
  1350  001140  D013               	goto	l3882
  1351  001142                     l3880:
  1352  001142  C082  FFF6         	movff	printf@f,tblptrl
  1353  001146  C083  FFF7         	movff	printf@f+1,tblptrh
  1354  00114A  0100               	movlb	0	; () banked
  1355  00114C  4B82               	infsnz	printf@f& (0+255),f,b
  1356  00114E  2B83               	incf	(printf@f+1)& (0+255),f,b
  1357  001150                     	if	0	;tblptru may be non-zero
  1358  001150                     	endif
  1359  001150                     	if	0	;tblptru may be non-zero
  1360  001150                     	endif
  1361  001150  0008               	tblrd		*
  1362  001152  CFF5 F0A6          	movff	tablat,printf@c
  1363  001156  0100               	movlb	0	; () banked
  1364  001158  51A6               	movf	printf@c& (0+255),w,b
  1365                           
  1366                           ; Switch size 1, requested type "space"
  1367                           ; Number of cases is 2, Range of values is 0 to 102
  1368                           ; switch strategies available:
  1369                           ; Name         Instructions Cycles
  1370                           ; simple_byte            7     4 (average)
  1371                           ;	Chosen strategy is simple_byte
  1372  00115A  0A00               	xorlw	0	; case 0
  1373  00115C  B4D8               	btfsc	status,2,c
  1374  00115E  0012               	return	
  1375  001160  0A66               	xorlw	102	; case 102
  1376  001162  B4D8               	btfsc	status,2,c
  1377  001164  D7EB               	goto	l3876
  1378  001166  D34E               	goto	l4034
  1379  001168                     l3882:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;doprnt.c: 825: if(flag & (0x700)) {
  1383  001168  0E07               	movlw	7
  1384  00116A  0100               	movlb	0	; () banked
  1385  00116C  1596               	andwf	(printf@flag+1)& (0+255),w,b
  1386  00116E  B4D8               	btfsc	status,2,c
  1387  001170  D2F7               	goto	l4016
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;doprnt.c: 827: if(flag & 0x1000)
  1391  001172  0100               	movlb	0	; () banked
  1392  001174  A996               	btfss	(printf@flag+1)& (0+255),4,b
  1393  001176  D005               	goto	l3888
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;doprnt.c: 829: prec = 6;
  1397  001178  0E00               	movlw	0
  1398  00117A  0100               	movlb	0	; () banked
  1399  00117C  6FA2               	movwf	(printf@prec+1)& (0+255),b
  1400  00117E  0E06               	movlw	6
  1401  001180  6FA1               	movwf	printf@prec& (0+255),b
  1402  001182                     l3888:
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1406  001182  C093  FFD9         	movff	printf@ap,fsr2l
  1407  001186  C094  FFDA         	movff	printf@ap+1,fsr2h
  1408  00118A  CFDE F0A3          	movff	postinc2,printf@fval
  1409  00118E  CFDE F0A4          	movff	postinc2,printf@fval+1
  1410  001192  CFDD F0A5          	movff	postdec2,printf@fval+2
  1411                           
  1412                           ; BSR set to: 0
  1413  001196  0E03               	movlw	3
  1414  001198  0100               	movlb	0	; () banked
  1415  00119A  2793               	addwf	printf@ap& (0+255),f,b
  1416  00119C  0E00               	movlw	0
  1417  00119E  2394               	addwfc	(printf@ap+1)& (0+255),f,b
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;doprnt.c: 831: if(fval < 0.0) {
  1421  0011A0  0100               	movlb	0	; () banked
  1422  0011A2  AFA5               	btfss	(printf@fval+2)& (0+255),7,b
  1423  0011A4  D011               	goto	l3898
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;doprnt.c: 832: fval = -fval;
  1427  0011A6  C0A3  F014         	movff	printf@fval,___ftneg@f1
  1428  0011AA  C0A4  F015         	movff	printf@fval+1,___ftneg@f1+1
  1429  0011AE  C0A5  F016         	movff	printf@fval+2,___ftneg@f1+2
  1430  0011B2  ECF5  F018         	call	___ftneg	;wreg free
  1431  0011B6  C014  F0A3         	movff	?___ftneg,printf@fval
  1432  0011BA  C015  F0A4         	movff	?___ftneg+1,printf@fval+1
  1433  0011BE  C016  F0A5         	movff	?___ftneg+2,printf@fval+2
  1434                           
  1435                           ;doprnt.c: 833: flag |= 0x03;
  1436  0011C2  0E03               	movlw	3
  1437  0011C4  0100               	movlb	0	; () banked
  1438  0011C6  1395               	iorwf	printf@flag& (0+255),f,b
  1439  0011C8                     l3898:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;doprnt.c: 834: }
  1443                           ;doprnt.c: 835: exp = 0;
  1444  0011C8  0E00               	movlw	0
  1445  0011CA  0100               	movlb	0	; () banked
  1446  0011CC  6F9C               	movwf	(printf@exp+1)& (0+255),b
  1447  0011CE  0E00               	movlw	0
  1448  0011D0  6F9B               	movwf	printf@exp& (0+255),b
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 836: if( fval!=0) {
  1452  0011D2  0100               	movlb	0	; () banked
  1453  0011D4  51A3               	movf	printf@fval& (0+255),w,b
  1454  0011D6  0100               	movlb	0	; () banked
  1455  0011D8  11A4               	iorwf	(printf@fval+1)& (0+255),w,b
  1456  0011DA  0100               	movlb	0	; () banked
  1457  0011DC  11A5               	iorwf	(printf@fval+2)& (0+255),w,b
  1458  0011DE  B4D8               	btfsc	status,2,c
  1459  0011E0  D091               	goto	l3926
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1463  0011E2  0E82               	movlw	130
  1464  0011E4  0100               	movlb	0	; () banked
  1465  0011E6  6F8A               	movwf	??_printf& (0+255),b
  1466  0011E8  0EFF               	movlw	255
  1467  0011EA  0100               	movlb	0	; () banked
  1468  0011EC  6F8B               	movwf	(??_printf+1)& (0+255),b
  1469  0011EE  C0A3  F08C         	movff	printf@fval,??_printf+2
  1470  0011F2  C0A4  F08D         	movff	printf@fval+1,??_printf+3
  1471  0011F6  C0A5  F08E         	movff	printf@fval+2,??_printf+4
  1472  0011FA  C0A6  F08F         	movff	printf@fval+3,??_printf+5
  1473  0011FE  0E10               	movlw	16
  1474  001200  D006               	goto	u4100
  1475  001202                     u4105:
  1476  001202  0100               	movlb	0	; () banked
  1477  001204  90D8               	bcf	status,0,c
  1478  001206  338F               	rrcf	(??_printf+5)& (0+255),f,b
  1479  001208  338E               	rrcf	(??_printf+4)& (0+255),f,b
  1480  00120A  338D               	rrcf	(??_printf+3)& (0+255),f,b
  1481  00120C  338C               	rrcf	(??_printf+2)& (0+255),f,b
  1482  00120E                     u4100:
  1483  00120E  2EE8               	decfsz	wreg,f,c
  1484  001210  D7F8               	goto	u4105
  1485  001212  0100               	movlb	0	; () banked
  1486  001214  518C               	movf	(??_printf+2)& (0+255),w,b
  1487  001216  0100               	movlb	0	; () banked
  1488  001218  258A               	addwf	??_printf& (0+255),w,b
  1489  00121A  0100               	movlb	0	; () banked
  1490  00121C  6F9B               	movwf	printf@exp& (0+255),b
  1491  00121E  0E00               	movlw	0
  1492  001220  0100               	movlb	0	; () banked
  1493  001222  218B               	addwfc	(??_printf+1)& (0+255),w,b
  1494  001224  0100               	movlb	0	; () banked
  1495  001226  6F9C               	movwf	(printf@exp+1)& (0+255),b
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;doprnt.c: 838: exp--;
  1499  001228  0100               	movlb	0	; () banked
  1500  00122A  079B               	decf	printf@exp& (0+255),f,b
  1501  00122C  A0D8               	btfss	status,0,c
  1502  00122E  079C               	decf	(printf@exp+1)& (0+255),f,b
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;doprnt.c: 839: exp *= 3;
  1506  001230  C09B  F022         	movff	printf@exp,___wmul@multiplier
  1507  001234  C09C  F023         	movff	printf@exp+1,___wmul@multiplier+1
  1508  001238  0E00               	movlw	0
  1509  00123A  6E25               	movwf	___wmul@multiplicand+1,c
  1510  00123C  0E03               	movlw	3
  1511  00123E  6E24               	movwf	___wmul@multiplicand,c
  1512  001240  ECE2  F018         	call	___wmul	;wreg free
  1513  001244  C022  F09B         	movff	?___wmul,printf@exp
  1514  001248  C023  F09C         	movff	?___wmul+1,printf@exp+1
  1515                           
  1516                           ;doprnt.c: 840: exp /= 10;
  1517  00124C  C09B  F01A         	movff	printf@exp,___awdiv@dividend
  1518  001250  C09C  F01B         	movff	printf@exp+1,___awdiv@dividend+1
  1519  001254  0E00               	movlw	0
  1520  001256  6E1D               	movwf	___awdiv@divisor+1,c
  1521  001258  0E0A               	movlw	10
  1522  00125A  6E1C               	movwf	___awdiv@divisor,c
  1523  00125C  ECEE  F015         	call	___awdiv	;wreg free
  1524  001260  C01A  F09B         	movff	?___awdiv,printf@exp
  1525  001264  C01B  F09C         	movff	?___awdiv+1,printf@exp+1
  1526                           
  1527                           ;doprnt.c: 841: if(exp < 0)
  1528  001268  0100               	movlb	0	; () banked
  1529  00126A  AF9C               	btfss	(printf@exp+1)& (0+255),7,b
  1530  00126C  D004               	goto	l3914
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;doprnt.c: 842: exp--;
  1534  00126E  0100               	movlb	0	; () banked
  1535  001270  079B               	decf	printf@exp& (0+255),f,b
  1536  001272  A0D8               	btfss	status,0,c
  1537  001274  079C               	decf	(printf@exp+1)& (0+255),f,b
  1538  001276                     l3914:
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1542  001276  0100               	movlb	0	; () banked
  1543  001278  519B               	movf	printf@exp& (0+255),w,b
  1544  00127A  0800               	sublw	0
  1545  00127C  EC11  F00C         	call	_scale
  1546  001280  C066  F09D         	movff	?_scale,printf@tmpval
  1547  001284  C067  F09E         	movff	?_scale+1,printf@tmpval+1
  1548  001288  C068  F09F         	movff	?_scale+2,printf@tmpval+2
  1549                           
  1550                           ;doprnt.c: 847: tmpval.integ *= fval;
  1551  00128C  C09D  F02E         	movff	printf@tmpval,___ftmul@f1
  1552  001290  C09E  F02F         	movff	printf@tmpval+1,___ftmul@f1+1
  1553  001294  C09F  F030         	movff	printf@tmpval+2,___ftmul@f1+2
  1554  001298  C0A3  F031         	movff	printf@fval,___ftmul@f2
  1555  00129C  C0A4  F032         	movff	printf@fval+1,___ftmul@f2+1
  1556  0012A0  C0A5  F033         	movff	printf@fval+2,___ftmul@f2+2
  1557  0012A4  ECFD  F013         	call	___ftmul	;wreg free
  1558  0012A8  C02E  F09D         	movff	?___ftmul,printf@tmpval
  1559  0012AC  C02F  F09E         	movff	?___ftmul+1,printf@tmpval+1
  1560  0012B0  C030  F09F         	movff	?___ftmul+2,printf@tmpval+2
  1561                           
  1562                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1563  0012B4  C09D  F014         	movff	printf@tmpval,___ftge@ff1
  1564  0012B8  C09E  F015         	movff	printf@tmpval+1,___ftge@ff1+1
  1565  0012BC  C09F  F016         	movff	printf@tmpval+2,___ftge@ff1+2
  1566  0012C0  0E00               	movlw	0
  1567  0012C2  6E17               	movwf	___ftge@ff2,c
  1568  0012C4  0E80               	movlw	128
  1569  0012C6  6E18               	movwf	___ftge@ff2+1,c
  1570  0012C8  0E3F               	movlw	63
  1571  0012CA  6E19               	movwf	___ftge@ff2+2,c
  1572  0012CC  ECA6  F015         	call	___ftge	;wreg free
  1573  0012D0  B0D8               	btfsc	status,0,c
  1574  0012D2  D005               	goto	l3922
  1575                           
  1576                           ;doprnt.c: 849: exp--;
  1577  0012D4  0100               	movlb	0	; () banked
  1578  0012D6  079B               	decf	printf@exp& (0+255),f,b
  1579  0012D8  A0D8               	btfss	status,0,c
  1580  0012DA  079C               	decf	(printf@exp+1)& (0+255),f,b
  1581  0012DC  D013               	goto	l3926
  1582  0012DE                     l3922:
  1583                           
  1584                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1585  0012DE  C09D  F014         	movff	printf@tmpval,___ftge@ff1
  1586  0012E2  C09E  F015         	movff	printf@tmpval+1,___ftge@ff1+1
  1587  0012E6  C09F  F016         	movff	printf@tmpval+2,___ftge@ff1+2
  1588  0012EA  0E00               	movlw	0
  1589  0012EC  6E17               	movwf	___ftge@ff2,c
  1590  0012EE  0E20               	movlw	32
  1591  0012F0  6E18               	movwf	___ftge@ff2+1,c
  1592  0012F2  0E41               	movlw	65
  1593  0012F4  6E19               	movwf	___ftge@ff2+2,c
  1594  0012F6  ECA6  F015         	call	___ftge	;wreg free
  1595  0012FA  A0D8               	btfss	status,0,c
  1596  0012FC  D003               	goto	l3926
  1597                           
  1598                           ;doprnt.c: 851: exp++;
  1599  0012FE  0100               	movlb	0	; () banked
  1600  001300  4B9B               	infsnz	printf@exp& (0+255),f,b
  1601  001302  2B9C               	incf	(printf@exp+1)& (0+255),f,b
  1602  001304                     l3926:
  1603                           
  1604                           ;doprnt.c: 852: }
  1605                           ;doprnt.c: 1112: if(prec <= 12)
  1606  001304  0100               	movlb	0	; () banked
  1607  001306  BFA2               	btfsc	(printf@prec+1)& (0+255),7,b
  1608  001308  D008               	goto	l3928
  1609  00130A  0100               	movlb	0	; () banked
  1610  00130C  51A2               	movf	(printf@prec+1)& (0+255),w,b
  1611  00130E  E11D               	bnz	l3930
  1612  001310  0E0D               	movlw	13
  1613  001312  0100               	movlb	0	; () banked
  1614  001314  5DA1               	subwf	printf@prec& (0+255),w,b
  1615  001316  B0D8               	btfsc	status,0,c
  1616  001318  D018               	goto	l3930
  1617  00131A                     l3928:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;doprnt.c: 1113: fval += fround(prec);
  1621  00131A  C0A3  F070         	movff	printf@fval,___ftadd@f1
  1622  00131E  C0A4  F071         	movff	printf@fval+1,___ftadd@f1+1
  1623  001322  C0A5  F072         	movff	printf@fval+2,___ftadd@f1+2
  1624  001326  0100               	movlb	0	; () banked
  1625  001328  51A1               	movf	printf@prec& (0+255),w,b
  1626  00132A  EC50  F00F         	call	_fround
  1627  00132E  C066  F073         	movff	?_fround,___ftadd@f2
  1628  001332  C067  F074         	movff	?_fround+1,___ftadd@f2+1
  1629  001336  C068  F075         	movff	?_fround+2,___ftadd@f2+2
  1630  00133A  EC1C  F00E         	call	___ftadd	;wreg free
  1631  00133E  C070  F0A3         	movff	?___ftadd,printf@fval
  1632  001342  C071  F0A4         	movff	?___ftadd+1,printf@fval+1
  1633  001346  C072  F0A5         	movff	?___ftadd+2,printf@fval+2
  1634  00134A                     l3930:
  1635                           
  1636                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1637  00134A  0100               	movlb	0	; () banked
  1638  00134C  BF9C               	btfsc	(printf@exp+1)& (0+255),7,b
  1639  00134E  D008               	goto	l3932
  1640  001350  0100               	movlb	0	; () banked
  1641  001352  519C               	movf	(printf@exp+1)& (0+255),w,b
  1642  001354  E12A               	bnz	l3938
  1643  001356  0E0A               	movlw	10
  1644  001358  0100               	movlb	0	; () banked
  1645  00135A  5D9B               	subwf	printf@exp& (0+255),w,b
  1646  00135C  B0D8               	btfsc	status,0,c
  1647  00135E  D025               	goto	l3938
  1648  001360                     l3932:
  1649                           
  1650                           ; BSR set to: 0
  1651  001360  0100               	movlb	0	; () banked
  1652  001362  51A3               	movf	printf@fval& (0+255),w,b
  1653  001364  0100               	movlb	0	; () banked
  1654  001366  11A4               	iorwf	(printf@fval+1)& (0+255),w,b
  1655  001368  0100               	movlb	0	; () banked
  1656  00136A  11A5               	iorwf	(printf@fval+2)& (0+255),w,b
  1657  00136C  B4D8               	btfsc	status,2,c
  1658  00136E  D05F               	goto	l3952
  1659                           
  1660                           ; BSR set to: 0
  1661  001370  C0A3  F06D         	movff	printf@fval,___fttol@f1
  1662  001374  C0A4  F06E         	movff	printf@fval+1,___fttol@f1+1
  1663  001378  C0A5  F06F         	movff	printf@fval+2,___fttol@f1+2
  1664  00137C  EC96  F011         	call	___fttol	;wreg free
  1665  001380  0100               	movlb	0	; () banked
  1666  001382  516D               	movf	?___fttol& (0+255),w,b
  1667  001384  0100               	movlb	0	; () banked
  1668  001386  116E               	iorwf	(?___fttol+1)& (0+255),w,b
  1669  001388  0100               	movlb	0	; () banked
  1670  00138A  116F               	iorwf	(?___fttol+2)& (0+255),w,b
  1671  00138C  0100               	movlb	0	; () banked
  1672  00138E  1170               	iorwf	(?___fttol+3)& (0+255),w,b
  1673  001390  A4D8               	btfss	status,2,c
  1674  001392  D04D               	goto	l3952
  1675                           
  1676                           ; BSR set to: 0
  1677  001394  0100               	movlb	0	; () banked
  1678  001396  BF9C               	btfsc	(printf@exp+1)& (0+255),7,b
  1679  001398  D04A               	goto	l3952
  1680  00139A  0100               	movlb	0	; () banked
  1681  00139C  519C               	movf	(printf@exp+1)& (0+255),w,b
  1682  00139E  E105               	bnz	l3938
  1683  0013A0  0E02               	movlw	2
  1684  0013A2  0100               	movlb	0	; () banked
  1685  0013A4  5D9B               	subwf	printf@exp& (0+255),w,b
  1686  0013A6  A0D8               	btfss	status,0,c
  1687  0013A8  D042               	goto	l3952
  1688  0013AA                     l3938:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1692  0013AA  C09D  F014         	movff	printf@tmpval,___ftge@ff1
  1693  0013AE  C09E  F015         	movff	printf@tmpval+1,___ftge@ff1+1
  1694  0013B2  C09F  F016         	movff	printf@tmpval+2,___ftge@ff1+2
  1695  0013B6  0E70               	movlw	112
  1696  0013B8  6E17               	movwf	___ftge@ff2,c
  1697  0013BA  0E89               	movlw	137
  1698  0013BC  6E18               	movwf	___ftge@ff2+1,c
  1699  0013BE  0E40               	movlw	64
  1700  0013C0  6E19               	movwf	___ftge@ff2+2,c
  1701  0013C2  ECA6  F015         	call	___ftge	;wreg free
  1702  0013C6  B0D8               	btfsc	status,0,c
  1703  0013C8  D003               	goto	l3942
  1704                           
  1705                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1706  0013CA  0100               	movlb	0	; () banked
  1707  0013CC  0EF7               	movlw	247
  1708  0013CE  D002               	goto	L1
  1709  0013D0                     l3942:
  1710                           
  1711                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1712  0013D0  0100               	movlb	0	; () banked
  1713  0013D2  0EF8               	movlw	248
  1714  0013D4                     L1:
  1715  0013D4  279B               	addwf	printf@exp& (0+255),f,b
  1716  0013D6  0EFF               	movlw	255
  1717  0013D8  239C               	addwfc	(printf@exp+1)& (0+255),f,b
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;doprnt.c: 1124: }
  1721                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1722                           
  1723                           ; BSR set to: 0
  1724  0013DA  0100               	movlb	0	; () banked
  1725  0013DC  519B               	movf	printf@exp& (0+255),w,b
  1726  0013DE  EC11  F00C         	call	_scale
  1727  0013E2  C066  F09D         	movff	?_scale,printf@tmpval
  1728  0013E6  C067  F09E         	movff	?_scale+1,printf@tmpval+1
  1729  0013EA  C068  F09F         	movff	?_scale+2,printf@tmpval+2
  1730                           
  1731                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1732  0013EE  C0A3  F014         	movff	printf@fval,__tdiv_to_l_@f1
  1733  0013F2  C0A4  F015         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1734  0013F6  C0A5  F016         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1735  0013FA  C09D  F017         	movff	printf@tmpval,__tdiv_to_l_@f2
  1736  0013FE  C09E  F018         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1737  001402  C09F  F019         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1738  001406  EC38  F012         	call	__tdiv_to_l_	;wreg free
  1739  00140A  C014  F097         	movff	?__tdiv_to_l_,printf@val
  1740  00140E  C015  F098         	movff	?__tdiv_to_l_+1,printf@val+1
  1741  001412  C016  F099         	movff	?__tdiv_to_l_+2,printf@val+2
  1742  001416  C017  F09A         	movff	?__tdiv_to_l_+3,printf@val+3
  1743                           
  1744                           ;doprnt.c: 1129: fval = 0.0;
  1745  00141A  0E00               	movlw	0
  1746  00141C  0100               	movlb	0	; () banked
  1747  00141E  6FA3               	movwf	printf@fval& (0+255),b
  1748  001420  0E00               	movlw	0
  1749  001422  0100               	movlb	0	; () banked
  1750  001424  6FA4               	movwf	(printf@fval+1)& (0+255),b
  1751  001426  0E00               	movlw	0
  1752  001428  0100               	movlb	0	; () banked
  1753  00142A  6FA5               	movwf	(printf@fval+2)& (0+255),b
  1754                           
  1755                           ;doprnt.c: 1130: } else {
  1756  00142C  D033               	goto	l3956
  1757  00142E                     l3952:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1761  00142E  C0A3  F06D         	movff	printf@fval,___fttol@f1
  1762  001432  C0A4  F06E         	movff	printf@fval+1,___fttol@f1+1
  1763  001436  C0A5  F06F         	movff	printf@fval+2,___fttol@f1+2
  1764  00143A  EC96  F011         	call	___fttol	;wreg free
  1765  00143E  C06D  F097         	movff	?___fttol,printf@val
  1766  001442  C06E  F098         	movff	?___fttol+1,printf@val+1
  1767  001446  C06F  F099         	movff	?___fttol+2,printf@val+2
  1768  00144A  C070  F09A         	movff	?___fttol+3,printf@val+3
  1769                           
  1770                           ;doprnt.c: 1132: fval -= (double)val;
  1771  00144E  C0A3  F07C         	movff	printf@fval,___ftsub@f1
  1772  001452  C0A4  F07D         	movff	printf@fval+1,___ftsub@f1+1
  1773  001456  C0A5  F07E         	movff	printf@fval+2,___ftsub@f1+2
  1774  00145A  C097  F01C         	movff	printf@val,___lltoft@c
  1775  00145E  C098  F01D         	movff	printf@val+1,___lltoft@c+1
  1776  001462  C099  F01E         	movff	printf@val+2,___lltoft@c+2
  1777  001466  C09A  F01F         	movff	printf@val+3,___lltoft@c+3
  1778  00146A  ECDC  F016         	call	___lltoft	;wreg free
  1779  00146E  C01C  F07F         	movff	?___lltoft,___ftsub@f2
  1780  001472  C01D  F080         	movff	?___lltoft+1,___ftsub@f2+1
  1781  001476  C01E  F081         	movff	?___lltoft+2,___ftsub@f2+2
  1782  00147A  EC32  F017         	call	___ftsub	;wreg free
  1783  00147E  C07C  F0A3         	movff	?___ftsub,printf@fval
  1784  001482  C07D  F0A4         	movff	?___ftsub+1,printf@fval+1
  1785  001486  C07E  F0A5         	movff	?___ftsub+2,printf@fval+2
  1786                           
  1787                           ;doprnt.c: 1133: exp = 0;
  1788  00148A  0E00               	movlw	0
  1789  00148C  0100               	movlb	0	; () banked
  1790  00148E  6F9C               	movwf	(printf@exp+1)& (0+255),b
  1791  001490  0E00               	movlw	0
  1792  001492  6F9B               	movwf	printf@exp& (0+255),b
  1793  001494                     l3956:
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;doprnt.c: 1134: }
  1797                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1798  001494  0E01               	movlw	1
  1799  001496  0100               	movlb	0	; () banked
  1800  001498  6FA6               	movwf	printf@c& (0+255),b
  1801  00149A                     l3958:
  1802                           
  1803                           ; BSR set to: 0
  1804  00149A  0E0A               	movlw	10
  1805  00149C  0100               	movlb	0	; () banked
  1806  00149E  19A6               	xorwf	printf@c& (0+255),w,b
  1807  0014A0  B4D8               	btfsc	status,2,c
  1808  0014A2  D01E               	goto	l3970
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;doprnt.c: 1137: if(val < dpowers[c])
  1812                           
  1813                           ; BSR set to: 0
  1814                           
  1815                           ; BSR set to: 0
  1816  0014A4  0100               	movlb	0	; () banked
  1817  0014A6  51A6               	movf	printf@c& (0+255),w,b
  1818  0014A8  0D04               	mullw	4
  1819  0014AA  0E01               	movlw	low _dpowers
  1820  0014AC  24F3               	addwf	prodl,w,c
  1821  0014AE  6EF6               	movwf	tblptrl,c
  1822  0014B0  0E10               	movlw	high _dpowers
  1823  0014B2  20F4               	addwfc	prodh,w,c
  1824  0014B4  6EF7               	movwf	tblptrh,c
  1825  0014B6                     	if	0	;There are less than 3 active tblptr bytes
  1826  0014B6                     	endif
  1827  0014B6  0009               	tblrd		*+
  1828  0014B8  50F5               	movf	tablat,w,c
  1829  0014BA  0100               	movlb	0	; () banked
  1830  0014BC  5D97               	subwf	printf@val& (0+255),w,b
  1831  0014BE  0009               	tblrd		*+
  1832  0014C0  50F5               	movf	tablat,w,c
  1833  0014C2  0100               	movlb	0	; () banked
  1834  0014C4  5998               	subwfb	(printf@val+1)& (0+255),w,b
  1835  0014C6  0009               	tblrd		*+
  1836  0014C8  50F5               	movf	tablat,w,c
  1837  0014CA  0100               	movlb	0	; () banked
  1838  0014CC  5999               	subwfb	(printf@val+2)& (0+255),w,b
  1839  0014CE  0009               	tblrd		*+
  1840  0014D0  50F5               	movf	tablat,w,c
  1841  0014D2  0100               	movlb	0	; () banked
  1842  0014D4  599A               	subwfb	(printf@val+3)& (0+255),w,b
  1843  0014D6  A0D8               	btfss	status,0,c
  1844  0014D8  D003               	goto	l3970
  1845                           
  1846                           ; BSR set to: 0
  1847                           
  1848                           ; BSR set to: 0
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;doprnt.c: 1138: break;
  1852  0014DA  0100               	movlb	0	; () banked
  1853  0014DC  2BA6               	incf	printf@c& (0+255),f,b
  1854  0014DE  D7DD               	goto	l3958
  1855  0014E0                     l3970:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;doprnt.c: 1175: {
  1859                           ;doprnt.c: 1188: if(flag & 0x03)
  1860  0014E0  0E03               	movlw	3
  1861  0014E2  0100               	movlb	0	; () banked
  1862  0014E4  1595               	andwf	printf@flag& (0+255),w,b
  1863  0014E6  0100               	movlb	0	; () banked
  1864  0014E8  6F8A               	movwf	??_printf& (0+255),b
  1865  0014EA  0E00               	movlw	0
  1866  0014EC  0100               	movlb	0	; () banked
  1867  0014EE  1596               	andwf	(printf@flag+1)& (0+255),w,b
  1868  0014F0  0100               	movlb	0	; () banked
  1869  0014F2  6F8B               	movwf	(??_printf+1)& (0+255),b
  1870  0014F4  0100               	movlb	0	; () banked
  1871  0014F6  518A               	movf	??_printf& (0+255),w,b
  1872  0014F8  0100               	movlb	0	; () banked
  1873  0014FA  118B               	iorwf	(??_printf+1)& (0+255),w,b
  1874  0014FC  B4D8               	btfsc	status,2,c
  1875  0014FE  D04A               	goto	l3980
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;doprnt.c: 1190: (putch('-') );
  1879  001500  0E2D               	movlw	45
  1880  001502  EC57  F019         	call	_putch
  1881                           
  1882                           ;doprnt.c: 1195: }
  1883                           ;doprnt.c: 1196: while(c--) {
  1884  001506  D046               	goto	l3980
  1885  001508                     l3974:
  1886                           
  1887                           ;doprnt.c: 1200: {
  1888                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1889  001508  C097  F014         	movff	printf@val,___lldiv@dividend
  1890  00150C  C098  F015         	movff	printf@val+1,___lldiv@dividend+1
  1891  001510  C099  F016         	movff	printf@val+2,___lldiv@dividend+2
  1892  001514  C09A  F017         	movff	printf@val+3,___lldiv@dividend+3
  1893  001518  0100               	movlb	0	; () banked
  1894  00151A  51A6               	movf	printf@c& (0+255),w,b
  1895  00151C  0D04               	mullw	4
  1896  00151E  0E01               	movlw	low _dpowers
  1897  001520  24F3               	addwf	prodl,w,c
  1898  001522  6EF6               	movwf	tblptrl,c
  1899  001524  0E10               	movlw	high _dpowers
  1900  001526  20F4               	addwfc	prodh,w,c
  1901  001528  6EF7               	movwf	tblptrh,c
  1902  00152A                     	if	0	;There are less than 3 active tblptr bytes
  1903  00152A                     	endif
  1904  00152A  0009               	tblrd		*+
  1905  00152C  CFF5 F018          	movff	tablat,___lldiv@divisor
  1906  001530  0009               	tblrd		*+
  1907  001532  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  1908  001536  0009               	tblrd		*+
  1909  001538  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  1910  00153C  000A               	tblrd		*-
  1911  00153E  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  1912  001542  EC30  F016         	call	___lldiv	;wreg free
  1913  001546  C014  F09D         	movff	?___lldiv,printf@tmpval
  1914  00154A  C015  F09E         	movff	?___lldiv+1,printf@tmpval+1
  1915  00154E  C016  F09F         	movff	?___lldiv+2,printf@tmpval+2
  1916  001552  C017  F0A0         	movff	?___lldiv+3,printf@tmpval+3
  1917                           
  1918                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1919  001556  C09D  F014         	movff	printf@tmpval,___llmod@dividend
  1920  00155A  C09E  F015         	movff	printf@tmpval+1,___llmod@dividend+1
  1921  00155E  C09F  F016         	movff	printf@tmpval+2,___llmod@dividend+2
  1922  001562  C0A0  F017         	movff	printf@tmpval+3,___llmod@dividend+3
  1923  001566  0E0A               	movlw	10
  1924  001568  6E18               	movwf	___llmod@divisor,c
  1925  00156A  0E00               	movlw	0
  1926  00156C  6E19               	movwf	___llmod@divisor+1,c
  1927  00156E  0E00               	movlw	0
  1928  001570  6E1A               	movwf	___llmod@divisor+2,c
  1929  001572  0E00               	movlw	0
  1930  001574  6E1B               	movwf	___llmod@divisor+3,c
  1931  001576  ECA9  F016         	call	___llmod	;wreg free
  1932  00157A  C014  F09D         	movff	?___llmod,printf@tmpval
  1933  00157E  C015  F09E         	movff	?___llmod+1,printf@tmpval+1
  1934  001582  C016  F09F         	movff	?___llmod+2,printf@tmpval+2
  1935  001586  C017  F0A0         	movff	?___llmod+3,printf@tmpval+3
  1936                           
  1937                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1938  00158A  0100               	movlb	0	; () banked
  1939  00158C  519D               	movf	printf@tmpval& (0+255),w,b
  1940  00158E  0F30               	addlw	48
  1941  001590  EC57  F019         	call	_putch
  1942  001594                     l3980:
  1943  001594  0100               	movlb	0	; () banked
  1944  001596  07A6               	decf	printf@c& (0+255),f,b
  1945  001598  0100               	movlb	0	; () banked
  1946  00159A  29A6               	incf	printf@c& (0+255),w,b
  1947  00159C  B4D8               	btfsc	status,2,c
  1948  00159E  D008               	goto	l3986
  1949  0015A0  D7B3               	goto	l3974
  1950  0015A2                     l3982:
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;doprnt.c: 1208: (putch('0') );
  1954  0015A2  0E30               	movlw	48
  1955  0015A4  EC57  F019         	call	_putch
  1956                           
  1957                           ;doprnt.c: 1209: exp--;
  1958  0015A8  0100               	movlb	0	; () banked
  1959  0015AA  079B               	decf	printf@exp& (0+255),f,b
  1960  0015AC  A0D8               	btfss	status,0,c
  1961  0015AE  079C               	decf	(printf@exp+1)& (0+255),f,b
  1962  0015B0                     l3986:
  1963                           
  1964                           ; BSR set to: 0
  1965  0015B0  0100               	movlb	0	; () banked
  1966  0015B2  BF9C               	btfsc	(printf@exp+1)& (0+255),7,b
  1967  0015B4  D007               	goto	l3988
  1968  0015B6  0100               	movlb	0	; () banked
  1969  0015B8  519C               	movf	(printf@exp+1)& (0+255),w,b
  1970  0015BA  E1F3               	bnz	l3982
  1971  0015BC  0100               	movlb	0	; () banked
  1972  0015BE  059B               	decf	printf@exp& (0+255),w,b
  1973  0015C0  B0D8               	btfsc	status,0,c
  1974  0015C2  D7EF               	goto	l3982
  1975  0015C4                     l3988:
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 1210: }
  1979                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1980  0015C4  0100               	movlb	0	; () banked
  1981  0015C6  BFA2               	btfsc	(printf@prec+1)& (0+255),7,b
  1982  0015C8  D00C               	goto	l434
  1983  0015CA  0100               	movlb	0	; () banked
  1984  0015CC  51A2               	movf	(printf@prec+1)& (0+255),w,b
  1985  0015CE  E105               	bnz	u4260
  1986  0015D0  0E09               	movlw	9
  1987  0015D2  0100               	movlb	0	; () banked
  1988  0015D4  5DA1               	subwf	printf@prec& (0+255),w,b
  1989  0015D6  A0D8               	btfss	status,0,c
  1990  0015D8  D004               	goto	l434
  1991  0015DA                     u4260:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1995  0015DA  0E08               	movlw	8
  1996  0015DC  0100               	movlb	0	; () banked
  1997  0015DE  6FA6               	movwf	printf@c& (0+255),b
  1998  0015E0  D002               	goto	l3992
  1999  0015E2                     l434:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;doprnt.c: 1213: else
  2003                           ;doprnt.c: 1214: c = prec;
  2004  0015E2  C0A1  F0A6         	movff	printf@prec,printf@c
  2005  0015E6                     l3992:
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;doprnt.c: 1215: prec -= c;
  2009  0015E6  0100               	movlb	0	; () banked
  2010  0015E8  51A6               	movf	printf@c& (0+255),w,b
  2011  0015EA  0100               	movlb	0	; () banked
  2012  0015EC  5FA1               	subwf	printf@prec& (0+255),f,b
  2013  0015EE  0E00               	movlw	0
  2014  0015F0  0100               	movlb	0	; () banked
  2015  0015F2  BFA6               	btfsc	printf@c& (0+255),7,b
  2016  0015F4  0EFF               	movlw	255
  2017  0015F6  0100               	movlb	0	; () banked
  2018  0015F8  5BA2               	subwfb	(printf@prec+1)& (0+255),f,b
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;doprnt.c: 1219: if(c)
  2022  0015FA  0100               	movlb	0	; () banked
  2023  0015FC  51A6               	movf	printf@c& (0+255),w,b
  2024  0015FE  0100               	movlb	0	; () banked
  2025  001600  B4D8               	btfsc	status,2,c
  2026  001602  D003               	goto	l3998
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;doprnt.c: 1221: (putch('.') );
  2030  001604  0E2E               	movlw	46
  2031  001606  EC57  F019         	call	_putch
  2032  00160A                     l3998:
  2033                           
  2034                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2035  00160A  0100               	movlb	0	; () banked
  2036  00160C  51A6               	movf	printf@c& (0+255),w,b
  2037  00160E  EC11  F00C         	call	_scale
  2038  001612  C066  F090         	movff	?_scale,_printf$1619
  2039  001616  C067  F091         	movff	?_scale+1,_printf$1619+1
  2040  00161A  C068  F092         	movff	?_scale+2,_printf$1619+2
  2041                           
  2042                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2043  00161E  C0A3  F031         	movff	printf@fval,___ftmul@f2
  2044  001622  C0A4  F032         	movff	printf@fval+1,___ftmul@f2+1
  2045  001626  C0A5  F033         	movff	printf@fval+2,___ftmul@f2+2
  2046  00162A  C090  F02E         	movff	_printf$1619,___ftmul@f1
  2047  00162E  C091  F02F         	movff	_printf$1619+1,___ftmul@f1+1
  2048  001632  C092  F030         	movff	_printf$1619+2,___ftmul@f1+2
  2049  001636  ECFD  F013         	call	___ftmul	;wreg free
  2050  00163A  C02E  F06D         	movff	?___ftmul,___fttol@f1
  2051  00163E  C02F  F06E         	movff	?___ftmul+1,___fttol@f1+1
  2052  001642  C030  F06F         	movff	?___ftmul+2,___fttol@f1+2
  2053  001646  EC96  F011         	call	___fttol	;wreg free
  2054  00164A  C06D  F097         	movff	?___fttol,printf@val
  2055  00164E  C06E  F098         	movff	?___fttol+1,printf@val+1
  2056  001652  C06F  F099         	movff	?___fttol+2,printf@val+2
  2057  001656  C070  F09A         	movff	?___fttol+3,printf@val+3
  2058                           
  2059                           ;doprnt.c: 1228: while(c--) {
  2060  00165A  D06D               	goto	l4008
  2061  00165C                     l4002:
  2062                           
  2063                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2064  00165C  C097  F014         	movff	printf@val,___lldiv@dividend
  2065  001660  C098  F015         	movff	printf@val+1,___lldiv@dividend+1
  2066  001664  C099  F016         	movff	printf@val+2,___lldiv@dividend+2
  2067  001668  C09A  F017         	movff	printf@val+3,___lldiv@dividend+3
  2068  00166C  0100               	movlb	0	; () banked
  2069  00166E  51A6               	movf	printf@c& (0+255),w,b
  2070  001670  0D04               	mullw	4
  2071  001672  0E01               	movlw	low _dpowers
  2072  001674  24F3               	addwf	prodl,w,c
  2073  001676  6EF6               	movwf	tblptrl,c
  2074  001678  0E10               	movlw	high _dpowers
  2075  00167A  20F4               	addwfc	prodh,w,c
  2076  00167C  6EF7               	movwf	tblptrh,c
  2077  00167E                     	if	0	;There are less than 3 active tblptr bytes
  2078  00167E                     	endif
  2079  00167E  0009               	tblrd		*+
  2080  001680  CFF5 F018          	movff	tablat,___lldiv@divisor
  2081  001684  0009               	tblrd		*+
  2082  001686  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  2083  00168A  0009               	tblrd		*+
  2084  00168C  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  2085  001690  000A               	tblrd		*-
  2086  001692  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  2087  001696  EC30  F016         	call	___lldiv	;wreg free
  2088  00169A  C014  F09D         	movff	?___lldiv,printf@tmpval
  2089  00169E  C015  F09E         	movff	?___lldiv+1,printf@tmpval+1
  2090  0016A2  C016  F09F         	movff	?___lldiv+2,printf@tmpval+2
  2091  0016A6  C017  F0A0         	movff	?___lldiv+3,printf@tmpval+3
  2092                           
  2093                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2094  0016AA  C09D  F014         	movff	printf@tmpval,___llmod@dividend
  2095  0016AE  C09E  F015         	movff	printf@tmpval+1,___llmod@dividend+1
  2096  0016B2  C09F  F016         	movff	printf@tmpval+2,___llmod@dividend+2
  2097  0016B6  C0A0  F017         	movff	printf@tmpval+3,___llmod@dividend+3
  2098  0016BA  0E0A               	movlw	10
  2099  0016BC  6E18               	movwf	___llmod@divisor,c
  2100  0016BE  0E00               	movlw	0
  2101  0016C0  6E19               	movwf	___llmod@divisor+1,c
  2102  0016C2  0E00               	movlw	0
  2103  0016C4  6E1A               	movwf	___llmod@divisor+2,c
  2104  0016C6  0E00               	movlw	0
  2105  0016C8  6E1B               	movwf	___llmod@divisor+3,c
  2106  0016CA  ECA9  F016         	call	___llmod	;wreg free
  2107  0016CE  C014  F09D         	movff	?___llmod,printf@tmpval
  2108  0016D2  C015  F09E         	movff	?___llmod+1,printf@tmpval+1
  2109  0016D6  C016  F09F         	movff	?___llmod+2,printf@tmpval+2
  2110  0016DA  C017  F0A0         	movff	?___llmod+3,printf@tmpval+3
  2111                           
  2112                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2113  0016DE  0100               	movlb	0	; () banked
  2114  0016E0  519D               	movf	printf@tmpval& (0+255),w,b
  2115  0016E2  0F30               	addlw	48
  2116  0016E4  EC57  F019         	call	_putch
  2117                           
  2118                           ;doprnt.c: 1232: val %= dpowers[c];
  2119  0016E8  C097  F014         	movff	printf@val,___llmod@dividend
  2120  0016EC  C098  F015         	movff	printf@val+1,___llmod@dividend+1
  2121  0016F0  C099  F016         	movff	printf@val+2,___llmod@dividend+2
  2122  0016F4  C09A  F017         	movff	printf@val+3,___llmod@dividend+3
  2123  0016F8  0100               	movlb	0	; () banked
  2124  0016FA  51A6               	movf	printf@c& (0+255),w,b
  2125  0016FC  0D04               	mullw	4
  2126  0016FE  0E01               	movlw	low _dpowers
  2127  001700  24F3               	addwf	prodl,w,c
  2128  001702  6EF6               	movwf	tblptrl,c
  2129  001704  0E10               	movlw	high _dpowers
  2130  001706  20F4               	addwfc	prodh,w,c
  2131  001708  6EF7               	movwf	tblptrh,c
  2132  00170A                     	if	0	;There are less than 3 active tblptr bytes
  2133  00170A                     	endif
  2134  00170A  0009               	tblrd		*+
  2135  00170C  CFF5 F018          	movff	tablat,___llmod@divisor
  2136  001710  0009               	tblrd		*+
  2137  001712  CFF5 F019          	movff	tablat,___llmod@divisor+1
  2138  001716  0009               	tblrd		*+
  2139  001718  CFF5 F01A          	movff	tablat,___llmod@divisor+2
  2140  00171C  000A               	tblrd		*-
  2141  00171E  CFF5 F01B          	movff	tablat,___llmod@divisor+3
  2142  001722  ECA9  F016         	call	___llmod	;wreg free
  2143  001726  C014  F097         	movff	?___llmod,printf@val
  2144  00172A  C015  F098         	movff	?___llmod+1,printf@val+1
  2145  00172E  C016  F099         	movff	?___llmod+2,printf@val+2
  2146  001732  C017  F09A         	movff	?___llmod+3,printf@val+3
  2147  001736                     l4008:
  2148  001736  0100               	movlb	0	; () banked
  2149  001738  07A6               	decf	printf@c& (0+255),f,b
  2150  00173A  0100               	movlb	0	; () banked
  2151  00173C  29A6               	incf	printf@c& (0+255),w,b
  2152  00173E  B4D8               	btfsc	status,2,c
  2153  001740  D008               	goto	l4014
  2154  001742  D78C               	goto	l4002
  2155  001744                     l4010:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;doprnt.c: 1236: (putch('0') );
  2159  001744  0E30               	movlw	48
  2160  001746  EC57  F019         	call	_putch
  2161                           
  2162                           ;doprnt.c: 1237: prec--;
  2163  00174A  0100               	movlb	0	; () banked
  2164  00174C  07A1               	decf	printf@prec& (0+255),f,b
  2165  00174E  A0D8               	btfss	status,0,c
  2166  001750  07A2               	decf	(printf@prec+1)& (0+255),f,b
  2167  001752                     l4014:
  2168                           
  2169                           ; BSR set to: 0
  2170  001752  0100               	movlb	0	; () banked
  2171  001754  51A1               	movf	printf@prec& (0+255),w,b
  2172  001756  0100               	movlb	0	; () banked
  2173  001758  11A2               	iorwf	(printf@prec+1)& (0+255),w,b
  2174  00175A  B4D8               	btfsc	status,2,c
  2175  00175C  D053               	goto	l4034
  2176  00175E  D7F2               	goto	l4010
  2177  001760                     l4016:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;doprnt.c: 1246: }
  2181                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2182  001760  0100               	movlb	0	; () banked
  2183  001762  51A1               	movf	printf@prec& (0+255),w,b
  2184  001764  0100               	movlb	0	; () banked
  2185  001766  11A2               	iorwf	(printf@prec+1)& (0+255),w,b
  2186  001768  A4D8               	btfss	status,2,c
  2187  00176A  D00D               	goto	l4022
  2188                           
  2189                           ; BSR set to: 0
  2190  00176C  0100               	movlb	0	; () banked
  2191  00176E  5197               	movf	printf@val& (0+255),w,b
  2192  001770  0100               	movlb	0	; () banked
  2193  001772  1198               	iorwf	(printf@val+1)& (0+255),w,b
  2194  001774  0100               	movlb	0	; () banked
  2195  001776  1199               	iorwf	(printf@val+2)& (0+255),w,b
  2196  001778  0100               	movlb	0	; () banked
  2197  00177A  119A               	iorwf	(printf@val+3)& (0+255),w,b
  2198  00177C  A4D8               	btfss	status,2,c
  2199  00177E  D003               	goto	l4022
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;doprnt.c: 1291: prec++;
  2203  001780  0100               	movlb	0	; () banked
  2204  001782  4BA1               	infsnz	printf@prec& (0+255),f,b
  2205  001784  2BA2               	incf	(printf@prec+1)& (0+255),f,b
  2206  001786                     l4022:
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;doprnt.c: 1339: if(c < prec)
  2210  001786  0E80               	movlw	128
  2211  001788  0100               	movlb	0	; () banked
  2212  00178A  BFA6               	btfsc	printf@c& (0+255),7,b
  2213  00178C  0E7F               	movlw	127
  2214  00178E  0100               	movlb	0	; () banked
  2215  001790  6F8A               	movwf	??_printf& (0+255),b
  2216  001792  0100               	movlb	0	; () banked
  2217  001794  51A1               	movf	printf@prec& (0+255),w,b
  2218  001796  0100               	movlb	0	; () banked
  2219  001798  5DA6               	subwf	printf@c& (0+255),w,b
  2220  00179A  0100               	movlb	0	; () banked
  2221  00179C  51A2               	movf	(printf@prec+1)& (0+255),w,b
  2222  00179E  0A80               	xorlw	128
  2223  0017A0  0100               	movlb	0	; () banked
  2224  0017A2  598A               	subwfb	??_printf& (0+255),w,b
  2225  0017A4  B0D8               	btfsc	status,0,c
  2226  0017A6  D003               	goto	l4026
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 1340: c = prec;
  2230  0017A8  C0A1  F0A6         	movff	printf@prec,printf@c
  2231  0017AC  D018               	goto	l4030
  2232  0017AE                     l4026:
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;doprnt.c: 1341: else if(prec < c)
  2236  0017AE  0100               	movlb	0	; () banked
  2237  0017B0  51A2               	movf	(printf@prec+1)& (0+255),w,b
  2238  0017B2  0A80               	xorlw	128
  2239  0017B4  0100               	movlb	0	; () banked
  2240  0017B6  6F8A               	movwf	??_printf& (0+255),b
  2241  0017B8  0100               	movlb	0	; () banked
  2242  0017BA  51A6               	movf	printf@c& (0+255),w,b
  2243  0017BC  0100               	movlb	0	; () banked
  2244  0017BE  5DA1               	subwf	printf@prec& (0+255),w,b
  2245  0017C0  0E80               	movlw	128
  2246  0017C2  0100               	movlb	0	; () banked
  2247  0017C4  BFA6               	btfsc	printf@c& (0+255),7,b
  2248  0017C6  0E7F               	movlw	127
  2249  0017C8  0100               	movlb	0	; () banked
  2250  0017CA  598A               	subwfb	??_printf& (0+255),w,b
  2251  0017CC  B0D8               	btfsc	status,0,c
  2252  0017CE  D007               	goto	l4030
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;doprnt.c: 1342: prec = c;
  2256  0017D0  0100               	movlb	0	; () banked
  2257  0017D2  51A6               	movf	printf@c& (0+255),w,b
  2258  0017D4  0100               	movlb	0	; () banked
  2259  0017D6  6FA1               	movwf	printf@prec& (0+255),b
  2260  0017D8  6BA2               	clrf	(printf@prec+1)& (0+255),b
  2261  0017DA  BFA1               	btfsc	printf@prec& (0+255),7,b
  2262  0017DC  07A2               	decf	(printf@prec+1)& (0+255),f,b
  2263  0017DE                     l4030:
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;doprnt.c: 1422: {
  2267                           ;doprnt.c: 1438: if(flag & 0x03)
  2268  0017DE  0E03               	movlw	3
  2269  0017E0  0100               	movlb	0	; () banked
  2270  0017E2  1595               	andwf	printf@flag& (0+255),w,b
  2271  0017E4  0100               	movlb	0	; () banked
  2272  0017E6  6F8A               	movwf	??_printf& (0+255),b
  2273  0017E8  0E00               	movlw	0
  2274  0017EA  0100               	movlb	0	; () banked
  2275  0017EC  1596               	andwf	(printf@flag+1)& (0+255),w,b
  2276  0017EE  0100               	movlb	0	; () banked
  2277  0017F0  6F8B               	movwf	(??_printf+1)& (0+255),b
  2278  0017F2  0100               	movlb	0	; () banked
  2279  0017F4  518A               	movf	??_printf& (0+255),w,b
  2280  0017F6  0100               	movlb	0	; () banked
  2281  0017F8  118B               	iorwf	(??_printf+1)& (0+255),w,b
  2282  0017FA  B4D8               	btfsc	status,2,c
  2283  0017FC  D003               	goto	l4034
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;doprnt.c: 1439: (putch('-') );
  2287  0017FE  0E2D               	movlw	45
  2288  001800  EC57  F019         	call	_putch
  2289  001804                     l4034:
  2290  001804  C082  FFF6         	movff	printf@f,tblptrl
  2291  001808  C083  FFF7         	movff	printf@f+1,tblptrh
  2292  00180C  0100               	movlb	0	; () banked
  2293  00180E  4B82               	infsnz	printf@f& (0+255),f,b
  2294  001810  2B83               	incf	(printf@f+1)& (0+255),f,b
  2295  001812                     	if	0	;tblptru may be non-zero
  2296  001812                     	endif
  2297  001812                     	if	0	;tblptru may be non-zero
  2298  001812                     	endif
  2299  001812  0008               	tblrd		*
  2300  001814  CFF5 F0A6          	movff	tablat,printf@c
  2301  001818  0100               	movlb	0	; () banked
  2302  00181A  51A6               	movf	printf@c& (0+255),w,b
  2303  00181C  B4D8               	btfsc	status,2,c
  2304  00181E  0012               	return	
  2305  001820  D439               	goto	l3854
  2306  001822                     __end_of_printf:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _scale *****************
  2324 ;; Defined at:
  2325 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  scl             1    wreg     char 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  scl             1   12[BANK0 ] char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  3    6[BANK0 ] char 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2339 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;Total ram usage:        7 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    5
  2346 ;; This function calls:
  2347 ;;		___awdiv
  2348 ;;		___awmod
  2349 ;;		___ftmul
  2350 ;;		___wmul
  2351 ;; This function is called by:
  2352 ;;		_printf
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text2
  2357  001822                     __ptext2:
  2358                           	opt stack 0
  2359  001822                     _scale:
  2360                           	opt stack 24
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;incstack = 0
  2364                           ;scale@scl stored from wreg
  2365  001822  0100               	movlb	0	; () banked
  2366  001824  6F6C               	movwf	scale@scl& (0+255),b
  2367                           
  2368                           ;doprnt.c: 428: if(scl < 0) {
  2369  001826  0100               	movlb	0	; () banked
  2370  001828  AF6C               	btfss	scale@scl& (0+255),7,b
  2371  00182A  D104               	goto	l3770
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;doprnt.c: 429: scl = -scl;
  2375  00182C  0100               	movlb	0	; () banked
  2376  00182E  6D6C               	negf	scale@scl& (0+255),b
  2377                           
  2378                           ;doprnt.c: 430: if(scl>=110)
  2379  001830  0100               	movlb	0	; () banked
  2380  001832  516C               	movf	scale@scl& (0+255),w,b
  2381  001834  0A80               	xorlw	128
  2382  001836  0F12               	addlw	-238
  2383  001838  A0D8               	btfss	status,0,c
  2384  00183A  D094               	goto	l3760
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2388  00183C  0E00               	movlw	0
  2389  00183E  6E25               	movwf	___wmul@multiplicand+1,c
  2390  001840  0E03               	movlw	3
  2391  001842  6E24               	movwf	___wmul@multiplicand,c
  2392  001844  0E00               	movlw	0
  2393  001846  6E1D               	movwf	___awdiv@divisor+1,c
  2394  001848  0E0A               	movlw	10
  2395  00184A  6E1C               	movwf	___awdiv@divisor,c
  2396  00184C  0E00               	movlw	0
  2397  00184E  6E17               	movwf	___awmod@divisor+1,c
  2398  001850  0E64               	movlw	100
  2399  001852  6E16               	movwf	___awmod@divisor,c
  2400  001854  0100               	movlb	0	; () banked
  2401  001856  516C               	movf	scale@scl& (0+255),w,b
  2402  001858  6E14               	movwf	___awmod@dividend,c
  2403  00185A  6A15               	clrf	___awmod@dividend+1,c
  2404  00185C  BE14               	btfsc	___awmod@dividend,7,c
  2405  00185E  0615               	decf	___awmod@dividend+1,f,c
  2406  001860  EC71  F016         	call	___awmod	;wreg free
  2407  001864  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2408  001868  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2409  00186C  ECEE  F015         	call	___awdiv	;wreg free
  2410  001870  0E09               	movlw	9
  2411  001872  241A               	addwf	?___awdiv,w,c
  2412  001874  6E22               	movwf	___wmul@multiplier,c
  2413  001876  0E00               	movlw	0
  2414  001878  201B               	addwfc	?___awdiv+1,w,c
  2415  00187A  6E23               	movwf	___wmul@multiplier+1,c
  2416  00187C  ECE2  F018         	call	___wmul	;wreg free
  2417  001880  0E50               	movlw	low __npowers_
  2418  001882  2422               	addwf	?___wmul,w,c
  2419  001884  6EF6               	movwf	tblptrl,c
  2420  001886  0E10               	movlw	high __npowers_
  2421  001888  2023               	addwfc	?___wmul+1,w,c
  2422  00188A  6EF7               	movwf	tblptrh,c
  2423  00188C                     	if	0	;There are less than 3 active tblptr bytes
  2424  00188C                     	endif
  2425  00188C  0009               	tblrd		*+
  2426  00188E  CFF5 F031          	movff	tablat,___ftmul@f2
  2427  001892  0009               	tblrd		*+
  2428  001894  CFF5 F032          	movff	tablat,___ftmul@f2+1
  2429  001898  000A               	tblrd		*-
  2430  00189A  CFF5 F033          	movff	tablat,___ftmul@f2+2
  2431  00189E  0E00               	movlw	0
  2432  0018A0  6E1D               	movwf	___awdiv@divisor+1,c
  2433  0018A2  0E64               	movlw	100
  2434  0018A4  6E1C               	movwf	___awdiv@divisor,c
  2435  0018A6  0100               	movlb	0	; () banked
  2436  0018A8  516C               	movf	scale@scl& (0+255),w,b
  2437  0018AA  6E1A               	movwf	___awdiv@dividend,c
  2438  0018AC  6A1B               	clrf	___awdiv@dividend+1,c
  2439  0018AE  BE1A               	btfsc	___awdiv@dividend,7,c
  2440  0018B0  061B               	decf	___awdiv@dividend+1,f,c
  2441  0018B2  ECEE  F015         	call	___awdiv	;wreg free
  2442  0018B6  0E12               	movlw	18
  2443  0018B8  241A               	addwf	?___awdiv,w,c
  2444  0018BA  6E22               	movwf	___wmul@multiplier,c
  2445  0018BC  0E00               	movlw	0
  2446  0018BE  201B               	addwfc	?___awdiv+1,w,c
  2447  0018C0  6E23               	movwf	___wmul@multiplier+1,c
  2448  0018C2  0E00               	movlw	0
  2449  0018C4  6E25               	movwf	___wmul@multiplicand+1,c
  2450  0018C6  0E03               	movlw	3
  2451  0018C8  6E24               	movwf	___wmul@multiplicand,c
  2452  0018CA  ECE2  F018         	call	___wmul	;wreg free
  2453  0018CE  0E50               	movlw	low __npowers_
  2454  0018D0  2422               	addwf	?___wmul,w,c
  2455  0018D2  6EF6               	movwf	tblptrl,c
  2456  0018D4  0E10               	movlw	high __npowers_
  2457  0018D6  2023               	addwfc	?___wmul+1,w,c
  2458  0018D8  6EF7               	movwf	tblptrh,c
  2459  0018DA                     	if	0	;There are less than 3 active tblptr bytes
  2460  0018DA                     	endif
  2461  0018DA  0009               	tblrd		*+
  2462  0018DC  CFF5 F02E          	movff	tablat,___ftmul@f1
  2463  0018E0  0009               	tblrd		*+
  2464  0018E2  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  2465  0018E6  000A               	tblrd		*-
  2466  0018E8  CFF5 F030          	movff	tablat,___ftmul@f1+2
  2467  0018EC  ECFD  F013         	call	___ftmul	;wreg free
  2468  0018F0  C02E  F069         	movff	?___ftmul,_scale$1618
  2469  0018F4  C02F  F06A         	movff	?___ftmul+1,_scale$1618+1
  2470  0018F8  C030  F06B         	movff	?___ftmul+2,_scale$1618+2
  2471                           
  2472                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2473  0018FC  C069  F02E         	movff	_scale$1618,___ftmul@f1
  2474  001900  C06A  F02F         	movff	_scale$1618+1,___ftmul@f1+1
  2475  001904  C06B  F030         	movff	_scale$1618+2,___ftmul@f1+2
  2476  001908  0E00               	movlw	0
  2477  00190A  6E25               	movwf	___wmul@multiplicand+1,c
  2478  00190C  0E03               	movlw	3
  2479  00190E  6E24               	movwf	___wmul@multiplicand,c
  2480  001910  0E00               	movlw	0
  2481  001912  6E17               	movwf	___awmod@divisor+1,c
  2482  001914  0E0A               	movlw	10
  2483  001916  6E16               	movwf	___awmod@divisor,c
  2484  001918  0100               	movlb	0	; () banked
  2485  00191A  516C               	movf	scale@scl& (0+255),w,b
  2486  00191C  6E14               	movwf	___awmod@dividend,c
  2487  00191E  6A15               	clrf	___awmod@dividend+1,c
  2488  001920  BE14               	btfsc	___awmod@dividend,7,c
  2489  001922  0615               	decf	___awmod@dividend+1,f,c
  2490  001924  EC71  F016         	call	___awmod	;wreg free
  2491  001928  C014  F022         	movff	?___awmod,___wmul@multiplier
  2492  00192C  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2493  001930  ECE2  F018         	call	___wmul	;wreg free
  2494  001934  0E50               	movlw	low __npowers_
  2495  001936  2422               	addwf	?___wmul,w,c
  2496  001938  6EF6               	movwf	tblptrl,c
  2497  00193A  0E10               	movlw	high __npowers_
  2498  00193C  2023               	addwfc	?___wmul+1,w,c
  2499  00193E  6EF7               	movwf	tblptrh,c
  2500  001940                     	if	0	;There are less than 3 active tblptr bytes
  2501  001940                     	endif
  2502  001940  0009               	tblrd		*+
  2503  001942  CFF5 F031          	movff	tablat,___ftmul@f2
  2504  001946  0009               	tblrd		*+
  2505  001948  CFF5 F032          	movff	tablat,___ftmul@f2+1
  2506  00194C  000A               	tblrd		*-
  2507  00194E  CFF5 F033          	movff	tablat,___ftmul@f2+2
  2508  001952  ECFD  F013         	call	___ftmul	;wreg free
  2509  001956  C02E  F066         	movff	?___ftmul,?_scale
  2510  00195A  C02F  F067         	movff	?___ftmul+1,?_scale+1
  2511  00195E  C030  F068         	movff	?___ftmul+2,?_scale+2
  2512  001962  0012               	return	
  2513  001964                     l3760:
  2514                           
  2515                           ;doprnt.c: 432: else if(scl > 10)
  2516  001964  0100               	movlb	0	; () banked
  2517  001966  516C               	movf	scale@scl& (0+255),w,b
  2518  001968  0A80               	xorlw	128
  2519  00196A  0F75               	addlw	-139
  2520  00196C  A0D8               	btfss	status,0,c
  2521  00196E  D04F               	goto	l3766
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2525  001970  0E00               	movlw	0
  2526  001972  6E1D               	movwf	___awdiv@divisor+1,c
  2527  001974  0E0A               	movlw	10
  2528  001976  6E1C               	movwf	___awdiv@divisor,c
  2529  001978  0100               	movlb	0	; () banked
  2530  00197A  516C               	movf	scale@scl& (0+255),w,b
  2531  00197C  6E1A               	movwf	___awdiv@dividend,c
  2532  00197E  6A1B               	clrf	___awdiv@dividend+1,c
  2533  001980  BE1A               	btfsc	___awdiv@dividend,7,c
  2534  001982  061B               	decf	___awdiv@dividend+1,f,c
  2535  001984  ECEE  F015         	call	___awdiv	;wreg free
  2536  001988  0E09               	movlw	9
  2537  00198A  241A               	addwf	?___awdiv,w,c
  2538  00198C  6E22               	movwf	___wmul@multiplier,c
  2539  00198E  0E00               	movlw	0
  2540  001990  201B               	addwfc	?___awdiv+1,w,c
  2541  001992  6E23               	movwf	___wmul@multiplier+1,c
  2542  001994  0E00               	movlw	0
  2543  001996  6E25               	movwf	___wmul@multiplicand+1,c
  2544  001998  0E03               	movlw	3
  2545  00199A  6E24               	movwf	___wmul@multiplicand,c
  2546  00199C  ECE2  F018         	call	___wmul	;wreg free
  2547  0019A0  0E50               	movlw	low __npowers_
  2548  0019A2  2422               	addwf	?___wmul,w,c
  2549  0019A4  6EF6               	movwf	tblptrl,c
  2550  0019A6  0E10               	movlw	high __npowers_
  2551  0019A8  2023               	addwfc	?___wmul+1,w,c
  2552  0019AA  6EF7               	movwf	tblptrh,c
  2553  0019AC                     	if	0	;There are less than 3 active tblptr bytes
  2554  0019AC                     	endif
  2555  0019AC  0009               	tblrd		*+
  2556  0019AE  CFF5 F02E          	movff	tablat,___ftmul@f1
  2557  0019B2  0009               	tblrd		*+
  2558  0019B4  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  2559  0019B8  000A               	tblrd		*-
  2560  0019BA  CFF5 F030          	movff	tablat,___ftmul@f1+2
  2561  0019BE  0E00               	movlw	0
  2562  0019C0  6E25               	movwf	___wmul@multiplicand+1,c
  2563  0019C2  0E03               	movlw	3
  2564  0019C4  6E24               	movwf	___wmul@multiplicand,c
  2565  0019C6  0E00               	movlw	0
  2566  0019C8  6E17               	movwf	___awmod@divisor+1,c
  2567  0019CA  0E0A               	movlw	10
  2568  0019CC  6E16               	movwf	___awmod@divisor,c
  2569  0019CE  0100               	movlb	0	; () banked
  2570  0019D0  516C               	movf	scale@scl& (0+255),w,b
  2571  0019D2  6E14               	movwf	___awmod@dividend,c
  2572  0019D4  6A15               	clrf	___awmod@dividend+1,c
  2573  0019D6  BE14               	btfsc	___awmod@dividend,7,c
  2574  0019D8  0615               	decf	___awmod@dividend+1,f,c
  2575  0019DA  EC71  F016         	call	___awmod	;wreg free
  2576  0019DE  C014  F022         	movff	?___awmod,___wmul@multiplier
  2577  0019E2  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2578  0019E6  ECE2  F018         	call	___wmul	;wreg free
  2579  0019EA  0E50               	movlw	low __npowers_
  2580  0019EC  2422               	addwf	?___wmul,w,c
  2581  0019EE  6EF6               	movwf	tblptrl,c
  2582  0019F0  0E10               	movlw	high __npowers_
  2583  0019F2  2023               	addwfc	?___wmul+1,w,c
  2584  0019F4  6EF7               	movwf	tblptrh,c
  2585  0019F6                     	if	0	;There are less than 3 active tblptr bytes
  2586  0019F6                     	endif
  2587  0019F6  0009               	tblrd		*+
  2588  0019F8  CFF5 F031          	movff	tablat,___ftmul@f2
  2589  0019FC  0009               	tblrd		*+
  2590  0019FE  CFF5 F032          	movff	tablat,___ftmul@f2+1
  2591  001A02  000A               	tblrd		*-
  2592  001A04  CFF5 F033          	movff	tablat,___ftmul@f2+2
  2593  001A08  ECFD  F013         	call	___ftmul	;wreg free
  2594  001A0C  D7A4               	goto	L2
  2595  001A0E                     l3766:
  2596                           
  2597                           ;doprnt.c: 434: return _npowers_[scl];
  2598  001A0E  0100               	movlb	0	; () banked
  2599  001A10  516C               	movf	scale@scl& (0+255),w,b
  2600  001A12  0D03               	mullw	3
  2601  001A14  0E50               	movlw	low __npowers_
  2602  001A16  24F3               	addwf	prodl,w,c
  2603  001A18  6EF6               	movwf	tblptrl,c
  2604  001A1A  0E10               	movlw	high __npowers_
  2605  001A1C  20F4               	addwfc	prodh,w,c
  2606  001A1E  6EF7               	movwf	tblptrh,c
  2607  001A20                     	if	0	;There are less than 3 active tblptr bytes
  2608  001A20                     	endif
  2609  001A20  0009               	tblrd		*+
  2610  001A22  CFF5 F066          	movff	tablat,?_scale
  2611  001A26  0009               	tblrd		*+
  2612  001A28  CFF5 F067          	movff	tablat,?_scale+1
  2613  001A2C  000A               	tblrd		*-
  2614  001A2E  CFF5 F068          	movff	tablat,?_scale+2
  2615                           
  2616                           ; BSR set to: 0
  2617  001A32  0012               	return	
  2618  001A34                     l3770:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;doprnt.c: 435: }
  2622                           ;doprnt.c: 436: if(scl>=110)
  2623  001A34  0100               	movlb	0	; () banked
  2624  001A36  516C               	movf	scale@scl& (0+255),w,b
  2625  001A38  0A80               	xorlw	128
  2626  001A3A  0F12               	addlw	-238
  2627  001A3C  A0D8               	btfss	status,0,c
  2628  001A3E  D094               	goto	l3778
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2632  001A40  0E00               	movlw	0
  2633  001A42  6E25               	movwf	___wmul@multiplicand+1,c
  2634  001A44  0E03               	movlw	3
  2635  001A46  6E24               	movwf	___wmul@multiplicand,c
  2636  001A48  0E00               	movlw	0
  2637  001A4A  6E1D               	movwf	___awdiv@divisor+1,c
  2638  001A4C  0E0A               	movlw	10
  2639  001A4E  6E1C               	movwf	___awdiv@divisor,c
  2640  001A50  0E00               	movlw	0
  2641  001A52  6E17               	movwf	___awmod@divisor+1,c
  2642  001A54  0E64               	movlw	100
  2643  001A56  6E16               	movwf	___awmod@divisor,c
  2644  001A58  0100               	movlb	0	; () banked
  2645  001A5A  516C               	movf	scale@scl& (0+255),w,b
  2646  001A5C  6E14               	movwf	___awmod@dividend,c
  2647  001A5E  6A15               	clrf	___awmod@dividend+1,c
  2648  001A60  BE14               	btfsc	___awmod@dividend,7,c
  2649  001A62  0615               	decf	___awmod@dividend+1,f,c
  2650  001A64  EC71  F016         	call	___awmod	;wreg free
  2651  001A68  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2652  001A6C  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2653  001A70  ECEE  F015         	call	___awdiv	;wreg free
  2654  001A74  0E09               	movlw	9
  2655  001A76  241A               	addwf	?___awdiv,w,c
  2656  001A78  6E22               	movwf	___wmul@multiplier,c
  2657  001A7A  0E00               	movlw	0
  2658  001A7C  201B               	addwfc	?___awdiv+1,w,c
  2659  001A7E  6E23               	movwf	___wmul@multiplier+1,c
  2660  001A80  ECE2  F018         	call	___wmul	;wreg free
  2661  001A84  0E29               	movlw	low __powers_
  2662  001A86  2422               	addwf	?___wmul,w,c
  2663  001A88  6EF6               	movwf	tblptrl,c
  2664  001A8A  0E10               	movlw	high __powers_
  2665  001A8C  2023               	addwfc	?___wmul+1,w,c
  2666  001A8E  6EF7               	movwf	tblptrh,c
  2667  001A90                     	if	0	;There are less than 3 active tblptr bytes
  2668  001A90                     	endif
  2669  001A90  0009               	tblrd		*+
  2670  001A92  CFF5 F031          	movff	tablat,___ftmul@f2
  2671  001A96  0009               	tblrd		*+
  2672  001A98  CFF5 F032          	movff	tablat,___ftmul@f2+1
  2673  001A9C  000A               	tblrd		*-
  2674  001A9E  CFF5 F033          	movff	tablat,___ftmul@f2+2
  2675  001AA2  0E00               	movlw	0
  2676  001AA4  6E1D               	movwf	___awdiv@divisor+1,c
  2677  001AA6  0E64               	movlw	100
  2678  001AA8  6E1C               	movwf	___awdiv@divisor,c
  2679  001AAA  0100               	movlb	0	; () banked
  2680  001AAC  516C               	movf	scale@scl& (0+255),w,b
  2681  001AAE  6E1A               	movwf	___awdiv@dividend,c
  2682  001AB0  6A1B               	clrf	___awdiv@dividend+1,c
  2683  001AB2  BE1A               	btfsc	___awdiv@dividend,7,c
  2684  001AB4  061B               	decf	___awdiv@dividend+1,f,c
  2685  001AB6  ECEE  F015         	call	___awdiv	;wreg free
  2686  001ABA  0E12               	movlw	18
  2687  001ABC  241A               	addwf	?___awdiv,w,c
  2688  001ABE  6E22               	movwf	___wmul@multiplier,c
  2689  001AC0  0E00               	movlw	0
  2690  001AC2  201B               	addwfc	?___awdiv+1,w,c
  2691  001AC4  6E23               	movwf	___wmul@multiplier+1,c
  2692  001AC6  0E00               	movlw	0
  2693  001AC8  6E25               	movwf	___wmul@multiplicand+1,c
  2694  001ACA  0E03               	movlw	3
  2695  001ACC  6E24               	movwf	___wmul@multiplicand,c
  2696  001ACE  ECE2  F018         	call	___wmul	;wreg free
  2697  001AD2  0E29               	movlw	low __powers_
  2698  001AD4  2422               	addwf	?___wmul,w,c
  2699  001AD6  6EF6               	movwf	tblptrl,c
  2700  001AD8  0E10               	movlw	high __powers_
  2701  001ADA  2023               	addwfc	?___wmul+1,w,c
  2702  001ADC  6EF7               	movwf	tblptrh,c
  2703  001ADE                     	if	0	;There are less than 3 active tblptr bytes
  2704  001ADE                     	endif
  2705  001ADE  0009               	tblrd		*+
  2706  001AE0  CFF5 F02E          	movff	tablat,___ftmul@f1
  2707  001AE4  0009               	tblrd		*+
  2708  001AE6  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  2709  001AEA  000A               	tblrd		*-
  2710  001AEC  CFF5 F030          	movff	tablat,___ftmul@f1+2
  2711  001AF0  ECFD  F013         	call	___ftmul	;wreg free
  2712  001AF4  C02E  F069         	movff	?___ftmul,_scale$1618
  2713  001AF8  C02F  F06A         	movff	?___ftmul+1,_scale$1618+1
  2714  001AFC  C030  F06B         	movff	?___ftmul+2,_scale$1618+2
  2715                           
  2716                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2717  001B00  C069  F02E         	movff	_scale$1618,___ftmul@f1
  2718  001B04  C06A  F02F         	movff	_scale$1618+1,___ftmul@f1+1
  2719  001B08  C06B  F030         	movff	_scale$1618+2,___ftmul@f1+2
  2720  001B0C  0E00               	movlw	0
  2721  001B0E  6E25               	movwf	___wmul@multiplicand+1,c
  2722  001B10  0E03               	movlw	3
  2723  001B12  6E24               	movwf	___wmul@multiplicand,c
  2724  001B14  0E00               	movlw	0
  2725  001B16  6E17               	movwf	___awmod@divisor+1,c
  2726  001B18  0E0A               	movlw	10
  2727  001B1A  6E16               	movwf	___awmod@divisor,c
  2728  001B1C  0100               	movlb	0	; () banked
  2729  001B1E  516C               	movf	scale@scl& (0+255),w,b
  2730  001B20  6E14               	movwf	___awmod@dividend,c
  2731  001B22  6A15               	clrf	___awmod@dividend+1,c
  2732  001B24  BE14               	btfsc	___awmod@dividend,7,c
  2733  001B26  0615               	decf	___awmod@dividend+1,f,c
  2734  001B28  EC71  F016         	call	___awmod	;wreg free
  2735  001B2C  C014  F022         	movff	?___awmod,___wmul@multiplier
  2736  001B30  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2737  001B34  ECE2  F018         	call	___wmul	;wreg free
  2738  001B38  0E29               	movlw	low __powers_
  2739  001B3A  2422               	addwf	?___wmul,w,c
  2740  001B3C  6EF6               	movwf	tblptrl,c
  2741  001B3E  0E10               	movlw	high __powers_
  2742  001B40  2023               	addwfc	?___wmul+1,w,c
  2743  001B42  6EF7               	movwf	tblptrh,c
  2744  001B44                     	if	0	;There are less than 3 active tblptr bytes
  2745  001B44                     	endif
  2746  001B44  0009               	tblrd		*+
  2747  001B46  CFF5 F031          	movff	tablat,___ftmul@f2
  2748  001B4A  0009               	tblrd		*+
  2749  001B4C  CFF5 F032          	movff	tablat,___ftmul@f2+1
  2750  001B50  000A               	tblrd		*-
  2751  001B52  CFF5 F033          	movff	tablat,___ftmul@f2+2
  2752  001B56  ECFD  F013         	call	___ftmul	;wreg free
  2753  001B5A  C02E  F066         	movff	?___ftmul,?_scale
  2754  001B5E  C02F  F067         	movff	?___ftmul+1,?_scale+1
  2755  001B62  C030  F068         	movff	?___ftmul+2,?_scale+2
  2756  001B66  0012               	return	
  2757  001B68                     l3778:
  2758                           
  2759                           ;doprnt.c: 438: else if(scl > 10)
  2760  001B68  0100               	movlb	0	; () banked
  2761  001B6A  516C               	movf	scale@scl& (0+255),w,b
  2762  001B6C  0A80               	xorlw	128
  2763  001B6E  0F75               	addlw	-139
  2764  001B70  A0D8               	btfss	status,0,c
  2765  001B72  D04F               	goto	l3784
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2769  001B74  0E00               	movlw	0
  2770  001B76  6E1D               	movwf	___awdiv@divisor+1,c
  2771  001B78  0E0A               	movlw	10
  2772  001B7A  6E1C               	movwf	___awdiv@divisor,c
  2773  001B7C  0100               	movlb	0	; () banked
  2774  001B7E  516C               	movf	scale@scl& (0+255),w,b
  2775  001B80  6E1A               	movwf	___awdiv@dividend,c
  2776  001B82  6A1B               	clrf	___awdiv@dividend+1,c
  2777  001B84  BE1A               	btfsc	___awdiv@dividend,7,c
  2778  001B86  061B               	decf	___awdiv@dividend+1,f,c
  2779  001B88  ECEE  F015         	call	___awdiv	;wreg free
  2780  001B8C  0E09               	movlw	9
  2781  001B8E  241A               	addwf	?___awdiv,w,c
  2782  001B90  6E22               	movwf	___wmul@multiplier,c
  2783  001B92  0E00               	movlw	0
  2784  001B94  201B               	addwfc	?___awdiv+1,w,c
  2785  001B96  6E23               	movwf	___wmul@multiplier+1,c
  2786  001B98  0E00               	movlw	0
  2787  001B9A  6E25               	movwf	___wmul@multiplicand+1,c
  2788  001B9C  0E03               	movlw	3
  2789  001B9E  6E24               	movwf	___wmul@multiplicand,c
  2790  001BA0  ECE2  F018         	call	___wmul	;wreg free
  2791  001BA4  0E29               	movlw	low __powers_
  2792  001BA6  2422               	addwf	?___wmul,w,c
  2793  001BA8  6EF6               	movwf	tblptrl,c
  2794  001BAA  0E10               	movlw	high __powers_
  2795  001BAC  2023               	addwfc	?___wmul+1,w,c
  2796  001BAE  6EF7               	movwf	tblptrh,c
  2797  001BB0                     	if	0	;There are less than 3 active tblptr bytes
  2798  001BB0                     	endif
  2799  001BB0  0009               	tblrd		*+
  2800  001BB2  CFF5 F02E          	movff	tablat,___ftmul@f1
  2801  001BB6  0009               	tblrd		*+
  2802  001BB8  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  2803  001BBC  000A               	tblrd		*-
  2804  001BBE  CFF5 F030          	movff	tablat,___ftmul@f1+2
  2805  001BC2  0E00               	movlw	0
  2806  001BC4  6E25               	movwf	___wmul@multiplicand+1,c
  2807  001BC6  0E03               	movlw	3
  2808  001BC8  6E24               	movwf	___wmul@multiplicand,c
  2809  001BCA  0E00               	movlw	0
  2810  001BCC  6E17               	movwf	___awmod@divisor+1,c
  2811  001BCE  0E0A               	movlw	10
  2812  001BD0  6E16               	movwf	___awmod@divisor,c
  2813  001BD2  0100               	movlb	0	; () banked
  2814  001BD4  516C               	movf	scale@scl& (0+255),w,b
  2815  001BD6  6E14               	movwf	___awmod@dividend,c
  2816  001BD8  6A15               	clrf	___awmod@dividend+1,c
  2817  001BDA  BE14               	btfsc	___awmod@dividend,7,c
  2818  001BDC  0615               	decf	___awmod@dividend+1,f,c
  2819  001BDE  EC71  F016         	call	___awmod	;wreg free
  2820  001BE2  C014  F022         	movff	?___awmod,___wmul@multiplier
  2821  001BE6  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2822  001BEA  ECE2  F018         	call	___wmul	;wreg free
  2823  001BEE  0E29               	movlw	low __powers_
  2824  001BF0  2422               	addwf	?___wmul,w,c
  2825  001BF2  6EF6               	movwf	tblptrl,c
  2826  001BF4  0E10               	movlw	high __powers_
  2827  001BF6  2023               	addwfc	?___wmul+1,w,c
  2828  001BF8  6EF7               	movwf	tblptrh,c
  2829  001BFA                     	if	0	;There are less than 3 active tblptr bytes
  2830  001BFA                     	endif
  2831  001BFA  0009               	tblrd		*+
  2832  001BFC  CFF5 F031          	movff	tablat,___ftmul@f2
  2833  001C00  0009               	tblrd		*+
  2834  001C02  CFF5 F032          	movff	tablat,___ftmul@f2+1
  2835  001C06  000A               	tblrd		*-
  2836  001C08  CFF5 F033          	movff	tablat,___ftmul@f2+2
  2837  001C0C  ECFD  F013         	call	___ftmul	;wreg free
  2838  001C10  D7A4               	goto	L3
  2839  001C12                     l3784:
  2840                           
  2841                           ;doprnt.c: 440: return _powers_[scl];
  2842  001C12  0100               	movlb	0	; () banked
  2843  001C14  516C               	movf	scale@scl& (0+255),w,b
  2844  001C16  0D03               	mullw	3
  2845  001C18  0E29               	movlw	low __powers_
  2846  001C1A  24F3               	addwf	prodl,w,c
  2847  001C1C  6EF6               	movwf	tblptrl,c
  2848  001C1E  0E10               	movlw	high __powers_
  2849  001C20  20F4               	addwfc	prodh,w,c
  2850  001C22  6EF7               	movwf	tblptrh,c
  2851  001C24                     	if	0	;There are less than 3 active tblptr bytes
  2852  001C24                     	endif
  2853  001C24  0009               	tblrd		*+
  2854  001C26  CFF5 F066          	movff	tablat,?_scale
  2855  001C2A  0009               	tblrd		*+
  2856  001C2C  CFF5 F067          	movff	tablat,?_scale+1
  2857  001C30  000A               	tblrd		*-
  2858  001C32  CFF5 F068          	movff	tablat,?_scale+2
  2859  001C36  0012               	return	
  2860  001C38                     __end_of_scale:
  2861                           	opt stack 0
  2862                           tblptru	equ	0xFF8
  2863                           tblptrh	equ	0xFF7
  2864                           tblptrl	equ	0xFF6
  2865                           tablat	equ	0xFF5
  2866                           prodh	equ	0xFF4
  2867                           prodl	equ	0xFF3
  2868                           intcon	equ	0xFF2
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _putch *****************
  2878 ;; Defined at:
  2879 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  txData          1    wreg     unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  txData          1   20[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;Total ram usage:        1 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    4
  2900 ;; This function calls:
  2901 ;;		_EUSART1_Write
  2902 ;; This function is called by:
  2903 ;;		_printf
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text3
  2908  0032AE                     __ptext3:
  2909                           	opt stack 0
  2910  0032AE                     _putch:
  2911                           	opt stack 25
  2912                           
  2913                           ;incstack = 0
  2914                           ;putch@txData stored from wreg
  2915  0032AE  6E15               	movwf	putch@txData,c
  2916                           
  2917                           ;eusart1.c: 113: EUSART1_Write(txData);
  2918  0032B0  5015               	movf	putch@txData,w,c
  2919  0032B2  EC51  F019         	call	_EUSART1_Write
  2920  0032B6  0012               	return		;funcret
  2921  0032B8                     __end_of_putch:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _EUSART1_Write *****************
  2939 ;; Defined at:
  2940 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  txData          1    wreg     unsigned char 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  txData          1   19[COMRAM] unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;Total ram usage:        1 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    3
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_putch
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text4
  2969  0032A2                     __ptext4:
  2970                           	opt stack 0
  2971  0032A2                     _EUSART1_Write:
  2972                           	opt stack 25
  2973                           
  2974                           ;incstack = 0
  2975                           ;EUSART1_Write@txData stored from wreg
  2976  0032A2  6E14               	movwf	EUSART1_Write@txData,c
  2977  0032A4                     l218:
  2978  0032A4  A89E               	btfss	3998,4,c	;volatile
  2979  0032A6  D7FE               	goto	l218
  2980                           
  2981                           ;eusart1.c: 101: }
  2982                           ;eusart1.c: 103: TXREG1 = txData;
  2983  0032A8  C014  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2984  0032AC  0012               	return		;funcret
  2985  0032AE                     __end_of_EUSART1_Write:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           postinc2	equ	0xFDE
  2997                           postdec2	equ	0xFDD
  2998                           fsr2h	equ	0xFDA
  2999                           fsr2l	equ	0xFD9
  3000                           status	equ	0xFD8
  3001                           
  3002 ;; *************** function _isdigit *****************
  3003 ;; Defined at:
  3004 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  c               1    wreg     unsigned char 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  c               1   21[COMRAM] unsigned char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;		None               void
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;Total ram usage:        3 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    3
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_printf
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	text5
  3033  003232                     __ptext5:
  3034                           	opt stack 0
  3035  003232                     _isdigit:
  3036                           	opt stack 26
  3037                           
  3038                           ;incstack = 0
  3039                           ;isdigit@c stored from wreg
  3040  003232  6E16               	movwf	isdigit@c,c
  3041  003234  0E00               	movlw	0
  3042  003236  6E15               	movwf	_isdigit$1234,c
  3043  003238  0E3A               	movlw	58
  3044  00323A  6016               	cpfslt	isdigit@c,c
  3045  00323C  D005               	goto	l2774
  3046  00323E  0E2F               	movlw	47
  3047  003240  6416               	cpfsgt	isdigit@c,c
  3048  003242  D002               	goto	l2774
  3049  003244  0E01               	movlw	1
  3050  003246  6E15               	movwf	_isdigit$1234,c
  3051  003248                     l2774:
  3052  003248  C015  F014         	movff	_isdigit$1234,??_isdigit
  3053  00324C  3014               	rrcf	??_isdigit,w,c
  3054  00324E  0012               	return	
  3055  003250                     __end_of_isdigit:
  3056                           	opt stack 0
  3057                           tblptru	equ	0xFF8
  3058                           tblptrh	equ	0xFF7
  3059                           tblptrl	equ	0xFF6
  3060                           tablat	equ	0xFF5
  3061                           prodh	equ	0xFF4
  3062                           prodl	equ	0xFF3
  3063                           intcon	equ	0xFF2
  3064                           postinc0	equ	0xFEE
  3065                           wreg	equ	0xFE8
  3066                           postinc2	equ	0xFDE
  3067                           postdec2	equ	0xFDD
  3068                           fsr2h	equ	0xFDA
  3069                           fsr2l	equ	0xFD9
  3070                           status	equ	0xFD8
  3071                           
  3072 ;; *************** function _fround *****************
  3073 ;; Defined at:
  3074 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  prec            1    wreg     unsigned char 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  prec            1   15[BANK0 ] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  3    6[BANK0 ] unsigned char 
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3088 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;Total ram usage:       10 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    5
  3095 ;; This function calls:
  3096 ;;		___awdiv
  3097 ;;		___awmod
  3098 ;;		___ftmul
  3099 ;;		___wmul
  3100 ;; This function is called by:
  3101 ;;		_printf
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text6
  3106  001EA0                     __ptext6:
  3107                           	opt stack 0
  3108  001EA0                     _fround:
  3109                           	opt stack 24
  3110                           
  3111                           ;incstack = 0
  3112                           ;fround@prec stored from wreg
  3113  001EA0  0100               	movlb	0	; () banked
  3114  001EA2  6F6F               	movwf	fround@prec& (0+255),b
  3115                           
  3116                           ;doprnt.c: 413: if(prec>=110)
  3117  001EA4  0E6D               	movlw	109
  3118  001EA6  0100               	movlb	0	; () banked
  3119  001EA8  656F               	cpfsgt	fround@prec& (0+255),b
  3120  001EAA  D09F               	goto	l3738
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3124  001EAC  0E00               	movlw	0
  3125  001EAE  6E25               	movwf	___wmul@multiplicand+1,c
  3126  001EB0  0E03               	movlw	3
  3127  001EB2  6E24               	movwf	___wmul@multiplicand,c
  3128  001EB4  0E00               	movlw	0
  3129  001EB6  6E1D               	movwf	___awdiv@divisor+1,c
  3130  001EB8  0E0A               	movlw	10
  3131  001EBA  6E1C               	movwf	___awdiv@divisor,c
  3132  001EBC  0E00               	movlw	0
  3133  001EBE  6E17               	movwf	___awmod@divisor+1,c
  3134  001EC0  0E64               	movlw	100
  3135  001EC2  6E16               	movwf	___awmod@divisor,c
  3136  001EC4  C06F  F014         	movff	fround@prec,___awmod@dividend
  3137  001EC8  6A15               	clrf	___awmod@dividend+1,c
  3138  001ECA  EC71  F016         	call	___awmod	;wreg free
  3139  001ECE  C014  F01A         	movff	?___awmod,___awdiv@dividend
  3140  001ED2  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  3141  001ED6  ECEE  F015         	call	___awdiv	;wreg free
  3142  001EDA  0E09               	movlw	9
  3143  001EDC  241A               	addwf	?___awdiv,w,c
  3144  001EDE  6E22               	movwf	___wmul@multiplier,c
  3145  001EE0  0E00               	movlw	0
  3146  001EE2  201B               	addwfc	?___awdiv+1,w,c
  3147  001EE4  6E23               	movwf	___wmul@multiplier+1,c
  3148  001EE6  ECE2  F018         	call	___wmul	;wreg free
  3149  001EEA  0E50               	movlw	low __npowers_
  3150  001EEC  2422               	addwf	?___wmul,w,c
  3151  001EEE  6EF6               	movwf	tblptrl,c
  3152  001EF0  0E10               	movlw	high __npowers_
  3153  001EF2  2023               	addwfc	?___wmul+1,w,c
  3154  001EF4  6EF7               	movwf	tblptrh,c
  3155  001EF6                     	if	0	;There are less than 3 active tblptr bytes
  3156  001EF6                     	endif
  3157  001EF6  0009               	tblrd		*+
  3158  001EF8  CFF5 F031          	movff	tablat,___ftmul@f2
  3159  001EFC  0009               	tblrd		*+
  3160  001EFE  CFF5 F032          	movff	tablat,___ftmul@f2+1
  3161  001F02  000A               	tblrd		*-
  3162  001F04  CFF5 F033          	movff	tablat,___ftmul@f2+2
  3163  001F08  0E00               	movlw	0
  3164  001F0A  6E1D               	movwf	___awdiv@divisor+1,c
  3165  001F0C  0E64               	movlw	100
  3166  001F0E  6E1C               	movwf	___awdiv@divisor,c
  3167  001F10  C06F  F01A         	movff	fround@prec,___awdiv@dividend
  3168  001F14  6A1B               	clrf	___awdiv@dividend+1,c
  3169  001F16  ECEE  F015         	call	___awdiv	;wreg free
  3170  001F1A  0E12               	movlw	18
  3171  001F1C  241A               	addwf	?___awdiv,w,c
  3172  001F1E  6E22               	movwf	___wmul@multiplier,c
  3173  001F20  0E00               	movlw	0
  3174  001F22  201B               	addwfc	?___awdiv+1,w,c
  3175  001F24  6E23               	movwf	___wmul@multiplier+1,c
  3176  001F26  0E00               	movlw	0
  3177  001F28  6E25               	movwf	___wmul@multiplicand+1,c
  3178  001F2A  0E03               	movlw	3
  3179  001F2C  6E24               	movwf	___wmul@multiplicand,c
  3180  001F2E  ECE2  F018         	call	___wmul	;wreg free
  3181  001F32  0E50               	movlw	low __npowers_
  3182  001F34  2422               	addwf	?___wmul,w,c
  3183  001F36  6EF6               	movwf	tblptrl,c
  3184  001F38  0E10               	movlw	high __npowers_
  3185  001F3A  2023               	addwfc	?___wmul+1,w,c
  3186  001F3C  6EF7               	movwf	tblptrh,c
  3187  001F3E                     	if	0	;There are less than 3 active tblptr bytes
  3188  001F3E                     	endif
  3189  001F3E  0009               	tblrd		*+
  3190  001F40  CFF5 F02E          	movff	tablat,___ftmul@f1
  3191  001F44  0009               	tblrd		*+
  3192  001F46  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  3193  001F4A  000A               	tblrd		*-
  3194  001F4C  CFF5 F030          	movff	tablat,___ftmul@f1+2
  3195  001F50  ECFD  F013         	call	___ftmul	;wreg free
  3196  001F54  C02E  F06C         	movff	?___ftmul,_fround$1616
  3197  001F58  C02F  F06D         	movff	?___ftmul+1,_fround$1616+1
  3198  001F5C  C030  F06E         	movff	?___ftmul+2,_fround$1616+2
  3199                           
  3200                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3201  001F60  0E00               	movlw	0
  3202  001F62  6E25               	movwf	___wmul@multiplicand+1,c
  3203  001F64  0E03               	movlw	3
  3204  001F66  6E24               	movwf	___wmul@multiplicand,c
  3205  001F68  0E00               	movlw	0
  3206  001F6A  6E17               	movwf	___awmod@divisor+1,c
  3207  001F6C  0E0A               	movlw	10
  3208  001F6E  6E16               	movwf	___awmod@divisor,c
  3209  001F70  C06F  F014         	movff	fround@prec,___awmod@dividend
  3210  001F74  6A15               	clrf	___awmod@dividend+1,c
  3211  001F76  EC71  F016         	call	___awmod	;wreg free
  3212  001F7A  C014  F022         	movff	?___awmod,___wmul@multiplier
  3213  001F7E  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  3214  001F82  ECE2  F018         	call	___wmul	;wreg free
  3215  001F86  0E50               	movlw	low __npowers_
  3216  001F88  2422               	addwf	?___wmul,w,c
  3217  001F8A  6EF6               	movwf	tblptrl,c
  3218  001F8C  0E10               	movlw	high __npowers_
  3219  001F8E  2023               	addwfc	?___wmul+1,w,c
  3220  001F90  6EF7               	movwf	tblptrh,c
  3221  001F92                     	if	0	;There are less than 3 active tblptr bytes
  3222  001F92                     	endif
  3223  001F92  0009               	tblrd		*+
  3224  001F94  CFF5 F031          	movff	tablat,___ftmul@f2
  3225  001F98  0009               	tblrd		*+
  3226  001F9A  CFF5 F032          	movff	tablat,___ftmul@f2+1
  3227  001F9E  000A               	tblrd		*-
  3228  001FA0  CFF5 F033          	movff	tablat,___ftmul@f2+2
  3229  001FA4  C06C  F02E         	movff	_fround$1616,___ftmul@f1
  3230  001FA8  C06D  F02F         	movff	_fround$1616+1,___ftmul@f1+1
  3231  001FAC  C06E  F030         	movff	_fround$1616+2,___ftmul@f1+2
  3232  001FB0  ECFD  F013         	call	___ftmul	;wreg free
  3233  001FB4  C02E  F069         	movff	?___ftmul,_fround$1617
  3234  001FB8  C02F  F06A         	movff	?___ftmul+1,_fround$1617+1
  3235  001FBC  C030  F06B         	movff	?___ftmul+2,_fround$1617+2
  3236                           
  3237                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3238  001FC0  C069  F02E         	movff	_fround$1617,___ftmul@f1
  3239  001FC4  C06A  F02F         	movff	_fround$1617+1,___ftmul@f1+1
  3240  001FC8  C06B  F030         	movff	_fround$1617+2,___ftmul@f1+2
  3241  001FCC  0E00               	movlw	0
  3242  001FCE  6E31               	movwf	___ftmul@f2,c
  3243  001FD0  0E00               	movlw	0
  3244  001FD2  6E32               	movwf	___ftmul@f2+1,c
  3245  001FD4  0E3F               	movlw	63
  3246  001FD6  6E33               	movwf	___ftmul@f2+2,c
  3247  001FD8  ECFD  F013         	call	___ftmul	;wreg free
  3248  001FDC  C02E  F066         	movff	?___ftmul,?_fround
  3249  001FE0  C02F  F067         	movff	?___ftmul+1,?_fround+1
  3250  001FE4  C030  F068         	movff	?___ftmul+2,?_fround+2
  3251  001FE8  0012               	return	
  3252  001FEA                     l3738:
  3253                           
  3254                           ;doprnt.c: 415: else if(prec > 10)
  3255  001FEA  0E0A               	movlw	10
  3256  001FEC  0100               	movlb	0	; () banked
  3257  001FEE  656F               	cpfsgt	fround@prec& (0+255),b
  3258  001FF0  D05D               	goto	l3746
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3262  001FF2  0E00               	movlw	0
  3263  001FF4  6E25               	movwf	___wmul@multiplicand+1,c
  3264  001FF6  0E03               	movlw	3
  3265  001FF8  6E24               	movwf	___wmul@multiplicand,c
  3266  001FFA  0E00               	movlw	0
  3267  001FFC  6E17               	movwf	___awmod@divisor+1,c
  3268  001FFE  0E0A               	movlw	10
  3269  002000  6E16               	movwf	___awmod@divisor,c
  3270  002002  C06F  F014         	movff	fround@prec,___awmod@dividend
  3271  002006  6A15               	clrf	___awmod@dividend+1,c
  3272  002008  EC71  F016         	call	___awmod	;wreg free
  3273  00200C  C014  F022         	movff	?___awmod,___wmul@multiplier
  3274  002010  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  3275  002014  ECE2  F018         	call	___wmul	;wreg free
  3276  002018  0E50               	movlw	low __npowers_
  3277  00201A  2422               	addwf	?___wmul,w,c
  3278  00201C  6EF6               	movwf	tblptrl,c
  3279  00201E  0E10               	movlw	high __npowers_
  3280  002020  2023               	addwfc	?___wmul+1,w,c
  3281  002022  6EF7               	movwf	tblptrh,c
  3282  002024                     	if	0	;There are less than 3 active tblptr bytes
  3283  002024                     	endif
  3284  002024  0009               	tblrd		*+
  3285  002026  CFF5 F031          	movff	tablat,___ftmul@f2
  3286  00202A  0009               	tblrd		*+
  3287  00202C  CFF5 F032          	movff	tablat,___ftmul@f2+1
  3288  002030  000A               	tblrd		*-
  3289  002032  CFF5 F033          	movff	tablat,___ftmul@f2+2
  3290  002036  0E00               	movlw	0
  3291  002038  6E1D               	movwf	___awdiv@divisor+1,c
  3292  00203A  0E0A               	movlw	10
  3293  00203C  6E1C               	movwf	___awdiv@divisor,c
  3294  00203E  C06F  F01A         	movff	fround@prec,___awdiv@dividend
  3295  002042  6A1B               	clrf	___awdiv@dividend+1,c
  3296  002044  ECEE  F015         	call	___awdiv	;wreg free
  3297  002048  0E09               	movlw	9
  3298  00204A  241A               	addwf	?___awdiv,w,c
  3299  00204C  6E22               	movwf	___wmul@multiplier,c
  3300  00204E  0E00               	movlw	0
  3301  002050  201B               	addwfc	?___awdiv+1,w,c
  3302  002052  6E23               	movwf	___wmul@multiplier+1,c
  3303  002054  0E00               	movlw	0
  3304  002056  6E25               	movwf	___wmul@multiplicand+1,c
  3305  002058  0E03               	movlw	3
  3306  00205A  6E24               	movwf	___wmul@multiplicand,c
  3307  00205C  ECE2  F018         	call	___wmul	;wreg free
  3308  002060  0E50               	movlw	low __npowers_
  3309  002062  2422               	addwf	?___wmul,w,c
  3310  002064  6EF6               	movwf	tblptrl,c
  3311  002066  0E10               	movlw	high __npowers_
  3312  002068  2023               	addwfc	?___wmul+1,w,c
  3313  00206A  6EF7               	movwf	tblptrh,c
  3314  00206C                     	if	0	;There are less than 3 active tblptr bytes
  3315  00206C                     	endif
  3316  00206C  0009               	tblrd		*+
  3317  00206E  CFF5 F02E          	movff	tablat,___ftmul@f1
  3318  002072  0009               	tblrd		*+
  3319  002074  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  3320  002078  000A               	tblrd		*-
  3321  00207A  CFF5 F030          	movff	tablat,___ftmul@f1+2
  3322  00207E  ECFD  F013         	call	___ftmul	;wreg free
  3323  002082  C02E  F06C         	movff	?___ftmul,_fround$1616
  3324  002086  C02F  F06D         	movff	?___ftmul+1,_fround$1616+1
  3325  00208A  C030  F06E         	movff	?___ftmul+2,_fround$1616+2
  3326                           
  3327                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3328  00208E  C06C  F02E         	movff	_fround$1616,___ftmul@f1
  3329  002092  C06D  F02F         	movff	_fround$1616+1,___ftmul@f1+1
  3330  002096  C06E  F030         	movff	_fround$1616+2,___ftmul@f1+2
  3331  00209A  0E00               	movlw	0
  3332  00209C  6E31               	movwf	___ftmul@f2,c
  3333  00209E  0E00               	movlw	0
  3334  0020A0  6E32               	movwf	___ftmul@f2+1,c
  3335  0020A2  0E3F               	movlw	63
  3336  0020A4  6E33               	movwf	___ftmul@f2+2,c
  3337  0020A6  ECFD  F013         	call	___ftmul	;wreg free
  3338  0020AA  D798               	goto	L4
  3339  0020AC                     l3746:
  3340                           
  3341                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3342  0020AC  0100               	movlb	0	; () banked
  3343  0020AE  516F               	movf	fround@prec& (0+255),w,b
  3344  0020B0  0D03               	mullw	3
  3345  0020B2  0E50               	movlw	low __npowers_
  3346  0020B4  24F3               	addwf	prodl,w,c
  3347  0020B6  6EF6               	movwf	tblptrl,c
  3348  0020B8  0E10               	movlw	high __npowers_
  3349  0020BA  20F4               	addwfc	prodh,w,c
  3350  0020BC  6EF7               	movwf	tblptrh,c
  3351  0020BE                     	if	0	;There are less than 3 active tblptr bytes
  3352  0020BE                     	endif
  3353  0020BE  0009               	tblrd		*+
  3354  0020C0  CFF5 F02E          	movff	tablat,___ftmul@f1
  3355  0020C4  0009               	tblrd		*+
  3356  0020C6  CFF5 F02F          	movff	tablat,___ftmul@f1+1
  3357  0020CA  000A               	tblrd		*-
  3358  0020CC  CFF5 F030          	movff	tablat,___ftmul@f1+2
  3359  0020D0  0E00               	movlw	0
  3360  0020D2  6E31               	movwf	___ftmul@f2,c
  3361  0020D4  0E00               	movlw	0
  3362  0020D6  6E32               	movwf	___ftmul@f2+1,c
  3363  0020D8  0E3F               	movlw	63
  3364  0020DA  6E33               	movwf	___ftmul@f2+2,c
  3365  0020DC  ECFD  F013         	call	___ftmul	;wreg free
  3366  0020E0  C02E  F066         	movff	?___ftmul,?_fround
  3367  0020E4  C02F  F067         	movff	?___ftmul+1,?_fround+1
  3368  0020E8  C030  F068         	movff	?___ftmul+2,?_fround+2
  3369  0020EC  0012               	return	
  3370  0020EE                     __end_of_fround:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function ___wmul *****************
  3388 ;; Defined at:
  3389 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  multiplier      2   33[COMRAM] unsigned int 
  3392 ;;  multiplicand    2   35[COMRAM] unsigned int 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  product         2   37[COMRAM] unsigned int 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  2   33[COMRAM] unsigned int 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, prodl, prodh
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        6 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    3
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_fround
  3415 ;;		_scale
  3416 ;;		_printf
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text7
  3421  0031C4                     __ptext7:
  3422                           	opt stack 0
  3423  0031C4                     ___wmul:
  3424                           	opt stack 25
  3425                           
  3426                           ;incstack = 0
  3427  0031C4  5022               	movf	___wmul@multiplier,w,c
  3428  0031C6  0224               	mulwf	___wmul@multiplicand,c
  3429  0031C8  CFF3 F026          	movff	prodl,___wmul@product
  3430  0031CC  CFF4 F027          	movff	prodh,___wmul@product+1
  3431  0031D0  5022               	movf	___wmul@multiplier,w,c
  3432  0031D2  0225               	mulwf	___wmul@multiplicand+1,c
  3433  0031D4  50F3               	movf	prodl,w,c
  3434  0031D6  2627               	addwf	___wmul@product+1,f,c
  3435  0031D8  5023               	movf	___wmul@multiplier+1,w,c
  3436  0031DA  0224               	mulwf	___wmul@multiplicand,c
  3437  0031DC  50F3               	movf	prodl,w,c
  3438  0031DE  2627               	addwf	___wmul@product+1,f,c
  3439  0031E0  C026  F022         	movff	___wmul@product,?___wmul
  3440  0031E4  C027  F023         	movff	___wmul@product+1,?___wmul+1
  3441  0031E8  0012               	return	
  3442  0031EA                     __end_of___wmul:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           prodh	equ	0xFF4
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           postinc0	equ	0xFEE
  3452                           wreg	equ	0xFE8
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function ___ftmul *****************
  3460 ;; Defined at:
  3461 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  f1              3   45[COMRAM] float 
  3464 ;;  f2              3   48[COMRAM] float 
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3467 ;;  sign            1    5[BANK0 ] unsigned char 
  3468 ;;  cntr            1    4[BANK0 ] unsigned char 
  3469 ;;  exp             1    0[BANK0 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  3   45[COMRAM] float 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:       15 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    4
  3486 ;; This function calls:
  3487 ;;		___ftpack
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;;		_fround
  3491 ;;		_scale
  3492 ;;		_printf
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text8
  3497  0027FA                     __ptext8:
  3498                           	opt stack 0
  3499  0027FA                     ___ftmul:
  3500                           	opt stack 24
  3501                           
  3502                           ;incstack = 0
  3503  0027FA  C030  F034         	movff	___ftmul@f1+2,??___ftmul
  3504  0027FE  6A35               	clrf	(??___ftmul+1)& (0+255),c
  3505  002800  6A36               	clrf	(??___ftmul+2)& (0+255),c
  3506  002802  342F               	rlcf	___ftmul@f1+1,w,c
  3507  002804  3634               	rlcf	??___ftmul& (0+255),f,c
  3508  002806  E301               	bnc	u3681
  3509  002808  8035               	bsf	(??___ftmul+1)& (0+255),0,c
  3510  00280A                     u3681:
  3511  00280A  5034               	movf	??___ftmul,w,c
  3512  00280C  0100               	movlb	0	; () banked
  3513  00280E  6F60               	movwf	___ftmul@exp& (0+255),b
  3514  002810  0100               	movlb	0	; () banked
  3515  002812  5160               	movf	___ftmul@exp& (0+255),w,b
  3516  002814  A4D8               	btfss	status,2,c
  3517  002816  D007               	goto	l3606
  3518                           
  3519                           ; BSR set to: 0
  3520  002818  0E00               	movlw	0
  3521  00281A  6E2E               	movwf	?___ftmul,c
  3522  00281C  0E00               	movlw	0
  3523  00281E  6E2F               	movwf	?___ftmul+1,c
  3524  002820  0E00               	movlw	0
  3525  002822  6E30               	movwf	?___ftmul+2,c
  3526                           
  3527                           ; BSR set to: 0
  3528  002824  0012               	return	
  3529  002826                     l3606:
  3530                           
  3531                           ; BSR set to: 0
  3532  002826  C033  F034         	movff	___ftmul@f2+2,??___ftmul
  3533  00282A  6A35               	clrf	(??___ftmul+1)& (0+255),c
  3534  00282C  6A36               	clrf	(??___ftmul+2)& (0+255),c
  3535  00282E  3432               	rlcf	___ftmul@f2+1,w,c
  3536  002830  3634               	rlcf	??___ftmul& (0+255),f,c
  3537  002832  E301               	bnc	u3701
  3538  002834  8035               	bsf	(??___ftmul+1)& (0+255),0,c
  3539  002836                     u3701:
  3540  002836  5034               	movf	??___ftmul,w,c
  3541  002838  0100               	movlb	0	; () banked
  3542  00283A  6F65               	movwf	___ftmul@sign& (0+255),b
  3543  00283C  0100               	movlb	0	; () banked
  3544  00283E  5165               	movf	___ftmul@sign& (0+255),w,b
  3545  002840  A4D8               	btfss	status,2,c
  3546  002842  D007               	goto	l3612
  3547                           
  3548                           ; BSR set to: 0
  3549  002844  0E00               	movlw	0
  3550  002846  6E2E               	movwf	?___ftmul,c
  3551  002848  0E00               	movlw	0
  3552  00284A  6E2F               	movwf	?___ftmul+1,c
  3553  00284C  0E00               	movlw	0
  3554  00284E  6E30               	movwf	?___ftmul+2,c
  3555                           
  3556                           ; BSR set to: 0
  3557  002850  0012               	return	
  3558  002852                     l3612:
  3559                           
  3560                           ; BSR set to: 0
  3561  002852  0100               	movlb	0	; () banked
  3562  002854  5165               	movf	___ftmul@sign& (0+255),w,b
  3563  002856  0F7B               	addlw	123
  3564  002858  0100               	movlb	0	; () banked
  3565  00285A  2760               	addwf	___ftmul@exp& (0+255),f,b
  3566                           
  3567                           ; BSR set to: 0
  3568  00285C  C030  F065         	movff	___ftmul@f1+2,___ftmul@sign
  3569  002860  5033               	movf	___ftmul@f2+2,w,c
  3570  002862  0100               	movlb	0	; () banked
  3571  002864  1B65               	xorwf	___ftmul@sign& (0+255),f,b
  3572  002866  0E80               	movlw	128
  3573  002868  0100               	movlb	0	; () banked
  3574  00286A  1765               	andwf	___ftmul@sign& (0+255),f,b
  3575                           
  3576                           ; BSR set to: 0
  3577  00286C  8E2F               	bsf	___ftmul@f1+1,7,c
  3578                           
  3579                           ; BSR set to: 0
  3580  00286E  8E32               	bsf	___ftmul@f2+1,7,c
  3581                           
  3582                           ; BSR set to: 0
  3583  002870  0EFF               	movlw	255
  3584  002872  1631               	andwf	___ftmul@f2,f,c
  3585  002874  0EFF               	movlw	255
  3586  002876  1632               	andwf	___ftmul@f2+1,f,c
  3587  002878  0E00               	movlw	0
  3588  00287A  1633               	andwf	___ftmul@f2+2,f,c
  3589                           
  3590                           ; BSR set to: 0
  3591  00287C  0E00               	movlw	0
  3592  00287E  0100               	movlb	0	; () banked
  3593  002880  6F61               	movwf	___ftmul@f3_as_product& (0+255),b
  3594  002882  0E00               	movlw	0
  3595  002884  0100               	movlb	0	; () banked
  3596  002886  6F62               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3597  002888  0E00               	movlw	0
  3598  00288A  0100               	movlb	0	; () banked
  3599  00288C  6F63               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602  00288E  0E07               	movlw	7
  3603  002890  0100               	movlb	0	; () banked
  3604  002892  6F64               	movwf	___ftmul@cntr& (0+255),b
  3605  002894                     l3626:
  3606                           
  3607                           ; BSR set to: 0
  3608  002894  A02E               	btfss	___ftmul@f1,0,c
  3609  002896  D009               	goto	l3630
  3610                           
  3611                           ; BSR set to: 0
  3612  002898  5031               	movf	___ftmul@f2,w,c
  3613  00289A  0100               	movlb	0	; () banked
  3614  00289C  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3615  00289E  5032               	movf	___ftmul@f2+1,w,c
  3616  0028A0  0100               	movlb	0	; () banked
  3617  0028A2  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3618  0028A4  5033               	movf	___ftmul@f2+2,w,c
  3619  0028A6  0100               	movlb	0	; () banked
  3620  0028A8  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3621  0028AA                     l3630:
  3622                           
  3623                           ; BSR set to: 0
  3624  0028AA  90D8               	bcf	status,0,c
  3625  0028AC  3230               	rrcf	___ftmul@f1+2,f,c
  3626  0028AE  322F               	rrcf	___ftmul@f1+1,f,c
  3627  0028B0  322E               	rrcf	___ftmul@f1,f,c
  3628  0028B2  90D8               	bcf	status,0,c
  3629  0028B4  3631               	rlcf	___ftmul@f2,f,c
  3630  0028B6  3632               	rlcf	___ftmul@f2+1,f,c
  3631  0028B8  3633               	rlcf	___ftmul@f2+2,f,c
  3632                           
  3633                           ; BSR set to: 0
  3634  0028BA  0100               	movlb	0	; () banked
  3635  0028BC  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3636  0028BE  D7EA               	goto	l3626
  3637                           
  3638                           ; BSR set to: 0
  3639                           
  3640                           ; BSR set to: 0
  3641  0028C0  0E09               	movlw	9
  3642  0028C2  0100               	movlb	0	; () banked
  3643  0028C4  6F64               	movwf	___ftmul@cntr& (0+255),b
  3644  0028C6                     l3636:
  3645                           
  3646                           ; BSR set to: 0
  3647  0028C6  A02E               	btfss	___ftmul@f1,0,c
  3648  0028C8  D009               	goto	l3640
  3649                           
  3650                           ; BSR set to: 0
  3651  0028CA  5031               	movf	___ftmul@f2,w,c
  3652  0028CC  0100               	movlb	0	; () banked
  3653  0028CE  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3654  0028D0  5032               	movf	___ftmul@f2+1,w,c
  3655  0028D2  0100               	movlb	0	; () banked
  3656  0028D4  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3657  0028D6  5033               	movf	___ftmul@f2+2,w,c
  3658  0028D8  0100               	movlb	0	; () banked
  3659  0028DA  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3660  0028DC                     l3640:
  3661                           
  3662                           ; BSR set to: 0
  3663  0028DC  90D8               	bcf	status,0,c
  3664  0028DE  3230               	rrcf	___ftmul@f1+2,f,c
  3665  0028E0  322F               	rrcf	___ftmul@f1+1,f,c
  3666  0028E2  322E               	rrcf	___ftmul@f1,f,c
  3667  0028E4  0100               	movlb	0	; () banked
  3668  0028E6  90D8               	bcf	status,0,c
  3669  0028E8  3363               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3670  0028EA  3362               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3671  0028EC  3361               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3672                           
  3673                           ; BSR set to: 0
  3674  0028EE  0100               	movlb	0	; () banked
  3675  0028F0  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3676  0028F2  D7E9               	goto	l3636
  3677                           
  3678                           ; BSR set to: 0
  3679                           
  3680                           ; BSR set to: 0
  3681  0028F4  C061  F014         	movff	___ftmul@f3_as_product,___ftpack@arg
  3682  0028F8  C062  F015         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3683  0028FC  C063  F016         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3684  002900  C060  F017         	movff	___ftmul@exp,___ftpack@exp
  3685  002904  C065  F018         	movff	___ftmul@sign,___ftpack@sign
  3686  002908  EC00  F015         	call	___ftpack	;wreg free
  3687  00290C  C014  F02E         	movff	?___ftpack,?___ftmul
  3688  002910  C015  F02F         	movff	?___ftpack+1,?___ftmul+1
  3689  002914  C016  F030         	movff	?___ftpack+2,?___ftmul+2
  3690  002918  0012               	return	
  3691  00291A                     __end_of___ftmul:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           tblptrh	equ	0xFF7
  3695                           tblptrl	equ	0xFF6
  3696                           tablat	equ	0xFF5
  3697                           prodh	equ	0xFF4
  3698                           prodl	equ	0xFF3
  3699                           intcon	equ	0xFF2
  3700                           postinc0	equ	0xFEE
  3701                           wreg	equ	0xFE8
  3702                           postinc2	equ	0xFDE
  3703                           postdec2	equ	0xFDD
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function ___awmod *****************
  3709 ;; Defined at:
  3710 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  dividend        2   19[COMRAM] int 
  3713 ;;  divisor         2   21[COMRAM] int 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;  sign            1   24[COMRAM] unsigned char 
  3716 ;;  counter         1   23[COMRAM] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  2   19[COMRAM] int 
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3726 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;Total ram usage:        6 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    3
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_fround
  3737 ;;		_scale
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text9
  3742  002CE2                     __ptext9:
  3743                           	opt stack 0
  3744  002CE2                     ___awmod:
  3745                           	opt stack 25
  3746                           
  3747                           ;incstack = 0
  3748  002CE2  0E00               	movlw	0
  3749  002CE4  6E19               	movwf	___awmod@sign,c
  3750  002CE6  AE15               	btfss	___awmod@dividend+1,7,c
  3751  002CE8  D006               	goto	l3700
  3752  002CEA  6C14               	negf	___awmod@dividend,c
  3753  002CEC  1E15               	comf	___awmod@dividend+1,f,c
  3754  002CEE  B0D8               	btfsc	status,0,c
  3755  002CF0  2A15               	incf	___awmod@dividend+1,f,c
  3756  002CF2  0E01               	movlw	1
  3757  002CF4  6E19               	movwf	___awmod@sign,c
  3758  002CF6                     l3700:
  3759  002CF6  AE17               	btfss	___awmod@divisor+1,7,c
  3760  002CF8  D004               	goto	l3704
  3761  002CFA  6C16               	negf	___awmod@divisor,c
  3762  002CFC  1E17               	comf	___awmod@divisor+1,f,c
  3763  002CFE  B0D8               	btfsc	status,0,c
  3764  002D00  2A17               	incf	___awmod@divisor+1,f,c
  3765  002D02                     l3704:
  3766  002D02  5016               	movf	___awmod@divisor,w,c
  3767  002D04  1017               	iorwf	___awmod@divisor+1,w,c
  3768  002D06  B4D8               	btfsc	status,2,c
  3769  002D08  D018               	goto	l3720
  3770  002D0A  0E01               	movlw	1
  3771  002D0C  6E18               	movwf	___awmod@counter,c
  3772  002D0E  D004               	goto	l3710
  3773  002D10                     l3708:
  3774  002D10  90D8               	bcf	status,0,c
  3775  002D12  3616               	rlcf	___awmod@divisor,f,c
  3776  002D14  3617               	rlcf	___awmod@divisor+1,f,c
  3777  002D16  2A18               	incf	___awmod@counter,f,c
  3778  002D18                     l3710:
  3779  002D18  AE17               	btfss	___awmod@divisor+1,7,c
  3780  002D1A  D7FA               	goto	l3708
  3781  002D1C                     l3712:
  3782  002D1C  5016               	movf	___awmod@divisor,w,c
  3783  002D1E  5C14               	subwf	___awmod@dividend,w,c
  3784  002D20  5017               	movf	___awmod@divisor+1,w,c
  3785  002D22  5815               	subwfb	___awmod@dividend+1,w,c
  3786  002D24  A0D8               	btfss	status,0,c
  3787  002D26  D004               	goto	l3716
  3788  002D28  5016               	movf	___awmod@divisor,w,c
  3789  002D2A  5E14               	subwf	___awmod@dividend,f,c
  3790  002D2C  5017               	movf	___awmod@divisor+1,w,c
  3791  002D2E  5A15               	subwfb	___awmod@dividend+1,f,c
  3792  002D30                     l3716:
  3793  002D30  90D8               	bcf	status,0,c
  3794  002D32  3217               	rrcf	___awmod@divisor+1,f,c
  3795  002D34  3216               	rrcf	___awmod@divisor,f,c
  3796  002D36  2E18               	decfsz	___awmod@counter,f,c
  3797  002D38  D7F1               	goto	l3712
  3798  002D3A                     l3720:
  3799  002D3A  5019               	movf	___awmod@sign,w,c
  3800  002D3C  B4D8               	btfsc	status,2,c
  3801  002D3E  D004               	goto	l3724
  3802  002D40  6C14               	negf	___awmod@dividend,c
  3803  002D42  1E15               	comf	___awmod@dividend+1,f,c
  3804  002D44  B0D8               	btfsc	status,0,c
  3805  002D46  2A15               	incf	___awmod@dividend+1,f,c
  3806  002D48                     l3724:
  3807  002D48  C014  F014         	movff	___awmod@dividend,?___awmod
  3808  002D4C  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
  3809  002D50  0012               	return	
  3810  002D52                     __end_of___awmod:
  3811                           	opt stack 0
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           postinc2	equ	0xFDE
  3822                           postdec2	equ	0xFDD
  3823                           fsr2h	equ	0xFDA
  3824                           fsr2l	equ	0xFD9
  3825                           status	equ	0xFD8
  3826                           
  3827 ;; *************** function ___awdiv *****************
  3828 ;; Defined at:
  3829 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  dividend        2   25[COMRAM] int 
  3832 ;;  divisor         2   27[COMRAM] int 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  quotient        2   31[COMRAM] int 
  3835 ;;  sign            1   30[COMRAM] unsigned char 
  3836 ;;  counter         1   29[COMRAM] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  2   25[COMRAM] int 
  3839 ;; Registers used:
  3840 ;;		wreg, status,2, status,0
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;Total ram usage:        8 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    3
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_fround
  3857 ;;		_scale
  3858 ;;		_printf
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text10
  3863  002BDC                     __ptext10:
  3864                           	opt stack 0
  3865  002BDC                     ___awdiv:
  3866                           	opt stack 25
  3867                           
  3868                           ;incstack = 0
  3869  002BDC  0E00               	movlw	0
  3870  002BDE  6E1F               	movwf	___awdiv@sign,c
  3871  002BE0  AE1D               	btfss	___awdiv@divisor+1,7,c
  3872  002BE2  D006               	goto	l3656
  3873  002BE4  6C1C               	negf	___awdiv@divisor,c
  3874  002BE6  1E1D               	comf	___awdiv@divisor+1,f,c
  3875  002BE8  B0D8               	btfsc	status,0,c
  3876  002BEA  2A1D               	incf	___awdiv@divisor+1,f,c
  3877  002BEC  0E01               	movlw	1
  3878  002BEE  6E1F               	movwf	___awdiv@sign,c
  3879  002BF0                     l3656:
  3880  002BF0  AE1B               	btfss	___awdiv@dividend+1,7,c
  3881  002BF2  D006               	goto	l3662
  3882  002BF4  6C1A               	negf	___awdiv@dividend,c
  3883  002BF6  1E1B               	comf	___awdiv@dividend+1,f,c
  3884  002BF8  B0D8               	btfsc	status,0,c
  3885  002BFA  2A1B               	incf	___awdiv@dividend+1,f,c
  3886  002BFC  0E01               	movlw	1
  3887  002BFE  1A1F               	xorwf	___awdiv@sign,f,c
  3888  002C00                     l3662:
  3889  002C00  0E00               	movlw	0
  3890  002C02  6E21               	movwf	___awdiv@quotient+1,c
  3891  002C04  0E00               	movlw	0
  3892  002C06  6E20               	movwf	___awdiv@quotient,c
  3893  002C08  501C               	movf	___awdiv@divisor,w,c
  3894  002C0A  101D               	iorwf	___awdiv@divisor+1,w,c
  3895  002C0C  B4D8               	btfsc	status,2,c
  3896  002C0E  D01C               	goto	l3684
  3897  002C10  0E01               	movlw	1
  3898  002C12  6E1E               	movwf	___awdiv@counter,c
  3899  002C14  D004               	goto	l3670
  3900  002C16                     l3668:
  3901  002C16  90D8               	bcf	status,0,c
  3902  002C18  361C               	rlcf	___awdiv@divisor,f,c
  3903  002C1A  361D               	rlcf	___awdiv@divisor+1,f,c
  3904  002C1C  2A1E               	incf	___awdiv@counter,f,c
  3905  002C1E                     l3670:
  3906  002C1E  AE1D               	btfss	___awdiv@divisor+1,7,c
  3907  002C20  D7FA               	goto	l3668
  3908  002C22                     l3672:
  3909  002C22  90D8               	bcf	status,0,c
  3910  002C24  3620               	rlcf	___awdiv@quotient,f,c
  3911  002C26  3621               	rlcf	___awdiv@quotient+1,f,c
  3912  002C28  501C               	movf	___awdiv@divisor,w,c
  3913  002C2A  5C1A               	subwf	___awdiv@dividend,w,c
  3914  002C2C  501D               	movf	___awdiv@divisor+1,w,c
  3915  002C2E  581B               	subwfb	___awdiv@dividend+1,w,c
  3916  002C30  A0D8               	btfss	status,0,c
  3917  002C32  D005               	goto	l3680
  3918  002C34  501C               	movf	___awdiv@divisor,w,c
  3919  002C36  5E1A               	subwf	___awdiv@dividend,f,c
  3920  002C38  501D               	movf	___awdiv@divisor+1,w,c
  3921  002C3A  5A1B               	subwfb	___awdiv@dividend+1,f,c
  3922  002C3C  8020               	bsf	___awdiv@quotient,0,c
  3923  002C3E                     l3680:
  3924  002C3E  90D8               	bcf	status,0,c
  3925  002C40  321D               	rrcf	___awdiv@divisor+1,f,c
  3926  002C42  321C               	rrcf	___awdiv@divisor,f,c
  3927  002C44  2E1E               	decfsz	___awdiv@counter,f,c
  3928  002C46  D7ED               	goto	l3672
  3929  002C48                     l3684:
  3930  002C48  501F               	movf	___awdiv@sign,w,c
  3931  002C4A  B4D8               	btfsc	status,2,c
  3932  002C4C  D004               	goto	l3688
  3933  002C4E  6C20               	negf	___awdiv@quotient,c
  3934  002C50  1E21               	comf	___awdiv@quotient+1,f,c
  3935  002C52  B0D8               	btfsc	status,0,c
  3936  002C54  2A21               	incf	___awdiv@quotient+1,f,c
  3937  002C56                     l3688:
  3938  002C56  C020  F01A         	movff	___awdiv@quotient,?___awdiv
  3939  002C5A  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
  3940  002C5E  0012               	return	
  3941  002C60                     __end_of___awdiv:
  3942                           	opt stack 0
  3943                           tblptru	equ	0xFF8
  3944                           tblptrh	equ	0xFF7
  3945                           tblptrl	equ	0xFF6
  3946                           tablat	equ	0xFF5
  3947                           prodh	equ	0xFF4
  3948                           prodl	equ	0xFF3
  3949                           intcon	equ	0xFF2
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           postinc2	equ	0xFDE
  3953                           postdec2	equ	0xFDD
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function __tdiv_to_l_ *****************
  3959 ;; Defined at:
  3960 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  f1              3   19[COMRAM] float 
  3963 ;;  f2              3   22[COMRAM] float 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  quot            4   28[COMRAM] unsigned long 
  3966 ;;  exp1            1   33[COMRAM] unsigned char 
  3967 ;;  cntr            1   32[COMRAM] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  4   19[COMRAM] unsigned long 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:       15 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    3
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_printf
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text11
  3992  002470                     __ptext11:
  3993                           	opt stack 0
  3994  002470                     __tdiv_to_l_:
  3995                           	opt stack 26
  3996                           
  3997                           ;incstack = 0
  3998  002470  C016  F01A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3999  002474  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4000  002476  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4001  002478  3415               	rlcf	__tdiv_to_l_@f1+1,w,c
  4002  00247A  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4003  00247C  E301               	bnc	u2441
  4004  00247E  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4005  002480                     u2441:
  4006  002480  501A               	movf	??__tdiv_to_l_,w,c
  4007  002482  6E22               	movwf	__tdiv_to_l_@exp1,c
  4008  002484  5022               	movf	__tdiv_to_l_@exp1,w,c
  4009  002486  A4D8               	btfss	status,2,c
  4010  002488  D009               	goto	l2784
  4011  00248A  0E00               	movlw	0
  4012  00248C  6E14               	movwf	?__tdiv_to_l_,c
  4013  00248E  0E00               	movlw	0
  4014  002490  6E15               	movwf	?__tdiv_to_l_+1,c
  4015  002492  0E00               	movlw	0
  4016  002494  6E16               	movwf	?__tdiv_to_l_+2,c
  4017  002496  0E00               	movlw	0
  4018  002498  6E17               	movwf	?__tdiv_to_l_+3,c
  4019  00249A  0012               	return	
  4020  00249C                     l2784:
  4021  00249C  C019  F01A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4022  0024A0  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4023  0024A2  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4024  0024A4  3418               	rlcf	__tdiv_to_l_@f2+1,w,c
  4025  0024A6  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4026  0024A8  E301               	bnc	u2461
  4027  0024AA  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4028  0024AC                     u2461:
  4029  0024AC  501A               	movf	??__tdiv_to_l_,w,c
  4030  0024AE  6E21               	movwf	__tdiv_to_l_@cntr,c
  4031  0024B0  5021               	movf	__tdiv_to_l_@cntr,w,c
  4032  0024B2  A4D8               	btfss	status,2,c
  4033  0024B4  D009               	goto	l2790
  4034  0024B6  0E00               	movlw	0
  4035  0024B8  6E14               	movwf	?__tdiv_to_l_,c
  4036  0024BA  0E00               	movlw	0
  4037  0024BC  6E15               	movwf	?__tdiv_to_l_+1,c
  4038  0024BE  0E00               	movlw	0
  4039  0024C0  6E16               	movwf	?__tdiv_to_l_+2,c
  4040  0024C2  0E00               	movlw	0
  4041  0024C4  6E17               	movwf	?__tdiv_to_l_+3,c
  4042  0024C6  0012               	return	
  4043  0024C8                     l2790:
  4044  0024C8  8E15               	bsf	__tdiv_to_l_@f1+1,7,c
  4045  0024CA  0EFF               	movlw	255
  4046  0024CC  1614               	andwf	__tdiv_to_l_@f1,f,c
  4047  0024CE  0EFF               	movlw	255
  4048  0024D0  1615               	andwf	__tdiv_to_l_@f1+1,f,c
  4049  0024D2  0E00               	movlw	0
  4050  0024D4  1616               	andwf	__tdiv_to_l_@f1+2,f,c
  4051  0024D6  8E18               	bsf	__tdiv_to_l_@f2+1,7,c
  4052  0024D8  0EFF               	movlw	255
  4053  0024DA  1617               	andwf	__tdiv_to_l_@f2,f,c
  4054  0024DC  0EFF               	movlw	255
  4055  0024DE  1618               	andwf	__tdiv_to_l_@f2+1,f,c
  4056  0024E0  0E00               	movlw	0
  4057  0024E2  1619               	andwf	__tdiv_to_l_@f2+2,f,c
  4058  0024E4  0E00               	movlw	0
  4059  0024E6  6E1D               	movwf	__tdiv_to_l_@quot,c
  4060  0024E8  0E00               	movlw	0
  4061  0024EA  6E1E               	movwf	__tdiv_to_l_@quot+1,c
  4062  0024EC  0E00               	movlw	0
  4063  0024EE  6E1F               	movwf	__tdiv_to_l_@quot+2,c
  4064  0024F0  0E00               	movlw	0
  4065  0024F2  6E20               	movwf	__tdiv_to_l_@quot+3,c
  4066  0024F4  0E7F               	movlw	127
  4067  0024F6  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  4068  0024F8  5021               	movf	__tdiv_to_l_@cntr,w,c
  4069  0024FA  0F98               	addlw	152
  4070  0024FC  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  4071  0024FE  0E18               	movlw	24
  4072  002500  6E21               	movwf	__tdiv_to_l_@cntr,c
  4073  002502                     l756:
  4074  002502  90D8               	bcf	status,0,c
  4075  002504  361D               	rlcf	__tdiv_to_l_@quot,f,c
  4076  002506  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  4077  002508  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  4078  00250A  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  4079  00250C  5017               	movf	__tdiv_to_l_@f2,w,c
  4080  00250E  5C14               	subwf	__tdiv_to_l_@f1,w,c
  4081  002510  5018               	movf	__tdiv_to_l_@f2+1,w,c
  4082  002512  5815               	subwfb	__tdiv_to_l_@f1+1,w,c
  4083  002514  5019               	movf	__tdiv_to_l_@f2+2,w,c
  4084  002516  5816               	subwfb	__tdiv_to_l_@f1+2,w,c
  4085  002518  A0D8               	btfss	status,0,c
  4086  00251A  D007               	goto	l757
  4087  00251C  5017               	movf	__tdiv_to_l_@f2,w,c
  4088  00251E  5E14               	subwf	__tdiv_to_l_@f1,f,c
  4089  002520  5018               	movf	__tdiv_to_l_@f2+1,w,c
  4090  002522  5A15               	subwfb	__tdiv_to_l_@f1+1,f,c
  4091  002524  5019               	movf	__tdiv_to_l_@f2+2,w,c
  4092  002526  5A16               	subwfb	__tdiv_to_l_@f1+2,f,c
  4093  002528  801D               	bsf	__tdiv_to_l_@quot,0,c
  4094  00252A                     l757:
  4095  00252A  90D8               	bcf	status,0,c
  4096  00252C  3614               	rlcf	__tdiv_to_l_@f1,f,c
  4097  00252E  3615               	rlcf	__tdiv_to_l_@f1+1,f,c
  4098  002530  3616               	rlcf	__tdiv_to_l_@f1+2,f,c
  4099  002532  2E21               	decfsz	__tdiv_to_l_@cntr,f,c
  4100  002534  D7E6               	goto	l756
  4101  002536  AE22               	btfss	__tdiv_to_l_@exp1,7,c
  4102  002538  D016               	goto	l2824
  4103  00253A  5022               	movf	__tdiv_to_l_@exp1,w,c
  4104  00253C  0A80               	xorlw	128
  4105  00253E  0F97               	addlw	151
  4106  002540  B0D8               	btfsc	status,0,c
  4107  002542  D009               	goto	l2820
  4108  002544  0E00               	movlw	0
  4109  002546  6E14               	movwf	?__tdiv_to_l_,c
  4110  002548  0E00               	movlw	0
  4111  00254A  6E15               	movwf	?__tdiv_to_l_+1,c
  4112  00254C  0E00               	movlw	0
  4113  00254E  6E16               	movwf	?__tdiv_to_l_+2,c
  4114  002550  0E00               	movlw	0
  4115  002552  6E17               	movwf	?__tdiv_to_l_+3,c
  4116  002554  0012               	return	
  4117  002556                     l2820:
  4118  002556  90D8               	bcf	status,0,c
  4119  002558  3220               	rrcf	__tdiv_to_l_@quot+3,f,c
  4120  00255A  321F               	rrcf	__tdiv_to_l_@quot+2,f,c
  4121  00255C  321E               	rrcf	__tdiv_to_l_@quot+1,f,c
  4122  00255E  321D               	rrcf	__tdiv_to_l_@quot,f,c
  4123  002560  3E22               	incfsz	__tdiv_to_l_@exp1,f,c
  4124  002562  D7F9               	goto	l2820
  4125  002564  D015               	goto	l763
  4126  002566                     l2824:
  4127  002566  0E17               	movlw	23
  4128  002568  6422               	cpfsgt	__tdiv_to_l_@exp1,c
  4129  00256A  D00F               	goto	l2832
  4130  00256C  0E00               	movlw	0
  4131  00256E  6E14               	movwf	?__tdiv_to_l_,c
  4132  002570  0E00               	movlw	0
  4133  002572  6E15               	movwf	?__tdiv_to_l_+1,c
  4134  002574  0E00               	movlw	0
  4135  002576  6E16               	movwf	?__tdiv_to_l_+2,c
  4136  002578  0E00               	movlw	0
  4137  00257A  6E17               	movwf	?__tdiv_to_l_+3,c
  4138  00257C  0012               	return	
  4139  00257E                     l2830:
  4140  00257E  90D8               	bcf	status,0,c
  4141  002580  361D               	rlcf	__tdiv_to_l_@quot,f,c
  4142  002582  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  4143  002584  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  4144  002586  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  4145  002588  0622               	decf	__tdiv_to_l_@exp1,f,c
  4146  00258A                     l2832:
  4147  00258A  5022               	movf	__tdiv_to_l_@exp1,w,c
  4148  00258C  A4D8               	btfss	status,2,c
  4149  00258E  D7F7               	goto	l2830
  4150  002590                     l763:
  4151  002590  C01D  F014         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4152  002594  C01E  F015         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4153  002598  C01F  F016         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4154  00259C  C020  F017         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4155  0025A0  0012               	return		;funcret
  4156  0025A2                     __end_of__tdiv_to_l_:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postinc2	equ	0xFDE
  4168                           postdec2	equ	0xFDD
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173 ;; *************** function __div_to_l_ *****************
  4174 ;; Defined at:
  4175 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  f1              3   19[COMRAM] unsigned long 
  4178 ;;  f2              3   22[COMRAM] unsigned long 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  quot            4   25[COMRAM] unsigned long 
  4181 ;;  exp1            1   30[COMRAM] unsigned char 
  4182 ;;  cntr            1   29[COMRAM] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  4   19[COMRAM] unsigned long 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4192 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;Total ram usage:       12 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    3
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_printf
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text12
  4207  0026D2                     __ptext12:
  4208                           	opt stack 0
  4209  0026D2                     __div_to_l_:
  4210                           	opt stack 26
  4211                           
  4212                           ;incstack = 0
  4213  0026D2  3416               	rlcf	__div_to_l_@f1+2,w,c
  4214  0026D4  3417               	rlcf	__div_to_l_@f1+3,w,c
  4215  0026D6  6E1F               	movwf	__div_to_l_@exp1,c
  4216  0026D8  501F               	movf	__div_to_l_@exp1,w,c
  4217  0026DA  A4D8               	btfss	status,2,c
  4218  0026DC  D009               	goto	l2840
  4219  0026DE  0E00               	movlw	0
  4220  0026E0  6E14               	movwf	?__div_to_l_,c
  4221  0026E2  0E00               	movlw	0
  4222  0026E4  6E15               	movwf	?__div_to_l_+1,c
  4223  0026E6  0E00               	movlw	0
  4224  0026E8  6E16               	movwf	?__div_to_l_+2,c
  4225  0026EA  0E00               	movlw	0
  4226  0026EC  6E17               	movwf	?__div_to_l_+3,c
  4227  0026EE  0012               	return	
  4228  0026F0                     l2840:
  4229  0026F0  3419               	rlcf	__div_to_l_@f2+2,w,c
  4230  0026F2  341A               	rlcf	__div_to_l_@f2+3,w,c
  4231  0026F4  6E1E               	movwf	__div_to_l_@cntr,c
  4232  0026F6  501E               	movf	__div_to_l_@cntr,w,c
  4233  0026F8  A4D8               	btfss	status,2,c
  4234  0026FA  D009               	goto	l2846
  4235  0026FC  0E00               	movlw	0
  4236  0026FE  6E14               	movwf	?__div_to_l_,c
  4237  002700  0E00               	movlw	0
  4238  002702  6E15               	movwf	?__div_to_l_+1,c
  4239  002704  0E00               	movlw	0
  4240  002706  6E16               	movwf	?__div_to_l_+2,c
  4241  002708  0E00               	movlw	0
  4242  00270A  6E17               	movwf	?__div_to_l_+3,c
  4243  00270C  0012               	return	
  4244  00270E                     l2846:
  4245  00270E  8E16               	bsf	__div_to_l_@f1+2,7,c
  4246  002710  0EFF               	movlw	255
  4247  002712  1614               	andwf	__div_to_l_@f1,f,c
  4248  002714  0EFF               	movlw	255
  4249  002716  1615               	andwf	__div_to_l_@f1+1,f,c
  4250  002718  0EFF               	movlw	255
  4251  00271A  1616               	andwf	__div_to_l_@f1+2,f,c
  4252  00271C  0E00               	movlw	0
  4253  00271E  1617               	andwf	__div_to_l_@f1+3,f,c
  4254  002720  8E19               	bsf	__div_to_l_@f2+2,7,c
  4255  002722  0EFF               	movlw	255
  4256  002724  1617               	andwf	__div_to_l_@f2,f,c
  4257  002726  0EFF               	movlw	255
  4258  002728  1618               	andwf	__div_to_l_@f2+1,f,c
  4259  00272A  0EFF               	movlw	255
  4260  00272C  1619               	andwf	__div_to_l_@f2+2,f,c
  4261  00272E  0E00               	movlw	0
  4262  002730  161A               	andwf	__div_to_l_@f2+3,f,c
  4263  002732  0E00               	movlw	0
  4264  002734  6E1A               	movwf	__div_to_l_@quot,c
  4265  002736  0E00               	movlw	0
  4266  002738  6E1B               	movwf	__div_to_l_@quot+1,c
  4267  00273A  0E00               	movlw	0
  4268  00273C  6E1C               	movwf	__div_to_l_@quot+2,c
  4269  00273E  0E00               	movlw	0
  4270  002740  6E1D               	movwf	__div_to_l_@quot+3,c
  4271  002742  0E7F               	movlw	127
  4272  002744  5E1F               	subwf	__div_to_l_@exp1,f,c
  4273  002746  501E               	movf	__div_to_l_@cntr,w,c
  4274  002748  0FA0               	addlw	160
  4275  00274A  5E1F               	subwf	__div_to_l_@exp1,f,c
  4276  00274C  0E20               	movlw	32
  4277  00274E  6E1E               	movwf	__div_to_l_@cntr,c
  4278  002750                     l2860:
  4279  002750  90D8               	bcf	status,0,c
  4280  002752  361A               	rlcf	__div_to_l_@quot,f,c
  4281  002754  361B               	rlcf	__div_to_l_@quot+1,f,c
  4282  002756  361C               	rlcf	__div_to_l_@quot+2,f,c
  4283  002758  361D               	rlcf	__div_to_l_@quot+3,f,c
  4284  00275A  5017               	movf	__div_to_l_@f2,w,c
  4285  00275C  5C14               	subwf	__div_to_l_@f1,w,c
  4286  00275E  5018               	movf	__div_to_l_@f2+1,w,c
  4287  002760  5815               	subwfb	__div_to_l_@f1+1,w,c
  4288  002762  5019               	movf	__div_to_l_@f2+2,w,c
  4289  002764  5816               	subwfb	__div_to_l_@f1+2,w,c
  4290  002766  501A               	movf	__div_to_l_@f2+3,w,c
  4291  002768  5817               	subwfb	__div_to_l_@f1+3,w,c
  4292  00276A  A0D8               	btfss	status,0,c
  4293  00276C  D009               	goto	l2868
  4294  00276E  5017               	movf	__div_to_l_@f2,w,c
  4295  002770  5E14               	subwf	__div_to_l_@f1,f,c
  4296  002772  5018               	movf	__div_to_l_@f2+1,w,c
  4297  002774  5A15               	subwfb	__div_to_l_@f1+1,f,c
  4298  002776  5019               	movf	__div_to_l_@f2+2,w,c
  4299  002778  5A16               	subwfb	__div_to_l_@f1+2,f,c
  4300  00277A  501A               	movf	__div_to_l_@f2+3,w,c
  4301  00277C  5A17               	subwfb	__div_to_l_@f1+3,f,c
  4302  00277E  801A               	bsf	__div_to_l_@quot,0,c
  4303  002780                     l2868:
  4304  002780  90D8               	bcf	status,0,c
  4305  002782  3614               	rlcf	__div_to_l_@f1,f,c
  4306  002784  3615               	rlcf	__div_to_l_@f1+1,f,c
  4307  002786  3616               	rlcf	__div_to_l_@f1+2,f,c
  4308  002788  3617               	rlcf	__div_to_l_@f1+3,f,c
  4309  00278A  2E1E               	decfsz	__div_to_l_@cntr,f,c
  4310  00278C  D7E1               	goto	l2860
  4311  00278E  AE1F               	btfss	__div_to_l_@exp1,7,c
  4312  002790  D016               	goto	l2884
  4313  002792  501F               	movf	__div_to_l_@exp1,w,c
  4314  002794  0A80               	xorlw	128
  4315  002796  0F9F               	addlw	159
  4316  002798  B0D8               	btfsc	status,0,c
  4317  00279A  D009               	goto	l2880
  4318  00279C  0E00               	movlw	0
  4319  00279E  6E14               	movwf	?__div_to_l_,c
  4320  0027A0  0E00               	movlw	0
  4321  0027A2  6E15               	movwf	?__div_to_l_+1,c
  4322  0027A4  0E00               	movlw	0
  4323  0027A6  6E16               	movwf	?__div_to_l_+2,c
  4324  0027A8  0E00               	movlw	0
  4325  0027AA  6E17               	movwf	?__div_to_l_+3,c
  4326  0027AC  0012               	return	
  4327  0027AE                     l2880:
  4328  0027AE  90D8               	bcf	status,0,c
  4329  0027B0  321D               	rrcf	__div_to_l_@quot+3,f,c
  4330  0027B2  321C               	rrcf	__div_to_l_@quot+2,f,c
  4331  0027B4  321B               	rrcf	__div_to_l_@quot+1,f,c
  4332  0027B6  321A               	rrcf	__div_to_l_@quot,f,c
  4333  0027B8  3E1F               	incfsz	__div_to_l_@exp1,f,c
  4334  0027BA  D7F9               	goto	l2880
  4335  0027BC  D015               	goto	l659
  4336  0027BE                     l2884:
  4337  0027BE  0E1F               	movlw	31
  4338  0027C0  641F               	cpfsgt	__div_to_l_@exp1,c
  4339  0027C2  D00F               	goto	l2892
  4340  0027C4  0E00               	movlw	0
  4341  0027C6  6E14               	movwf	?__div_to_l_,c
  4342  0027C8  0E00               	movlw	0
  4343  0027CA  6E15               	movwf	?__div_to_l_+1,c
  4344  0027CC  0E00               	movlw	0
  4345  0027CE  6E16               	movwf	?__div_to_l_+2,c
  4346  0027D0  0E00               	movlw	0
  4347  0027D2  6E17               	movwf	?__div_to_l_+3,c
  4348  0027D4  0012               	return	
  4349  0027D6                     l2890:
  4350  0027D6  90D8               	bcf	status,0,c
  4351  0027D8  361A               	rlcf	__div_to_l_@quot,f,c
  4352  0027DA  361B               	rlcf	__div_to_l_@quot+1,f,c
  4353  0027DC  361C               	rlcf	__div_to_l_@quot+2,f,c
  4354  0027DE  361D               	rlcf	__div_to_l_@quot+3,f,c
  4355  0027E0  061F               	decf	__div_to_l_@exp1,f,c
  4356  0027E2                     l2892:
  4357  0027E2  501F               	movf	__div_to_l_@exp1,w,c
  4358  0027E4  A4D8               	btfss	status,2,c
  4359  0027E6  D7F7               	goto	l2890
  4360  0027E8                     l659:
  4361  0027E8  C01A  F014         	movff	__div_to_l_@quot,?__div_to_l_
  4362  0027EC  C01B  F015         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4363  0027F0  C01C  F016         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4364  0027F4  C01D  F017         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4365  0027F8  0012               	return		;funcret
  4366  0027FA                     __end_of__div_to_l_:
  4367                           	opt stack 0
  4368                           tblptru	equ	0xFF8
  4369                           tblptrh	equ	0xFF7
  4370                           tblptrl	equ	0xFF6
  4371                           tablat	equ	0xFF5
  4372                           prodh	equ	0xFF4
  4373                           prodl	equ	0xFF3
  4374                           intcon	equ	0xFF2
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           postinc2	equ	0xFDE
  4378                           postdec2	equ	0xFDD
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function ___lltoft *****************
  4384 ;; Defined at:
  4385 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;  c               4   27[COMRAM] unsigned long 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  exp             1   35[COMRAM] unsigned char 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  3   27[COMRAM] float 
  4392 ;; Registers used:
  4393 ;;		wreg, status,2, status,0, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        9 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    4
  4406 ;; This function calls:
  4407 ;;		___ftpack
  4408 ;; This function is called by:
  4409 ;;		_printf
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text13
  4414  002DB8                     __ptext13:
  4415                           	opt stack 0
  4416  002DB8                     ___lltoft:
  4417                           	opt stack 25
  4418                           
  4419                           ;incstack = 0
  4420  002DB8  0E8E               	movlw	142
  4421  002DBA  6E24               	movwf	___lltoft@exp,c
  4422  002DBC  D006               	goto	l3846
  4423  002DBE                     l3844:
  4424  002DBE  90D8               	bcf	status,0,c
  4425  002DC0  321F               	rrcf	___lltoft@c+3,f,c
  4426  002DC2  321E               	rrcf	___lltoft@c+2,f,c
  4427  002DC4  321D               	rrcf	___lltoft@c+1,f,c
  4428  002DC6  321C               	rrcf	___lltoft@c,f,c
  4429  002DC8  2A24               	incf	___lltoft@exp,f,c
  4430  002DCA                     l3846:
  4431  002DCA  0E00               	movlw	0
  4432  002DCC  141C               	andwf	___lltoft@c,w,c
  4433  002DCE  6E20               	movwf	??___lltoft& (0+255),c
  4434  002DD0  0E00               	movlw	0
  4435  002DD2  141D               	andwf	___lltoft@c+1,w,c
  4436  002DD4  6E21               	movwf	(??___lltoft+1)& (0+255),c
  4437  002DD6  0E00               	movlw	0
  4438  002DD8  141E               	andwf	___lltoft@c+2,w,c
  4439  002DDA  6E22               	movwf	(??___lltoft+2)& (0+255),c
  4440  002DDC  0EFF               	movlw	255
  4441  002DDE  141F               	andwf	___lltoft@c+3,w,c
  4442  002DE0  6E23               	movwf	(??___lltoft+3)& (0+255),c
  4443  002DE2  5020               	movf	??___lltoft,w,c
  4444  002DE4  1021               	iorwf	??___lltoft+1,w,c
  4445  002DE6  1022               	iorwf	??___lltoft+2,w,c
  4446  002DE8  1023               	iorwf	??___lltoft+3,w,c
  4447  002DEA  A4D8               	btfss	status,2,c
  4448  002DEC  D7E8               	goto	l3844
  4449  002DEE  C01C  F014         	movff	___lltoft@c,___ftpack@arg
  4450  002DF2  C01D  F015         	movff	___lltoft@c+1,___ftpack@arg+1
  4451  002DF6  C01E  F016         	movff	___lltoft@c+2,___ftpack@arg+2
  4452  002DFA  C024  F017         	movff	___lltoft@exp,___ftpack@exp
  4453  002DFE  0E00               	movlw	0
  4454  002E00  6E18               	movwf	___ftpack@sign,c
  4455  002E02  EC00  F015         	call	___ftpack	;wreg free
  4456  002E06  C014  F01C         	movff	?___ftpack,?___lltoft
  4457  002E0A  C015  F01D         	movff	?___ftpack+1,?___lltoft+1
  4458  002E0E  C016  F01E         	movff	?___ftpack+2,?___lltoft+2
  4459  002E12  0012               	return	
  4460  002E14                     __end_of___lltoft:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           intcon	equ	0xFF2
  4469                           postinc0	equ	0xFEE
  4470                           wreg	equ	0xFE8
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function ___llmod *****************
  4478 ;; Defined at:
  4479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  dividend        4   19[COMRAM] unsigned long 
  4482 ;;  divisor         4   23[COMRAM] unsigned long 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  counter         1   27[COMRAM] unsigned char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  4   19[COMRAM] unsigned long 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4494 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;Total ram usage:        9 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    3
  4501 ;; This function calls:
  4502 ;;		Nothing
  4503 ;; This function is called by:
  4504 ;;		_printf
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text14
  4509  002D52                     __ptext14:
  4510                           	opt stack 0
  4511  002D52                     ___llmod:
  4512                           	opt stack 26
  4513                           
  4514                           ;incstack = 0
  4515  002D52  5018               	movf	___llmod@divisor,w,c
  4516  002D54  1019               	iorwf	___llmod@divisor+1,w,c
  4517  002D56  101A               	iorwf	___llmod@divisor+2,w,c
  4518  002D58  101B               	iorwf	___llmod@divisor+3,w,c
  4519  002D5A  B4D8               	btfsc	status,2,c
  4520  002D5C  D024               	goto	l848
  4521  002D5E  0E01               	movlw	1
  4522  002D60  6E1C               	movwf	___llmod@counter,c
  4523  002D62  D006               	goto	l2998
  4524  002D64                     l2996:
  4525  002D64  90D8               	bcf	status,0,c
  4526  002D66  3618               	rlcf	___llmod@divisor,f,c
  4527  002D68  3619               	rlcf	___llmod@divisor+1,f,c
  4528  002D6A  361A               	rlcf	___llmod@divisor+2,f,c
  4529  002D6C  361B               	rlcf	___llmod@divisor+3,f,c
  4530  002D6E  2A1C               	incf	___llmod@counter,f,c
  4531  002D70                     l2998:
  4532  002D70  AE1B               	btfss	___llmod@divisor+3,7,c
  4533  002D72  D7F8               	goto	l2996
  4534  002D74                     l3000:
  4535  002D74  5018               	movf	___llmod@divisor,w,c
  4536  002D76  5C14               	subwf	___llmod@dividend,w,c
  4537  002D78  5019               	movf	___llmod@divisor+1,w,c
  4538  002D7A  5815               	subwfb	___llmod@dividend+1,w,c
  4539  002D7C  501A               	movf	___llmod@divisor+2,w,c
  4540  002D7E  5816               	subwfb	___llmod@dividend+2,w,c
  4541  002D80  501B               	movf	___llmod@divisor+3,w,c
  4542  002D82  5817               	subwfb	___llmod@dividend+3,w,c
  4543  002D84  A0D8               	btfss	status,0,c
  4544  002D86  D008               	goto	l3004
  4545  002D88  5018               	movf	___llmod@divisor,w,c
  4546  002D8A  5E14               	subwf	___llmod@dividend,f,c
  4547  002D8C  5019               	movf	___llmod@divisor+1,w,c
  4548  002D8E  5A15               	subwfb	___llmod@dividend+1,f,c
  4549  002D90  501A               	movf	___llmod@divisor+2,w,c
  4550  002D92  5A16               	subwfb	___llmod@dividend+2,f,c
  4551  002D94  501B               	movf	___llmod@divisor+3,w,c
  4552  002D96  5A17               	subwfb	___llmod@dividend+3,f,c
  4553  002D98                     l3004:
  4554  002D98  90D8               	bcf	status,0,c
  4555  002D9A  321B               	rrcf	___llmod@divisor+3,f,c
  4556  002D9C  321A               	rrcf	___llmod@divisor+2,f,c
  4557  002D9E  3219               	rrcf	___llmod@divisor+1,f,c
  4558  002DA0  3218               	rrcf	___llmod@divisor,f,c
  4559  002DA2  2E1C               	decfsz	___llmod@counter,f,c
  4560  002DA4  D7E7               	goto	l3000
  4561  002DA6                     l848:
  4562  002DA6  C014  F014         	movff	___llmod@dividend,?___llmod
  4563  002DAA  C015  F015         	movff	___llmod@dividend+1,?___llmod+1
  4564  002DAE  C016  F016         	movff	___llmod@dividend+2,?___llmod+2
  4565  002DB2  C017  F017         	movff	___llmod@dividend+3,?___llmod+3
  4566  002DB6  0012               	return		;funcret
  4567  002DB8                     __end_of___llmod:
  4568                           	opt stack 0
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function ___lldiv *****************
  4585 ;; Defined at:
  4586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  dividend        4   19[COMRAM] unsigned long 
  4589 ;;  divisor         4   23[COMRAM] unsigned long 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  quotient        4   27[COMRAM] unsigned long 
  4592 ;;  counter         1   31[COMRAM] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  4   19[COMRAM] unsigned long 
  4595 ;; Registers used:
  4596 ;;		wreg, status,2, status,0
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:       13 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    3
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_printf
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text15
  4617  002C60                     __ptext15:
  4618                           	opt stack 0
  4619  002C60                     ___lldiv:
  4620                           	opt stack 26
  4621                           
  4622                           ;incstack = 0
  4623  002C60  0E00               	movlw	0
  4624  002C62  6E1C               	movwf	___lldiv@quotient,c
  4625  002C64  0E00               	movlw	0
  4626  002C66  6E1D               	movwf	___lldiv@quotient+1,c
  4627  002C68  0E00               	movlw	0
  4628  002C6A  6E1E               	movwf	___lldiv@quotient+2,c
  4629  002C6C  0E00               	movlw	0
  4630  002C6E  6E1F               	movwf	___lldiv@quotient+3,c
  4631  002C70  5018               	movf	___lldiv@divisor,w,c
  4632  002C72  1019               	iorwf	___lldiv@divisor+1,w,c
  4633  002C74  101A               	iorwf	___lldiv@divisor+2,w,c
  4634  002C76  101B               	iorwf	___lldiv@divisor+3,w,c
  4635  002C78  B4D8               	btfsc	status,2,c
  4636  002C7A  D02A               	goto	l838
  4637  002C7C  0E01               	movlw	1
  4638  002C7E  6E20               	movwf	___lldiv@counter,c
  4639  002C80  D006               	goto	l2978
  4640  002C82                     l2976:
  4641  002C82  90D8               	bcf	status,0,c
  4642  002C84  3618               	rlcf	___lldiv@divisor,f,c
  4643  002C86  3619               	rlcf	___lldiv@divisor+1,f,c
  4644  002C88  361A               	rlcf	___lldiv@divisor+2,f,c
  4645  002C8A  361B               	rlcf	___lldiv@divisor+3,f,c
  4646  002C8C  2A20               	incf	___lldiv@counter,f,c
  4647  002C8E                     l2978:
  4648  002C8E  AE1B               	btfss	___lldiv@divisor+3,7,c
  4649  002C90  D7F8               	goto	l2976
  4650  002C92                     l2980:
  4651  002C92  90D8               	bcf	status,0,c
  4652  002C94  361C               	rlcf	___lldiv@quotient,f,c
  4653  002C96  361D               	rlcf	___lldiv@quotient+1,f,c
  4654  002C98  361E               	rlcf	___lldiv@quotient+2,f,c
  4655  002C9A  361F               	rlcf	___lldiv@quotient+3,f,c
  4656  002C9C  5018               	movf	___lldiv@divisor,w,c
  4657  002C9E  5C14               	subwf	___lldiv@dividend,w,c
  4658  002CA0  5019               	movf	___lldiv@divisor+1,w,c
  4659  002CA2  5815               	subwfb	___lldiv@dividend+1,w,c
  4660  002CA4  501A               	movf	___lldiv@divisor+2,w,c
  4661  002CA6  5816               	subwfb	___lldiv@dividend+2,w,c
  4662  002CA8  501B               	movf	___lldiv@divisor+3,w,c
  4663  002CAA  5817               	subwfb	___lldiv@dividend+3,w,c
  4664  002CAC  A0D8               	btfss	status,0,c
  4665  002CAE  D009               	goto	l2988
  4666  002CB0  5018               	movf	___lldiv@divisor,w,c
  4667  002CB2  5E14               	subwf	___lldiv@dividend,f,c
  4668  002CB4  5019               	movf	___lldiv@divisor+1,w,c
  4669  002CB6  5A15               	subwfb	___lldiv@dividend+1,f,c
  4670  002CB8  501A               	movf	___lldiv@divisor+2,w,c
  4671  002CBA  5A16               	subwfb	___lldiv@dividend+2,f,c
  4672  002CBC  501B               	movf	___lldiv@divisor+3,w,c
  4673  002CBE  5A17               	subwfb	___lldiv@dividend+3,f,c
  4674  002CC0  801C               	bsf	___lldiv@quotient,0,c
  4675  002CC2                     l2988:
  4676  002CC2  90D8               	bcf	status,0,c
  4677  002CC4  321B               	rrcf	___lldiv@divisor+3,f,c
  4678  002CC6  321A               	rrcf	___lldiv@divisor+2,f,c
  4679  002CC8  3219               	rrcf	___lldiv@divisor+1,f,c
  4680  002CCA  3218               	rrcf	___lldiv@divisor,f,c
  4681  002CCC  2E20               	decfsz	___lldiv@counter,f,c
  4682  002CCE  D7E1               	goto	l2980
  4683  002CD0                     l838:
  4684  002CD0  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  4685  002CD4  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  4686  002CD8  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  4687  002CDC  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  4688  002CE0  0012               	return		;funcret
  4689  002CE2                     __end_of___lldiv:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           postinc2	equ	0xFDE
  4701                           postdec2	equ	0xFDD
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function ___fttol *****************
  4707 ;; Defined at:
  4708 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  f1              3   13[BANK0 ] float 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  lval            4   23[BANK0 ] unsigned long 
  4713 ;;  exp1            1   27[BANK0 ] unsigned char 
  4714 ;;  sign1           1   22[BANK0 ] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  4   13[BANK0 ] long 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4724 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;Total ram usage:       15 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    3
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_printf
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           	psect	text16
  4739  00232C                     __ptext16:
  4740                           	opt stack 0
  4741  00232C                     ___fttol:
  4742                           	opt stack 26
  4743                           
  4744                           ;incstack = 0
  4745  00232C  C06F  F071         	movff	___fttol@f1+2,??___fttol
  4746  002330  0100               	movlb	0	; () banked
  4747  002332  6B72               	clrf	(??___fttol+1)& (0+255),b
  4748  002334  6B73               	clrf	(??___fttol+2)& (0+255),b
  4749  002336  0100               	movlb	0	; () banked
  4750  002338  356E               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4751  00233A  0100               	movlb	0	; () banked
  4752  00233C  3771               	rlcf	??___fttol& (0+255),f,b
  4753  00233E  E301               	bnc	u3941
  4754  002340  8172               	bsf	(??___fttol+1)& (0+255),0,b
  4755  002342                     u3941:
  4756  002342  0100               	movlb	0	; () banked
  4757  002344  5171               	movf	??___fttol& (0+255),w,b
  4758  002346  0100               	movlb	0	; () banked
  4759  002348  6F7B               	movwf	___fttol@exp1& (0+255),b
  4760  00234A  0100               	movlb	0	; () banked
  4761  00234C  517B               	movf	___fttol@exp1& (0+255),w,b
  4762  00234E  A4D8               	btfss	status,2,c
  4763  002350  D00A               	goto	l3802
  4764                           
  4765                           ; BSR set to: 0
  4766  002352  0E00               	movlw	0
  4767  002354  0100               	movlb	0	; () banked
  4768  002356  6F6D               	movwf	?___fttol& (0+255),b
  4769  002358  0E00               	movlw	0
  4770  00235A  6F6E               	movwf	(?___fttol+1)& (0+255),b
  4771  00235C  0E00               	movlw	0
  4772  00235E  6F6F               	movwf	(?___fttol+2)& (0+255),b
  4773  002360  0E00               	movlw	0
  4774  002362  6F70               	movwf	(?___fttol+3)& (0+255),b
  4775                           
  4776                           ; BSR set to: 0
  4777  002364  0012               	return	
  4778  002366                     l3802:
  4779                           
  4780                           ; BSR set to: 0
  4781  002366  0E17               	movlw	23
  4782  002368  0100               	movlb	0	; () banked
  4783  00236A  6F71               	movwf	??___fttol& (0+255),b
  4784  00236C  C06D  F072         	movff	___fttol@f1,??___fttol+1
  4785  002370  C06E  F073         	movff	___fttol@f1+1,??___fttol+2
  4786  002374  C06F  F074         	movff	___fttol@f1+2,??___fttol+3
  4787  002378  0100               	movlb	0	; () banked
  4788  00237A  2971               	incf	??___fttol& (0+255),w,b
  4789  00237C  0100               	movlb	0	; () banked
  4790  00237E  6F75               	movwf	(??___fttol+4)& (0+255),b
  4791  002380  D005               	goto	u3960
  4792  002382                     u3965:
  4793  002382  0100               	movlb	0	; () banked
  4794  002384  90D8               	bcf	status,0,c
  4795  002386  3374               	rrcf	(??___fttol+3)& (0+255),f,b
  4796  002388  3373               	rrcf	(??___fttol+2)& (0+255),f,b
  4797  00238A  3372               	rrcf	(??___fttol+1)& (0+255),f,b
  4798  00238C                     u3960:
  4799  00238C  0100               	movlb	0	; () banked
  4800  00238E  2F75               	decfsz	(??___fttol+4)& (0+255),f,b
  4801  002390  D7F8               	goto	u3965
  4802  002392  0100               	movlb	0	; () banked
  4803  002394  5172               	movf	(??___fttol+1)& (0+255),w,b
  4804  002396  0100               	movlb	0	; () banked
  4805  002398  6F76               	movwf	___fttol@sign1& (0+255),b
  4806                           
  4807                           ; BSR set to: 0
  4808  00239A  0100               	movlb	0	; () banked
  4809  00239C  8F6E               	bsf	(___fttol@f1+1)& (0+255),7,b
  4810                           
  4811                           ; BSR set to: 0
  4812  00239E  0EFF               	movlw	255
  4813  0023A0  0100               	movlb	0	; () banked
  4814  0023A2  176D               	andwf	___fttol@f1& (0+255),f,b
  4815  0023A4  0EFF               	movlw	255
  4816  0023A6  0100               	movlb	0	; () banked
  4817  0023A8  176E               	andwf	(___fttol@f1+1)& (0+255),f,b
  4818  0023AA  0E00               	movlw	0
  4819  0023AC  0100               	movlb	0	; () banked
  4820  0023AE  176F               	andwf	(___fttol@f1+2)& (0+255),f,b
  4821                           
  4822                           ; BSR set to: 0
  4823  0023B0  0100               	movlb	0	; () banked
  4824  0023B2  516D               	movf	___fttol@f1& (0+255),w,b
  4825  0023B4  0100               	movlb	0	; () banked
  4826  0023B6  6F77               	movwf	___fttol@lval& (0+255),b
  4827  0023B8  0100               	movlb	0	; () banked
  4828  0023BA  516E               	movf	(___fttol@f1+1)& (0+255),w,b
  4829  0023BC  0100               	movlb	0	; () banked
  4830  0023BE  6F78               	movwf	(___fttol@lval+1)& (0+255),b
  4831  0023C0  0100               	movlb	0	; () banked
  4832  0023C2  516F               	movf	(___fttol@f1+2)& (0+255),w,b
  4833  0023C4  0100               	movlb	0	; () banked
  4834  0023C6  6F79               	movwf	(___fttol@lval+2)& (0+255),b
  4835  0023C8  0100               	movlb	0	; () banked
  4836  0023CA  6B7A               	clrf	(___fttol@lval+3)& (0+255),b
  4837                           
  4838                           ; BSR set to: 0
  4839  0023CC  0E8E               	movlw	142
  4840  0023CE  0100               	movlb	0	; () banked
  4841  0023D0  5F7B               	subwf	___fttol@exp1& (0+255),f,b
  4842                           
  4843                           ; BSR set to: 0
  4844  0023D2  0100               	movlb	0	; () banked
  4845  0023D4  AF7B               	btfss	___fttol@exp1& (0+255),7,b
  4846  0023D6  D01A               	goto	l3824
  4847                           
  4848                           ; BSR set to: 0
  4849  0023D8  0100               	movlb	0	; () banked
  4850  0023DA  517B               	movf	___fttol@exp1& (0+255),w,b
  4851  0023DC  0A80               	xorlw	128
  4852  0023DE  0F8F               	addlw	143
  4853  0023E0  B0D8               	btfsc	status,0,c
  4854  0023E2  D00A               	goto	l3820
  4855                           
  4856                           ; BSR set to: 0
  4857  0023E4  0E00               	movlw	0
  4858  0023E6  0100               	movlb	0	; () banked
  4859  0023E8  6F6D               	movwf	?___fttol& (0+255),b
  4860  0023EA  0E00               	movlw	0
  4861  0023EC  6F6E               	movwf	(?___fttol+1)& (0+255),b
  4862  0023EE  0E00               	movlw	0
  4863  0023F0  6F6F               	movwf	(?___fttol+2)& (0+255),b
  4864  0023F2  0E00               	movlw	0
  4865  0023F4  6F70               	movwf	(?___fttol+3)& (0+255),b
  4866                           
  4867                           ; BSR set to: 0
  4868  0023F6  0012               	return	
  4869  0023F8                     l3820:
  4870                           
  4871                           ; BSR set to: 0
  4872  0023F8  0100               	movlb	0	; () banked
  4873  0023FA  90D8               	bcf	status,0,c
  4874  0023FC  337A               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4875  0023FE  3379               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4876  002400  3378               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4877  002402  3377               	rrcf	___fttol@lval& (0+255),f,b
  4878                           
  4879                           ; BSR set to: 0
  4880  002404  0100               	movlb	0	; () banked
  4881  002406  3F7B               	incfsz	___fttol@exp1& (0+255),f,b
  4882  002408  D7F7               	goto	l3820
  4883                           
  4884                           ; BSR set to: 0
  4885  00240A  D01B               	goto	l3834
  4886  00240C                     l3824:
  4887                           
  4888                           ; BSR set to: 0
  4889  00240C  0E17               	movlw	23
  4890  00240E  0100               	movlb	0	; () banked
  4891  002410  657B               	cpfsgt	___fttol@exp1& (0+255),b
  4892  002412  D012               	goto	l3832
  4893                           
  4894                           ; BSR set to: 0
  4895  002414  0E00               	movlw	0
  4896  002416  0100               	movlb	0	; () banked
  4897  002418  6F6D               	movwf	?___fttol& (0+255),b
  4898  00241A  0E00               	movlw	0
  4899  00241C  6F6E               	movwf	(?___fttol+1)& (0+255),b
  4900  00241E  0E00               	movlw	0
  4901  002420  6F6F               	movwf	(?___fttol+2)& (0+255),b
  4902  002422  0E00               	movlw	0
  4903  002424  6F70               	movwf	(?___fttol+3)& (0+255),b
  4904                           
  4905                           ; BSR set to: 0
  4906  002426  0012               	return	
  4907  002428                     l3830:
  4908                           
  4909                           ; BSR set to: 0
  4910  002428  0100               	movlb	0	; () banked
  4911  00242A  90D8               	bcf	status,0,c
  4912  00242C  3777               	rlcf	___fttol@lval& (0+255),f,b
  4913  00242E  3778               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4914  002430  3779               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4915  002432  377A               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4916  002434  0100               	movlb	0	; () banked
  4917  002436  077B               	decf	___fttol@exp1& (0+255),f,b
  4918  002438                     l3832:
  4919                           
  4920                           ; BSR set to: 0
  4921  002438  0100               	movlb	0	; () banked
  4922  00243A  517B               	movf	___fttol@exp1& (0+255),w,b
  4923  00243C  0100               	movlb	0	; () banked
  4924  00243E  A4D8               	btfss	status,2,c
  4925  002440  D7F3               	goto	l3830
  4926  002442                     l3834:
  4927                           
  4928                           ; BSR set to: 0
  4929  002442  0100               	movlb	0	; () banked
  4930  002444  5176               	movf	___fttol@sign1& (0+255),w,b
  4931  002446  0100               	movlb	0	; () banked
  4932  002448  B4D8               	btfsc	status,2,c
  4933  00244A  D009               	goto	l3838
  4934                           
  4935                           ; BSR set to: 0
  4936  00244C  0100               	movlb	0	; () banked
  4937  00244E  1F7A               	comf	(___fttol@lval+3)& (0+255),f,b
  4938  002450  1F79               	comf	(___fttol@lval+2)& (0+255),f,b
  4939  002452  1F78               	comf	(___fttol@lval+1)& (0+255),f,b
  4940  002454  6D77               	negf	___fttol@lval& (0+255),b
  4941  002456  0E00               	movlw	0
  4942  002458  2378               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4943  00245A  2379               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4944  00245C  237A               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4945  00245E                     l3838:
  4946                           
  4947                           ; BSR set to: 0
  4948  00245E  C077  F06D         	movff	___fttol@lval,?___fttol
  4949  002462  C078  F06E         	movff	___fttol@lval+1,?___fttol+1
  4950  002466  C079  F06F         	movff	___fttol@lval+2,?___fttol+2
  4951  00246A  C07A  F070         	movff	___fttol@lval+3,?___fttol+3
  4952  00246E  0012               	return	
  4953  002470                     __end_of___fttol:
  4954                           	opt stack 0
  4955                           tblptru	equ	0xFF8
  4956                           tblptrh	equ	0xFF7
  4957                           tblptrl	equ	0xFF6
  4958                           tablat	equ	0xFF5
  4959                           prodh	equ	0xFF4
  4960                           prodl	equ	0xFF3
  4961                           intcon	equ	0xFF2
  4962                           postinc0	equ	0xFEE
  4963                           wreg	equ	0xFE8
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function ___ftsub *****************
  4971 ;; Defined at:
  4972 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  f1              3   28[BANK0 ] float 
  4975 ;;  f2              3   31[BANK0 ] float 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  3   28[BANK0 ] float 
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4987 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;Total ram usage:        6 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    5
  4994 ;; This function calls:
  4995 ;;		___ftadd
  4996 ;; This function is called by:
  4997 ;;		_printf
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text17
  5002  002E64                     __ptext17:
  5003                           	opt stack 0
  5004  002E64                     ___ftsub:
  5005                           	opt stack 24
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;incstack = 0
  5009  002E64  0100               	movlb	0	; () banked
  5010  002E66  517F               	movf	___ftsub@f2& (0+255),w,b
  5011  002E68  0100               	movlb	0	; () banked
  5012  002E6A  1180               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5013  002E6C  0100               	movlb	0	; () banked
  5014  002E6E  1181               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5015  002E70  B4D8               	btfsc	status,2,c
  5016  002E72  D009               	goto	l3792
  5017                           
  5018                           ; BSR set to: 0
  5019  002E74  0E00               	movlw	0
  5020  002E76  0100               	movlb	0	; () banked
  5021  002E78  1B7F               	xorwf	___ftsub@f2& (0+255),f,b
  5022  002E7A  0E00               	movlw	0
  5023  002E7C  0100               	movlb	0	; () banked
  5024  002E7E  1B80               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5025  002E80  0E80               	movlw	128
  5026  002E82  0100               	movlb	0	; () banked
  5027  002E84  1B81               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5028  002E86                     l3792:
  5029                           
  5030                           ; BSR set to: 0
  5031  002E86  C07C  F070         	movff	___ftsub@f1,___ftadd@f1
  5032  002E8A  C07D  F071         	movff	___ftsub@f1+1,___ftadd@f1+1
  5033  002E8E  C07E  F072         	movff	___ftsub@f1+2,___ftadd@f1+2
  5034  002E92  C07F  F073         	movff	___ftsub@f2,___ftadd@f2
  5035  002E96  C080  F074         	movff	___ftsub@f2+1,___ftadd@f2+1
  5036  002E9A  C081  F075         	movff	___ftsub@f2+2,___ftadd@f2+2
  5037  002E9E  EC1C  F00E         	call	___ftadd	;wreg free
  5038  002EA2  C070  F07C         	movff	?___ftadd,?___ftsub
  5039  002EA6  C071  F07D         	movff	?___ftadd+1,?___ftsub+1
  5040  002EAA  C072  F07E         	movff	?___ftadd+2,?___ftsub+2
  5041  002EAE  0012               	return	
  5042  002EB0                     __end_of___ftsub:
  5043                           	opt stack 0
  5044                           tblptru	equ	0xFF8
  5045                           tblptrh	equ	0xFF7
  5046                           tblptrl	equ	0xFF6
  5047                           tablat	equ	0xFF5
  5048                           prodh	equ	0xFF4
  5049                           prodl	equ	0xFF3
  5050                           intcon	equ	0xFF2
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           postinc2	equ	0xFDE
  5054                           postdec2	equ	0xFDD
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function ___ftadd *****************
  5060 ;; Defined at:
  5061 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  f1              3   16[BANK0 ] float 
  5064 ;;  f2              3   19[BANK0 ] float 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  exp1            1   27[BANK0 ] unsigned char 
  5067 ;;  exp2            1   26[BANK0 ] unsigned char 
  5068 ;;  sign            1   25[BANK0 ] unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  3   16[BANK0 ] float 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, status,0, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5078 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;Total ram usage:       12 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    4
  5085 ;; This function calls:
  5086 ;;		___ftpack
  5087 ;; This function is called by:
  5088 ;;		_main
  5089 ;;		_printf
  5090 ;;		___ftsub
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text18
  5095  001C38                     __ptext18:
  5096                           	opt stack 0
  5097  001C38                     ___ftadd:
  5098                           	opt stack 24
  5099                           
  5100                           ;incstack = 0
  5101  001C38  C072  F076         	movff	___ftadd@f1+2,??___ftadd
  5102  001C3C  0100               	movlb	0	; () banked
  5103  001C3E  6B77               	clrf	(??___ftadd+1)& (0+255),b
  5104  001C40  6B78               	clrf	(??___ftadd+2)& (0+255),b
  5105  001C42  0100               	movlb	0	; () banked
  5106  001C44  3571               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5107  001C46  0100               	movlb	0	; () banked
  5108  001C48  3776               	rlcf	??___ftadd& (0+255),f,b
  5109  001C4A  E301               	bnc	u3471
  5110  001C4C  8177               	bsf	(??___ftadd+1)& (0+255),0,b
  5111  001C4E                     u3471:
  5112  001C4E  0100               	movlb	0	; () banked
  5113  001C50  5176               	movf	??___ftadd& (0+255),w,b
  5114  001C52  0100               	movlb	0	; () banked
  5115  001C54  6F7B               	movwf	___ftadd@exp1& (0+255),b
  5116  001C56  C075  F076         	movff	___ftadd@f2+2,??___ftadd
  5117  001C5A  0100               	movlb	0	; () banked
  5118  001C5C  6B77               	clrf	(??___ftadd+1)& (0+255),b
  5119  001C5E  6B78               	clrf	(??___ftadd+2)& (0+255),b
  5120  001C60  0100               	movlb	0	; () banked
  5121  001C62  3574               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5122  001C64  0100               	movlb	0	; () banked
  5123  001C66  3776               	rlcf	??___ftadd& (0+255),f,b
  5124  001C68  E301               	bnc	u3481
  5125  001C6A  8177               	bsf	(??___ftadd+1)& (0+255),0,b
  5126  001C6C                     u3481:
  5127  001C6C  0100               	movlb	0	; () banked
  5128  001C6E  5176               	movf	??___ftadd& (0+255),w,b
  5129  001C70  0100               	movlb	0	; () banked
  5130  001C72  6F7A               	movwf	___ftadd@exp2& (0+255),b
  5131                           
  5132                           ; BSR set to: 0
  5133  001C74  0100               	movlb	0	; () banked
  5134  001C76  517B               	movf	___ftadd@exp1& (0+255),w,b
  5135  001C78  0100               	movlb	0	; () banked
  5136  001C7A  B4D8               	btfsc	status,2,c
  5137  001C7C  D011               	goto	l714
  5138                           
  5139                           ; BSR set to: 0
  5140  001C7E  0100               	movlb	0	; () banked
  5141  001C80  517A               	movf	___ftadd@exp2& (0+255),w,b
  5142  001C82  0100               	movlb	0	; () banked
  5143  001C84  5D7B               	subwf	___ftadd@exp1& (0+255),w,b
  5144  001C86  B0D8               	btfsc	status,0,c
  5145  001C88  D012               	goto	l3538
  5146                           
  5147                           ; BSR set to: 0
  5148  001C8A  0100               	movlb	0	; () banked
  5149  001C8C  517B               	movf	___ftadd@exp1& (0+255),w,b
  5150  001C8E  0800               	sublw	0
  5151  001C90  0100               	movlb	0	; () banked
  5152  001C92  257A               	addwf	___ftadd@exp2& (0+255),w,b
  5153  001C94  0100               	movlb	0	; () banked
  5154  001C96  6F76               	movwf	??___ftadd& (0+255),b
  5155  001C98  0E18               	movlw	24
  5156  001C9A  0100               	movlb	0	; () banked
  5157  001C9C  6576               	cpfsgt	??___ftadd& (0+255),b
  5158  001C9E  D007               	goto	l3538
  5159  001CA0                     l714:
  5160                           
  5161                           ; BSR set to: 0
  5162  001CA0  C073  F070         	movff	___ftadd@f2,?___ftadd
  5163  001CA4  C074  F071         	movff	___ftadd@f2+1,?___ftadd+1
  5164  001CA8  C075  F072         	movff	___ftadd@f2+2,?___ftadd+2
  5165  001CAC  0012               	return	
  5166  001CAE                     l3538:
  5167                           
  5168                           ; BSR set to: 0
  5169  001CAE  0100               	movlb	0	; () banked
  5170  001CB0  517A               	movf	___ftadd@exp2& (0+255),w,b
  5171  001CB2  0100               	movlb	0	; () banked
  5172  001CB4  B4D8               	btfsc	status,2,c
  5173  001CB6  D011               	goto	l718
  5174                           
  5175                           ; BSR set to: 0
  5176  001CB8  0100               	movlb	0	; () banked
  5177  001CBA  517B               	movf	___ftadd@exp1& (0+255),w,b
  5178  001CBC  0100               	movlb	0	; () banked
  5179  001CBE  5D7A               	subwf	___ftadd@exp2& (0+255),w,b
  5180  001CC0  B0D8               	btfsc	status,0,c
  5181  001CC2  D012               	goto	l3544
  5182                           
  5183                           ; BSR set to: 0
  5184  001CC4  0100               	movlb	0	; () banked
  5185  001CC6  517A               	movf	___ftadd@exp2& (0+255),w,b
  5186  001CC8  0800               	sublw	0
  5187  001CCA  0100               	movlb	0	; () banked
  5188  001CCC  257B               	addwf	___ftadd@exp1& (0+255),w,b
  5189  001CCE  0100               	movlb	0	; () banked
  5190  001CD0  6F76               	movwf	??___ftadd& (0+255),b
  5191  001CD2  0E18               	movlw	24
  5192  001CD4  0100               	movlb	0	; () banked
  5193  001CD6  6576               	cpfsgt	??___ftadd& (0+255),b
  5194  001CD8  D007               	goto	l3544
  5195  001CDA                     l718:
  5196                           
  5197                           ; BSR set to: 0
  5198  001CDA  C070  F070         	movff	___ftadd@f1,?___ftadd
  5199  001CDE  C071  F071         	movff	___ftadd@f1+1,?___ftadd+1
  5200  001CE2  C072  F072         	movff	___ftadd@f1+2,?___ftadd+2
  5201  001CE6  0012               	return	
  5202  001CE8                     l3544:
  5203                           
  5204                           ; BSR set to: 0
  5205  001CE8  0E06               	movlw	6
  5206  001CEA  0100               	movlb	0	; () banked
  5207  001CEC  6F79               	movwf	___ftadd@sign& (0+255),b
  5208                           
  5209                           ; BSR set to: 0
  5210  001CEE  0100               	movlb	0	; () banked
  5211  001CF0  AF72               	btfss	(___ftadd@f1+2)& (0+255),7,b
  5212  001CF2  D002               	goto	l3550
  5213                           
  5214                           ; BSR set to: 0
  5215  001CF4  0100               	movlb	0	; () banked
  5216  001CF6  8F79               	bsf	___ftadd@sign& (0+255),7,b
  5217  001CF8                     l3550:
  5218                           
  5219                           ; BSR set to: 0
  5220  001CF8  0100               	movlb	0	; () banked
  5221  001CFA  AF75               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5222  001CFC  D002               	goto	l720
  5223                           
  5224                           ; BSR set to: 0
  5225  001CFE  0100               	movlb	0	; () banked
  5226  001D00  8D79               	bsf	___ftadd@sign& (0+255),6,b
  5227  001D02                     l720:
  5228                           
  5229                           ; BSR set to: 0
  5230  001D02  0100               	movlb	0	; () banked
  5231  001D04  8F71               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5232                           
  5233                           ; BSR set to: 0
  5234  001D06  0EFF               	movlw	255
  5235  001D08  0100               	movlb	0	; () banked
  5236  001D0A  1770               	andwf	___ftadd@f1& (0+255),f,b
  5237  001D0C  0EFF               	movlw	255
  5238  001D0E  0100               	movlb	0	; () banked
  5239  001D10  1771               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5240  001D12  0E00               	movlw	0
  5241  001D14  0100               	movlb	0	; () banked
  5242  001D16  1772               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5243  001D18  0100               	movlb	0	; () banked
  5244  001D1A  8F74               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5245                           
  5246                           ; BSR set to: 0
  5247  001D1C  0EFF               	movlw	255
  5248  001D1E  0100               	movlb	0	; () banked
  5249  001D20  1773               	andwf	___ftadd@f2& (0+255),f,b
  5250  001D22  0EFF               	movlw	255
  5251  001D24  0100               	movlb	0	; () banked
  5252  001D26  1774               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5253  001D28  0E00               	movlw	0
  5254  001D2A  0100               	movlb	0	; () banked
  5255  001D2C  1775               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5256                           
  5257                           ; BSR set to: 0
  5258  001D2E  0100               	movlb	0	; () banked
  5259  001D30  517A               	movf	___ftadd@exp2& (0+255),w,b
  5260  001D32  0100               	movlb	0	; () banked
  5261  001D34  5D7B               	subwf	___ftadd@exp1& (0+255),w,b
  5262  001D36  B0D8               	btfsc	status,0,c
  5263  001D38  D025               	goto	l3570
  5264  001D3A                     l3560:
  5265                           
  5266                           ; BSR set to: 0
  5267  001D3A  0100               	movlb	0	; () banked
  5268  001D3C  90D8               	bcf	status,0,c
  5269  001D3E  3773               	rlcf	___ftadd@f2& (0+255),f,b
  5270  001D40  3774               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5271  001D42  3775               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5272  001D44  0100               	movlb	0	; () banked
  5273  001D46  077A               	decf	___ftadd@exp2& (0+255),f,b
  5274                           
  5275                           ; BSR set to: 0
  5276  001D48  0100               	movlb	0	; () banked
  5277  001D4A  517B               	movf	___ftadd@exp1& (0+255),w,b
  5278  001D4C  0100               	movlb	0	; () banked
  5279  001D4E  197A               	xorwf	___ftadd@exp2& (0+255),w,b
  5280  001D50  B4D8               	btfsc	status,2,c
  5281  001D52  D011               	goto	l3568
  5282                           
  5283                           ; BSR set to: 0
  5284  001D54  0100               	movlb	0	; () banked
  5285  001D56  0779               	decf	___ftadd@sign& (0+255),f,b
  5286  001D58  C079  F076         	movff	___ftadd@sign,??___ftadd
  5287  001D5C  0E07               	movlw	7
  5288  001D5E  0100               	movlb	0	; () banked
  5289  001D60  1776               	andwf	??___ftadd& (0+255),f,b
  5290  001D62  B4D8               	btfsc	status,2,c
  5291  001D64  D008               	goto	l3568
  5292  001D66  D7E9               	goto	l3560
  5293  001D68                     l3566:
  5294                           
  5295                           ; BSR set to: 0
  5296  001D68  0100               	movlb	0	; () banked
  5297  001D6A  90D8               	bcf	status,0,c
  5298  001D6C  3372               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5299  001D6E  3371               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5300  001D70  3370               	rrcf	___ftadd@f1& (0+255),f,b
  5301  001D72  0100               	movlb	0	; () banked
  5302  001D74  2B7B               	incf	___ftadd@exp1& (0+255),f,b
  5303  001D76                     l3568:
  5304                           
  5305                           ; BSR set to: 0
  5306  001D76  0100               	movlb	0	; () banked
  5307  001D78  517A               	movf	___ftadd@exp2& (0+255),w,b
  5308  001D7A  0100               	movlb	0	; () banked
  5309  001D7C  197B               	xorwf	___ftadd@exp1& (0+255),w,b
  5310  001D7E  B4D8               	btfsc	status,2,c
  5311  001D80  D02B               	goto	l729
  5312  001D82  D7F2               	goto	l3566
  5313  001D84                     l3570:
  5314                           
  5315                           ; BSR set to: 0
  5316  001D84  0100               	movlb	0	; () banked
  5317  001D86  517B               	movf	___ftadd@exp1& (0+255),w,b
  5318  001D88  0100               	movlb	0	; () banked
  5319  001D8A  5D7A               	subwf	___ftadd@exp2& (0+255),w,b
  5320  001D8C  B0D8               	btfsc	status,0,c
  5321  001D8E  D024               	goto	l729
  5322  001D90                     l3572:
  5323                           
  5324                           ; BSR set to: 0
  5325  001D90  0100               	movlb	0	; () banked
  5326  001D92  90D8               	bcf	status,0,c
  5327  001D94  3770               	rlcf	___ftadd@f1& (0+255),f,b
  5328  001D96  3771               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5329  001D98  3772               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5330  001D9A  0100               	movlb	0	; () banked
  5331  001D9C  077B               	decf	___ftadd@exp1& (0+255),f,b
  5332                           
  5333                           ; BSR set to: 0
  5334  001D9E  0100               	movlb	0	; () banked
  5335  001DA0  517B               	movf	___ftadd@exp1& (0+255),w,b
  5336  001DA2  0100               	movlb	0	; () banked
  5337  001DA4  197A               	xorwf	___ftadd@exp2& (0+255),w,b
  5338  001DA6  B4D8               	btfsc	status,2,c
  5339  001DA8  D011               	goto	l3580
  5340                           
  5341                           ; BSR set to: 0
  5342  001DAA  0100               	movlb	0	; () banked
  5343  001DAC  0779               	decf	___ftadd@sign& (0+255),f,b
  5344  001DAE  C079  F076         	movff	___ftadd@sign,??___ftadd
  5345  001DB2  0E07               	movlw	7
  5346  001DB4  0100               	movlb	0	; () banked
  5347  001DB6  1776               	andwf	??___ftadd& (0+255),f,b
  5348  001DB8  B4D8               	btfsc	status,2,c
  5349  001DBA  D008               	goto	l3580
  5350  001DBC  D7E9               	goto	l3572
  5351  001DBE                     l3578:
  5352                           
  5353                           ; BSR set to: 0
  5354  001DBE  0100               	movlb	0	; () banked
  5355  001DC0  90D8               	bcf	status,0,c
  5356  001DC2  3375               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5357  001DC4  3374               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5358  001DC6  3373               	rrcf	___ftadd@f2& (0+255),f,b
  5359  001DC8  0100               	movlb	0	; () banked
  5360  001DCA  2B7A               	incf	___ftadd@exp2& (0+255),f,b
  5361  001DCC                     l3580:
  5362                           
  5363                           ; BSR set to: 0
  5364  001DCC  0100               	movlb	0	; () banked
  5365  001DCE  517A               	movf	___ftadd@exp2& (0+255),w,b
  5366  001DD0  0100               	movlb	0	; () banked
  5367  001DD2  197B               	xorwf	___ftadd@exp1& (0+255),w,b
  5368  001DD4  A4D8               	btfss	status,2,c
  5369  001DD6  D7F3               	goto	l3578
  5370  001DD8                     l729:
  5371                           
  5372                           ; BSR set to: 0
  5373  001DD8  0100               	movlb	0	; () banked
  5374  001DDA  AF79               	btfss	___ftadd@sign& (0+255),7,b
  5375  001DDC  D012               	goto	l738
  5376                           
  5377                           ; BSR set to: 0
  5378  001DDE  0EFF               	movlw	255
  5379  001DE0  0100               	movlb	0	; () banked
  5380  001DE2  1B70               	xorwf	___ftadd@f1& (0+255),f,b
  5381  001DE4  0EFF               	movlw	255
  5382  001DE6  0100               	movlb	0	; () banked
  5383  001DE8  1B71               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5384  001DEA  0EFF               	movlw	255
  5385  001DEC  0100               	movlb	0	; () banked
  5386  001DEE  1B72               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5387  001DF0  0E01               	movlw	1
  5388  001DF2  0100               	movlb	0	; () banked
  5389  001DF4  2770               	addwf	___ftadd@f1& (0+255),f,b
  5390  001DF6  0E00               	movlw	0
  5391  001DF8  0100               	movlb	0	; () banked
  5392  001DFA  2371               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5393  001DFC  0E00               	movlw	0
  5394  001DFE  0100               	movlb	0	; () banked
  5395  001E00  2372               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5396  001E02                     l738:
  5397                           
  5398                           ; BSR set to: 0
  5399  001E02  0100               	movlb	0	; () banked
  5400  001E04  AD79               	btfss	___ftadd@sign& (0+255),6,b
  5401  001E06  D012               	goto	l3586
  5402                           
  5403                           ; BSR set to: 0
  5404  001E08  0EFF               	movlw	255
  5405  001E0A  0100               	movlb	0	; () banked
  5406  001E0C  1B73               	xorwf	___ftadd@f2& (0+255),f,b
  5407  001E0E  0EFF               	movlw	255
  5408  001E10  0100               	movlb	0	; () banked
  5409  001E12  1B74               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5410  001E14  0EFF               	movlw	255
  5411  001E16  0100               	movlb	0	; () banked
  5412  001E18  1B75               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5413  001E1A  0E01               	movlw	1
  5414  001E1C  0100               	movlb	0	; () banked
  5415  001E1E  2773               	addwf	___ftadd@f2& (0+255),f,b
  5416  001E20  0E00               	movlw	0
  5417  001E22  0100               	movlb	0	; () banked
  5418  001E24  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5419  001E26  0E00               	movlw	0
  5420  001E28  0100               	movlb	0	; () banked
  5421  001E2A  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5422  001E2C                     l3586:
  5423                           
  5424                           ; BSR set to: 0
  5425  001E2C  0E00               	movlw	0
  5426  001E2E  0100               	movlb	0	; () banked
  5427  001E30  6F79               	movwf	___ftadd@sign& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430  001E32  0100               	movlb	0	; () banked
  5431  001E34  5170               	movf	___ftadd@f1& (0+255),w,b
  5432  001E36  0100               	movlb	0	; () banked
  5433  001E38  2773               	addwf	___ftadd@f2& (0+255),f,b
  5434  001E3A  0100               	movlb	0	; () banked
  5435  001E3C  5171               	movf	(___ftadd@f1+1)& (0+255),w,b
  5436  001E3E  0100               	movlb	0	; () banked
  5437  001E40  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5438  001E42  0100               	movlb	0	; () banked
  5439  001E44  5172               	movf	(___ftadd@f1+2)& (0+255),w,b
  5440  001E46  0100               	movlb	0	; () banked
  5441  001E48  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5442                           
  5443                           ; BSR set to: 0
  5444  001E4A  0100               	movlb	0	; () banked
  5445  001E4C  AF75               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5446  001E4E  D015               	goto	l3596
  5447                           
  5448                           ; BSR set to: 0
  5449  001E50  0EFF               	movlw	255
  5450  001E52  0100               	movlb	0	; () banked
  5451  001E54  1B73               	xorwf	___ftadd@f2& (0+255),f,b
  5452  001E56  0EFF               	movlw	255
  5453  001E58  0100               	movlb	0	; () banked
  5454  001E5A  1B74               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5455  001E5C  0EFF               	movlw	255
  5456  001E5E  0100               	movlb	0	; () banked
  5457  001E60  1B75               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5458  001E62  0E01               	movlw	1
  5459  001E64  0100               	movlb	0	; () banked
  5460  001E66  2773               	addwf	___ftadd@f2& (0+255),f,b
  5461  001E68  0E00               	movlw	0
  5462  001E6A  0100               	movlb	0	; () banked
  5463  001E6C  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5464  001E6E  0E00               	movlw	0
  5465  001E70  0100               	movlb	0	; () banked
  5466  001E72  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5467                           
  5468                           ; BSR set to: 0
  5469  001E74  0E01               	movlw	1
  5470  001E76  0100               	movlb	0	; () banked
  5471  001E78  6F79               	movwf	___ftadd@sign& (0+255),b
  5472  001E7A                     l3596:
  5473                           
  5474                           ; BSR set to: 0
  5475  001E7A  C073  F014         	movff	___ftadd@f2,___ftpack@arg
  5476  001E7E  C074  F015         	movff	___ftadd@f2+1,___ftpack@arg+1
  5477  001E82  C075  F016         	movff	___ftadd@f2+2,___ftpack@arg+2
  5478  001E86  C07B  F017         	movff	___ftadd@exp1,___ftpack@exp
  5479  001E8A  C079  F018         	movff	___ftadd@sign,___ftpack@sign
  5480  001E8E  EC00  F015         	call	___ftpack	;wreg free
  5481  001E92  C014  F070         	movff	?___ftpack,?___ftadd
  5482  001E96  C015  F071         	movff	?___ftpack+1,?___ftadd+1
  5483  001E9A  C016  F072         	movff	?___ftpack+2,?___ftadd+2
  5484  001E9E  0012               	return	
  5485  001EA0                     __end_of___ftadd:
  5486                           	opt stack 0
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           intcon	equ	0xFF2
  5494                           postinc0	equ	0xFEE
  5495                           wreg	equ	0xFE8
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function ___ftneg *****************
  5503 ;; Defined at:
  5504 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  f1              3   19[COMRAM] float 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  3   19[COMRAM] float 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5518 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;Total ram usage:        3 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    3
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_printf
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text19
  5533  0031EA                     __ptext19:
  5534                           	opt stack 0
  5535  0031EA                     ___ftneg:
  5536                           	opt stack 26
  5537                           
  5538                           ;incstack = 0
  5539  0031EA  5014               	movf	___ftneg@f1,w,c
  5540  0031EC  1015               	iorwf	___ftneg@f1+1,w,c
  5541  0031EE  1016               	iorwf	___ftneg@f1+2,w,c
  5542  0031F0  B4D8               	btfsc	status,2,c
  5543  0031F2  D006               	goto	l788
  5544  0031F4  0E00               	movlw	0
  5545  0031F6  1A14               	xorwf	___ftneg@f1,f,c
  5546  0031F8  0E00               	movlw	0
  5547  0031FA  1A15               	xorwf	___ftneg@f1+1,f,c
  5548  0031FC  0E80               	movlw	128
  5549  0031FE  1A16               	xorwf	___ftneg@f1+2,f,c
  5550  003200                     l788:
  5551  003200  C014  F014         	movff	___ftneg@f1,?___ftneg
  5552  003204  C015  F015         	movff	___ftneg@f1+1,?___ftneg+1
  5553  003208  C016  F016         	movff	___ftneg@f1+2,?___ftneg+2
  5554  00320C  0012               	return		;funcret
  5555  00320E                     __end_of___ftneg:
  5556                           	opt stack 0
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           intcon	equ	0xFF2
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function ___ftge *****************
  5573 ;; Defined at:
  5574 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  ff1             3   19[COMRAM] float 
  5577 ;;  ff2             3   22[COMRAM] float 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;		None               void
  5582 ;; Registers used:
  5583 ;;		wreg, status,2, status,0
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5589 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;Total ram usage:        9 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    3
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_printf
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text20
  5604  002B4C                     __ptext20:
  5605                           	opt stack 0
  5606  002B4C                     ___ftge:
  5607                           	opt stack 26
  5608                           
  5609                           ;incstack = 0
  5610  002B4C  AE16               	btfss	___ftge@ff1+2,7,c
  5611  002B4E  D016               	goto	l2906
  5612  002B50  C014  F01A         	movff	___ftge@ff1,??___ftge
  5613  002B54  C015  F01B         	movff	___ftge@ff1+1,??___ftge+1
  5614  002B58  C016  F01C         	movff	___ftge@ff1+2,??___ftge+2
  5615  002B5C  1E1A               	comf	??___ftge,f,c
  5616  002B5E  1E1B               	comf	??___ftge+1,f,c
  5617  002B60  1E1C               	comf	??___ftge+2,f,c
  5618  002B62  2A1A               	incf	??___ftge,f,c
  5619  002B64  0E00               	movlw	0
  5620  002B66  221B               	addwfc	??___ftge+1,f,c
  5621  002B68  221C               	addwfc	??___ftge+2,f,c
  5622  002B6A  0E00               	movlw	0
  5623  002B6C  241A               	addwf	??___ftge,w,c
  5624  002B6E  6E14               	movwf	___ftge@ff1,c
  5625  002B70  0E00               	movlw	0
  5626  002B72  201B               	addwfc	??___ftge+1,w,c
  5627  002B74  6E15               	movwf	___ftge@ff1+1,c
  5628  002B76  0E80               	movlw	128
  5629  002B78  201C               	addwfc	??___ftge+2,w,c
  5630  002B7A  6E16               	movwf	___ftge@ff1+2,c
  5631  002B7C                     l2906:
  5632  002B7C  AE19               	btfss	___ftge@ff2+2,7,c
  5633  002B7E  D016               	goto	l2910
  5634  002B80  C017  F01A         	movff	___ftge@ff2,??___ftge
  5635  002B84  C018  F01B         	movff	___ftge@ff2+1,??___ftge+1
  5636  002B88  C019  F01C         	movff	___ftge@ff2+2,??___ftge+2
  5637  002B8C  1E1A               	comf	??___ftge,f,c
  5638  002B8E  1E1B               	comf	??___ftge+1,f,c
  5639  002B90  1E1C               	comf	??___ftge+2,f,c
  5640  002B92  2A1A               	incf	??___ftge,f,c
  5641  002B94  0E00               	movlw	0
  5642  002B96  221B               	addwfc	??___ftge+1,f,c
  5643  002B98  221C               	addwfc	??___ftge+2,f,c
  5644  002B9A  0E00               	movlw	0
  5645  002B9C  241A               	addwf	??___ftge,w,c
  5646  002B9E  6E17               	movwf	___ftge@ff2,c
  5647  002BA0  0E00               	movlw	0
  5648  002BA2  201B               	addwfc	??___ftge+1,w,c
  5649  002BA4  6E18               	movwf	___ftge@ff2+1,c
  5650  002BA6  0E80               	movlw	128
  5651  002BA8  201C               	addwfc	??___ftge+2,w,c
  5652  002BAA  6E19               	movwf	___ftge@ff2+2,c
  5653  002BAC                     l2910:
  5654  002BAC  0E00               	movlw	0
  5655  002BAE  1A14               	xorwf	___ftge@ff1,f,c
  5656  002BB0  0E00               	movlw	0
  5657  002BB2  1A15               	xorwf	___ftge@ff1+1,f,c
  5658  002BB4  0E80               	movlw	128
  5659  002BB6  1A16               	xorwf	___ftge@ff1+2,f,c
  5660  002BB8  0E00               	movlw	0
  5661  002BBA  1A17               	xorwf	___ftge@ff2,f,c
  5662  002BBC  0E00               	movlw	0
  5663  002BBE  1A18               	xorwf	___ftge@ff2+1,f,c
  5664  002BC0  0E80               	movlw	128
  5665  002BC2  1A19               	xorwf	___ftge@ff2+2,f,c
  5666  002BC4  5017               	movf	___ftge@ff2,w,c
  5667  002BC6  5C14               	subwf	___ftge@ff1,w,c
  5668  002BC8  5018               	movf	___ftge@ff2+1,w,c
  5669  002BCA  5815               	subwfb	___ftge@ff1+1,w,c
  5670  002BCC  5019               	movf	___ftge@ff2+2,w,c
  5671  002BCE  5816               	subwfb	___ftge@ff1+2,w,c
  5672  002BD0  B0D8               	btfsc	status,0,c
  5673  002BD2  D002               	goto	l2916
  5674  002BD4  90D8               	bcf	status,0,c
  5675  002BD6  0012               	return	
  5676  002BD8                     l2916:
  5677  002BD8  80D8               	bsf	status,0,c
  5678  002BDA  0012               	return	
  5679  002BDC                     __end_of___ftge:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           intcon	equ	0xFF2
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696 ;; *************** function _hdc1000_set_reg *****************
  5697 ;; Defined at:
  5698 ;;		line 56 in file "hdc1000.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  address         1    wreg     unsigned char 
  5701 ;;  value           2   40[COMRAM] unsigned int 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  address         1   42[COMRAM] unsigned char 
  5704 ;;  data            3   43[COMRAM] unsigned char [3]
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      void 
  5707 ;; Registers used:
  5708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;Total ram usage:        6 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    6
  5721 ;; This function calls:
  5722 ;;		_hdc1000_write
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text21
  5729  00319A                     __ptext21:
  5730                           	opt stack 0
  5731  00319A                     _hdc1000_set_reg:
  5732                           	opt stack 24
  5733                           
  5734                           ;incstack = 0
  5735                           ;hdc1000_set_reg@address stored from wreg
  5736  00319A  6E2B               	movwf	hdc1000_set_reg@address,c
  5737                           
  5738                           ;hdc1000.c: 58: uint8_t data[3] = {0, 0, 0};
  5739  00319C  C0B9  F02C         	movff	hdc1000_set_reg@F7137,hdc1000_set_reg@data
  5740  0031A0  C0BA  F02D         	movff	hdc1000_set_reg@F7137+1,hdc1000_set_reg@data+1
  5741  0031A4  C0BB  F02E         	movff	hdc1000_set_reg@F7137+2,hdc1000_set_reg@data+2
  5742                           
  5743                           ;hdc1000.c: 59: data[0] = address;
  5744  0031A8  C02B  F02C         	movff	hdc1000_set_reg@address,hdc1000_set_reg@data
  5745                           
  5746                           ;hdc1000.c: 61: data[1] = value >> 8;
  5747  0031AC  502A               	movf	hdc1000_set_reg@value+1,w,c
  5748  0031AE  6E2D               	movwf	hdc1000_set_reg@data+1,c
  5749                           
  5750                           ;hdc1000.c: 63: data[2] = value;
  5751  0031B0  C029  F02E         	movff	hdc1000_set_reg@value,hdc1000_set_reg@data+2
  5752                           
  5753                           ;hdc1000.c: 64: hdc1000_write(3, &data[0]);
  5754  0031B4  0E2C               	movlw	low hdc1000_set_reg@data
  5755  0031B6  6E24               	movwf	hdc1000_write@data_ptr,c
  5756  0031B8  0E00               	movlw	high hdc1000_set_reg@data
  5757  0031BA  6E25               	movwf	hdc1000_write@data_ptr+1,c
  5758  0031BC  0E03               	movlw	3
  5759  0031BE  EC58  F017         	call	_hdc1000_write
  5760  0031C2  0012               	return		;funcret
  5761  0031C4                     __end_of_hdc1000_set_reg:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           intcon	equ	0xFF2
  5770                           postinc0	equ	0xFEE
  5771                           wreg	equ	0xFE8
  5772                           postinc2	equ	0xFDE
  5773                           postdec2	equ	0xFDD
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function _hdc1000_get_temperature *****************
  5779 ;; Defined at:
  5780 ;;		line 78 in file "hdc1000.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;		None
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  data            2   44[COMRAM] unsigned char [2]
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  2   40[COMRAM] unsigned int 
  5787 ;; Registers used:
  5788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;Total ram usage:        6 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    6
  5801 ;; This function calls:
  5802 ;;		_hdc1000_read
  5803 ;;		_hdc1000_write
  5804 ;; This function is called by:
  5805 ;;		_main
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text22
  5810  002FD8                     __ptext22:
  5811                           	opt stack 0
  5812  002FD8                     _hdc1000_get_temperature:
  5813                           	opt stack 24
  5814                           
  5815                           ;hdc1000.c: 80: uint8_t data[2] = {0x00, 0};
  5816                           
  5817                           ;incstack = 0
  5818  002FD8  C0BC  F02D         	movff	hdc1000_get_temperature@F7143,hdc1000_get_temperature@data
  5819  002FDC  C0BD  F02E         	movff	hdc1000_get_temperature@F7143+1,hdc1000_get_temperature@data+1
  5820                           
  5821                           ;hdc1000.c: 82: hdc1000_write(1, &data[0]);
  5822  002FE0  0E2D               	movlw	low hdc1000_get_temperature@data
  5823  002FE2  6E24               	movwf	hdc1000_write@data_ptr,c
  5824  002FE4  0E00               	movlw	high hdc1000_get_temperature@data
  5825  002FE6  6E25               	movwf	hdc1000_write@data_ptr+1,c
  5826  002FE8  0E01               	movlw	1
  5827  002FEA  EC58  F017         	call	_hdc1000_write
  5828                           
  5829                           ;hdc1000.c: 84: _delay((unsigned long)((8)*(2000000/4000.0)));
  5830  002FEE  0E06               	movlw	6
  5831  002FF0  6E2B               	movwf	??_hdc1000_get_temperature& (0+255),c
  5832  002FF2  0E30               	movlw	48
  5833  002FF4                     u4427:
  5834  002FF4  2EE8               	decfsz	wreg,f,c
  5835  002FF6  D7FE               	bra	u4427
  5836  002FF8  2E2B               	decfsz	??_hdc1000_get_temperature& (0+255),f,c
  5837  002FFA  D7FC               	bra	u4427
  5838  002FFC  D000               	nop2	
  5839                           
  5840                           ;hdc1000.c: 85: hdc1000_read(2, &data[0]);
  5841  002FFE  0E2D               	movlw	low hdc1000_get_temperature@data
  5842  003000  6E24               	movwf	hdc1000_read@data_ptr,c
  5843  003002  0E00               	movlw	high hdc1000_get_temperature@data
  5844  003004  6E25               	movwf	hdc1000_read@data_ptr+1,c
  5845  003006  0E02               	movlw	2
  5846  003008  ECA2  F017         	call	_hdc1000_read
  5847                           
  5848                           ;hdc1000.c: 86: return (data[0] << 8) + data[1];
  5849  00300C  502D               	movf	hdc1000_get_temperature@data,w,c
  5850  00300E  6E2C               	movwf	(??_hdc1000_get_temperature+1)& (0+255),c
  5851  003010  6A2B               	clrf	??_hdc1000_get_temperature& (0+255),c
  5852  003012  502E               	movf	hdc1000_get_temperature@data+1,w,c
  5853  003014  242B               	addwf	??_hdc1000_get_temperature,w,c
  5854  003016  6E29               	movwf	?_hdc1000_get_temperature,c
  5855  003018  0E00               	movlw	0
  5856  00301A  202C               	addwfc	??_hdc1000_get_temperature+1,w,c
  5857  00301C  6E2A               	movwf	?_hdc1000_get_temperature+1,c
  5858  00301E  0012               	return	
  5859  003020                     __end_of_hdc1000_get_temperature:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _hdc1000_get_humidity *****************
  5877 ;; Defined at:
  5878 ;;		line 89 in file "hdc1000.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  data            2   44[COMRAM] unsigned char [2]
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  2   40[COMRAM] unsigned int 
  5885 ;; Registers used:
  5886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;Total ram usage:        6 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    6
  5899 ;; This function calls:
  5900 ;;		_hdc1000_read
  5901 ;;		_hdc1000_write
  5902 ;; This function is called by:
  5903 ;;		_main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text23
  5908  003020                     __ptext23:
  5909                           	opt stack 0
  5910  003020                     _hdc1000_get_humidity:
  5911                           	opt stack 24
  5912                           
  5913                           ;hdc1000.c: 91: uint8_t data[2] = {0X01, 0};
  5914                           
  5915                           ;incstack = 0
  5916  003020  C0CF  F02D         	movff	hdc1000_get_humidity@F7147,hdc1000_get_humidity@data
  5917  003024  C0D0  F02E         	movff	hdc1000_get_humidity@F7147+1,hdc1000_get_humidity@data+1
  5918                           
  5919                           ;hdc1000.c: 93: hdc1000_write(1, &data[0]);
  5920  003028  0E2D               	movlw	low hdc1000_get_humidity@data
  5921  00302A  6E24               	movwf	hdc1000_write@data_ptr,c
  5922  00302C  0E00               	movlw	high hdc1000_get_humidity@data
  5923  00302E  6E25               	movwf	hdc1000_write@data_ptr+1,c
  5924  003030  0E01               	movlw	1
  5925  003032  EC58  F017         	call	_hdc1000_write
  5926                           
  5927                           ;hdc1000.c: 95: _delay((unsigned long)((8)*(2000000/4000.0)));
  5928  003036  0E06               	movlw	6
  5929  003038  6E2B               	movwf	??_hdc1000_get_humidity& (0+255),c
  5930  00303A  0E30               	movlw	48
  5931  00303C                     u4437:
  5932  00303C  2EE8               	decfsz	wreg,f,c
  5933  00303E  D7FE               	bra	u4437
  5934  003040  2E2B               	decfsz	??_hdc1000_get_humidity& (0+255),f,c
  5935  003042  D7FC               	bra	u4437
  5936  003044  D000               	nop2	
  5937                           
  5938                           ;hdc1000.c: 96: hdc1000_read(2, &data[0]);
  5939  003046  0E2D               	movlw	low hdc1000_get_humidity@data
  5940  003048  6E24               	movwf	hdc1000_read@data_ptr,c
  5941  00304A  0E00               	movlw	high hdc1000_get_humidity@data
  5942  00304C  6E25               	movwf	hdc1000_read@data_ptr+1,c
  5943  00304E  0E02               	movlw	2
  5944  003050  ECA2  F017         	call	_hdc1000_read
  5945                           
  5946                           ;hdc1000.c: 97: return (data[0] << 8) + data[1];
  5947  003054  502D               	movf	hdc1000_get_humidity@data,w,c
  5948  003056  6E2C               	movwf	(??_hdc1000_get_humidity+1)& (0+255),c
  5949  003058  6A2B               	clrf	??_hdc1000_get_humidity& (0+255),c
  5950  00305A  502E               	movf	hdc1000_get_humidity@data+1,w,c
  5951  00305C  242B               	addwf	??_hdc1000_get_humidity,w,c
  5952  00305E  6E29               	movwf	?_hdc1000_get_humidity,c
  5953  003060  0E00               	movlw	0
  5954  003062  202C               	addwfc	??_hdc1000_get_humidity+1,w,c
  5955  003064  6E2A               	movwf	?_hdc1000_get_humidity+1,c
  5956  003066  0012               	return	
  5957  003068                     __end_of_hdc1000_get_humidity:
  5958                           	opt stack 0
  5959                           tblptru	equ	0xFF8
  5960                           tblptrh	equ	0xFF7
  5961                           tblptrl	equ	0xFF6
  5962                           tablat	equ	0xFF5
  5963                           prodh	equ	0xFF4
  5964                           prodl	equ	0xFF3
  5965                           intcon	equ	0xFF2
  5966                           postinc0	equ	0xFEE
  5967                           wreg	equ	0xFE8
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _hdc1000_write *****************
  5975 ;; Defined at:
  5976 ;;		line 38 in file "hdc1000.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  length          1    wreg     unsigned char 
  5979 ;;  data_ptr        2   35[COMRAM] PTR unsigned char 
  5980 ;;		 -> hdc1000_get_everything@data(4), hdc1000_get_humidity@data(2), hdc1000_get_temperature@data(2), hdc1000_get_reg@d
      +ata(2), 
  5981 ;;		 -> hdc1000_set_reg@data(3), 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  length          1   37[COMRAM] unsigned char 
  5984 ;;  status          1   39[COMRAM] enum E6990
  5985 ;;  time_out        1   38[COMRAM] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;Total ram usage:        5 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    5
  6002 ;; This function calls:
  6003 ;;		_I2C1_MasterWrite
  6004 ;; This function is called by:
  6005 ;;		_hdc1000_set_reg
  6006 ;;		_hdc1000_get_temperature
  6007 ;;		_hdc1000_get_humidity
  6008 ;;		_hdc1000_get_reg
  6009 ;;		_hdc1000_get_everything
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text24
  6014  002EB0                     __ptext24:
  6015                           	opt stack 0
  6016  002EB0                     _hdc1000_write:
  6017                           	opt stack 24
  6018                           
  6019                           ;incstack = 0
  6020                           ;hdc1000_write@length stored from wreg
  6021  002EB0  6E26               	movwf	hdc1000_write@length,c
  6022                           
  6023                           ;hdc1000.c: 42: I2C1_MESSAGE_STATUS status = -1;
  6024  002EB2  6828               	setf	hdc1000_write@status,c
  6025                           
  6026                           ;hdc1000.c: 43: uint8_t time_out = 0;
  6027  002EB4  0E00               	movlw	0
  6028  002EB6  6E27               	movwf	hdc1000_write@time_out,c
  6029                           
  6030                           ;hdc1000.c: 45: while (status != I2C1_MESSAGE_FAIL && status != I2C1_MESSAGE_COMPLETE &&
      +                           time_out != 5)
  6031  002EB8  D015               	goto	l2700
  6032  002EBA                     l2694:
  6033                           
  6034                           ;hdc1000.c: 47: {
  6035                           ;hdc1000.c: 48: I2C1_MasterWrite(data_ptr, length, 0x40, &status);
  6036  002EBA  C024  F01D         	movff	hdc1000_write@data_ptr,I2C1_MasterWrite@pdata
  6037  002EBE  C025  F01E         	movff	hdc1000_write@data_ptr+1,I2C1_MasterWrite@pdata+1
  6038  002EC2  C026  F01F         	movff	hdc1000_write@length,I2C1_MasterWrite@length
  6039  002EC6  0E00               	movlw	0
  6040  002EC8  6E21               	movwf	I2C1_MasterWrite@address+1,c
  6041  002ECA  0E40               	movlw	64
  6042  002ECC  6E20               	movwf	I2C1_MasterWrite@address,c
  6043  002ECE  0E28               	movlw	low hdc1000_write@status
  6044  002ED0  6E22               	movwf	I2C1_MasterWrite@pflag,c
  6045  002ED2  0E00               	movlw	high hdc1000_write@status
  6046  002ED4  6E23               	movwf	I2C1_MasterWrite@pflag+1,c
  6047  002ED6  EC7D  F017         	call	_I2C1_MasterWrite	;wreg free
  6048  002EDA                     l2696:
  6049  002EDA  0E02               	movlw	2
  6050  002EDC  1828               	xorwf	hdc1000_write@status,w,c
  6051  002EDE  B4D8               	btfsc	status,2,c
  6052  002EE0  D7FC               	goto	l2696
  6053                           
  6054                           ;hdc1000.c: 52: time_out++;
  6055  002EE2  2A27               	incf	hdc1000_write@time_out,f,c
  6056  002EE4                     l2700:
  6057  002EE4  0428               	decf	hdc1000_write@status,w,c
  6058  002EE6  B4D8               	btfsc	status,2,c
  6059  002EE8  0012               	return	
  6060  002EEA  5028               	movf	hdc1000_write@status,w,c
  6061  002EEC  B4D8               	btfsc	status,2,c
  6062  002EEE  0012               	return	
  6063  002EF0  0E05               	movlw	5
  6064  002EF2  1827               	xorwf	hdc1000_write@time_out,w,c
  6065  002EF4  B4D8               	btfsc	status,2,c
  6066  002EF6  0012               	return	
  6067  002EF8  D7E0               	goto	l2694
  6068  002EFA                     __end_of_hdc1000_write:
  6069                           	opt stack 0
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _I2C1_MasterWrite *****************
  6086 ;; Defined at:
  6087 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  pdata           2   28[COMRAM] PTR unsigned char 
  6090 ;;		 -> hdc1000_get_everything@data(4), hdc1000_get_humidity@data(2), hdc1000_get_temperature@data(2), hdc1000_get_reg@d
      +ata(2), 
  6091 ;;		 -> hdc1000_set_reg@data(3), 
  6092 ;;  length          1   30[COMRAM] unsigned char 
  6093 ;;  address         2   31[COMRAM] unsigned int 
  6094 ;;  pflag           2   33[COMRAM] PTR enum E6981
  6095 ;;		 -> hdc1000_write@status(1), 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6107 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;Total ram usage:        7 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    4
  6114 ;; This function calls:
  6115 ;;		_I2C1_MasterTRBInsert
  6116 ;;		_I2C1_MasterWriteTRBBuild
  6117 ;; This function is called by:
  6118 ;;		_hdc1000_write
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text25
  6123  002EFA                     __ptext25:
  6124                           	opt stack 0
  6125  002EFA                     _I2C1_MasterWrite:
  6126                           	opt stack 24
  6127                           
  6128                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  6129                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  6130                           
  6131                           ;incstack = 0
  6132  002EFA  B03D               	btfsc	_i2c1_object+4,0,c
  6133  002EFC  D01C               	goto	l2400
  6134                           
  6135                           ;i2c1.c: 608: {
  6136                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  6137  002EFE  0EC5               	movlw	low I2C1_MasterWrite@trBlock
  6138  002F00  6E14               	movwf	I2C1_MasterWriteTRBBuild@ptrb,c
  6139  002F02  0E00               	movlw	high I2C1_MasterWrite@trBlock
  6140  002F04  6E15               	movwf	I2C1_MasterWriteTRBBuild@ptrb+1,c
  6141  002F06  C01D  F016         	movff	I2C1_MasterWrite@pdata,I2C1_MasterWriteTRBBuild@pdata
  6142  002F0A  C01E  F017         	movff	I2C1_MasterWrite@pdata+1,I2C1_MasterWriteTRBBuild@pdata+1
  6143  002F0E  C01F  F018         	movff	I2C1_MasterWrite@length,I2C1_MasterWriteTRBBuild@length
  6144  002F12  C020  F019         	movff	I2C1_MasterWrite@address,I2C1_MasterWriteTRBBuild@address
  6145  002F16  C021  F01A         	movff	I2C1_MasterWrite@address+1,I2C1_MasterWriteTRBBuild@address+1
  6146  002F1A  EC34  F018         	call	_I2C1_MasterWriteTRBBuild	;wreg free
  6147                           
  6148                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  6149  002F1E  0EC5               	movlw	low I2C1_MasterWrite@trBlock
  6150  002F20  6E14               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  6151  002F22  0E00               	movlw	high I2C1_MasterWrite@trBlock
  6152  002F24  6E15               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  6153  002F26  C022  F016         	movff	I2C1_MasterWrite@pflag,I2C1_MasterTRBInsert@pflag
  6154  002F2A  C023  F017         	movff	I2C1_MasterWrite@pflag+1,I2C1_MasterTRBInsert@pflag+1
  6155  002F2E  0E01               	movlw	1
  6156  002F30  EC57  F015         	call	_I2C1_MasterTRBInsert
  6157                           
  6158                           ;i2c1.c: 611: }
  6159  002F34  0012               	return	
  6160  002F36                     l2400:
  6161                           
  6162                           ;i2c1.c: 612: else
  6163                           ;i2c1.c: 613: {
  6164                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  6165  002F36  C022  FFD9         	movff	I2C1_MasterWrite@pflag,fsr2l
  6166  002F3A  C023  FFDA         	movff	I2C1_MasterWrite@pflag+1,fsr2h
  6167  002F3E  0E01               	movlw	1
  6168  002F40  6EDF               	movwf	indf2,c
  6169  002F42  0012               	return	
  6170  002F44                     __end_of_I2C1_MasterWrite:
  6171                           	opt stack 0
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           postinc0	equ	0xFEE
  6180                           wreg	equ	0xFE8
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  6189 ;; Defined at:
  6190 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  ptrb            2   19[COMRAM] PTR struct .
  6193 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  6194 ;;  pdata           2   21[COMRAM] PTR unsigned char 
  6195 ;;		 -> hdc1000_get_everything@data(4), hdc1000_get_humidity@data(2), hdc1000_get_temperature@data(2), hdc1000_get_reg@d
      +ata(2), 
  6196 ;;		 -> hdc1000_set_reg@data(3), 
  6197 ;;  length          1   23[COMRAM] unsigned char 
  6198 ;;  address         2   24[COMRAM] unsigned int 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        9 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    3
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_I2C1_MasterWrite
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text26
  6225  003068                     __ptext26:
  6226                           	opt stack 0
  6227  003068                     _I2C1_MasterWriteTRBBuild:
  6228                           	opt stack 24
  6229                           
  6230                           ;i2c1.c: 713: ptrb->address = address << 1;
  6231                           
  6232                           ;incstack = 0
  6233  003068  C019  F01B         	movff	I2C1_MasterWriteTRBBuild@address,??_I2C1_MasterWriteTRBBuild
  6234  00306C  C01A  F01C         	movff	I2C1_MasterWriteTRBBuild@address+1,??_I2C1_MasterWriteTRBBuild+1
  6235  003070  90D8               	bcf	status,0,c
  6236  003072  361B               	rlcf	??_I2C1_MasterWriteTRBBuild,f,c
  6237  003074  361C               	rlcf	??_I2C1_MasterWriteTRBBuild+1,f,c
  6238  003076  C014  FFD9         	movff	I2C1_MasterWriteTRBBuild@ptrb,fsr2l
  6239  00307A  C015  FFDA         	movff	I2C1_MasterWriteTRBBuild@ptrb+1,fsr2h
  6240  00307E  C01B  FFDE         	movff	??_I2C1_MasterWriteTRBBuild,postinc2
  6241  003082  C01C  FFDD         	movff	??_I2C1_MasterWriteTRBBuild+1,postdec2
  6242                           
  6243                           ;i2c1.c: 714: ptrb->length = length;
  6244  003086  EE20 F002          	lfsr	2,2
  6245  00308A  5014               	movf	I2C1_MasterWriteTRBBuild@ptrb,w,c
  6246  00308C  26D9               	addwf	fsr2l,f,c
  6247  00308E  5015               	movf	I2C1_MasterWriteTRBBuild@ptrb+1,w,c
  6248  003090  22DA               	addwfc	fsr2h,f,c
  6249  003092  C018  FFDF         	movff	I2C1_MasterWriteTRBBuild@length,indf2
  6250                           
  6251                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  6252  003096  EE20 F003          	lfsr	2,3
  6253  00309A  5014               	movf	I2C1_MasterWriteTRBBuild@ptrb,w,c
  6254  00309C  26D9               	addwf	fsr2l,f,c
  6255  00309E  5015               	movf	I2C1_MasterWriteTRBBuild@ptrb+1,w,c
  6256  0030A0  22DA               	addwfc	fsr2h,f,c
  6257  0030A2  C016  FFDE         	movff	I2C1_MasterWriteTRBBuild@pdata,postinc2
  6258  0030A6  C017  FFDD         	movff	I2C1_MasterWriteTRBBuild@pdata+1,postdec2
  6259  0030AA  0012               	return		;funcret
  6260  0030AC                     __end_of_I2C1_MasterWriteTRBBuild:
  6261                           	opt stack 0
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           indf2	equ	0xFDF
  6272                           postinc2	equ	0xFDE
  6273                           postdec2	equ	0xFDD
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _hdc1000_read *****************
  6279 ;; Defined at:
  6280 ;;		line 20 in file "hdc1000.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  length          1    wreg     unsigned char 
  6283 ;;  data_ptr        2   35[COMRAM] PTR unsigned char 
  6284 ;;		 -> hdc1000_get_everything@data(4), hdc1000_get_humidity@data(2), hdc1000_get_temperature@data(2), hdc1000_get_reg@d
      +ata(2), 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  length          1   37[COMRAM] unsigned char 
  6287 ;;  status          1   39[COMRAM] enum E6990
  6288 ;;  time_out        1   38[COMRAM] unsigned char 
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;Total ram usage:        5 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    5
  6305 ;; This function calls:
  6306 ;;		_I2C1_MasterRead
  6307 ;; This function is called by:
  6308 ;;		_hdc1000_get_temperature
  6309 ;;		_hdc1000_get_humidity
  6310 ;;		_hdc1000_get_reg
  6311 ;;		_hdc1000_get_everything
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text27
  6316  002F44                     __ptext27:
  6317                           	opt stack 0
  6318  002F44                     _hdc1000_read:
  6319                           	opt stack 24
  6320                           
  6321                           ;incstack = 0
  6322                           ;hdc1000_read@length stored from wreg
  6323  002F44  6E26               	movwf	hdc1000_read@length,c
  6324                           
  6325                           ;hdc1000.c: 24: I2C1_MESSAGE_STATUS status = -1;
  6326  002F46  6828               	setf	hdc1000_read@status,c
  6327                           
  6328                           ;hdc1000.c: 25: uint8_t time_out = 0;
  6329  002F48  0E00               	movlw	0
  6330  002F4A  6E27               	movwf	hdc1000_read@time_out,c
  6331                           
  6332                           ;hdc1000.c: 27: while (status != I2C1_MESSAGE_FAIL && status != I2C1_MESSAGE_COMPLETE &&
      +                           time_out != 5)
  6333  002F4C  D015               	goto	l2684
  6334  002F4E                     l2678:
  6335                           
  6336                           ;hdc1000.c: 29: {
  6337                           ;hdc1000.c: 30: I2C1_MasterRead(data_ptr, length, 0x40, &status);
  6338  002F4E  C024  F01D         	movff	hdc1000_read@data_ptr,I2C1_MasterRead@pdata
  6339  002F52  C025  F01E         	movff	hdc1000_read@data_ptr+1,I2C1_MasterRead@pdata+1
  6340  002F56  C026  F01F         	movff	hdc1000_read@length,I2C1_MasterRead@length
  6341  002F5A  0E00               	movlw	0
  6342  002F5C  6E21               	movwf	I2C1_MasterRead@address+1,c
  6343  002F5E  0E40               	movlw	64
  6344  002F60  6E20               	movwf	I2C1_MasterRead@address,c
  6345  002F62  0E28               	movlw	low hdc1000_read@status
  6346  002F64  6E22               	movwf	I2C1_MasterRead@pflag,c
  6347  002F66  0E00               	movlw	high hdc1000_read@status
  6348  002F68  6E23               	movwf	I2C1_MasterRead@pflag+1,c
  6349  002F6A  ECC7  F017         	call	_I2C1_MasterRead	;wreg free
  6350  002F6E                     l2680:
  6351  002F6E  0E02               	movlw	2
  6352  002F70  1828               	xorwf	hdc1000_read@status,w,c
  6353  002F72  B4D8               	btfsc	status,2,c
  6354  002F74  D7FC               	goto	l2680
  6355                           
  6356                           ;hdc1000.c: 34: time_out++;
  6357  002F76  2A27               	incf	hdc1000_read@time_out,f,c
  6358  002F78                     l2684:
  6359  002F78  0428               	decf	hdc1000_read@status,w,c
  6360  002F7A  B4D8               	btfsc	status,2,c
  6361  002F7C  0012               	return	
  6362  002F7E  5028               	movf	hdc1000_read@status,w,c
  6363  002F80  B4D8               	btfsc	status,2,c
  6364  002F82  0012               	return	
  6365  002F84  0E05               	movlw	5
  6366  002F86  1827               	xorwf	hdc1000_read@time_out,w,c
  6367  002F88  B4D8               	btfsc	status,2,c
  6368  002F8A  0012               	return	
  6369  002F8C  D7E0               	goto	l2678
  6370  002F8E                     __end_of_hdc1000_read:
  6371                           	opt stack 0
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           prodh	equ	0xFF4
  6377                           prodl	equ	0xFF3
  6378                           intcon	equ	0xFF2
  6379                           postinc0	equ	0xFEE
  6380                           wreg	equ	0xFE8
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function _I2C1_MasterRead *****************
  6389 ;; Defined at:
  6390 ;;		line 619 in file "mcc_generated_files/i2c1.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  pdata           2   28[COMRAM] PTR unsigned char 
  6393 ;;		 -> hdc1000_get_everything@data(4), hdc1000_get_humidity@data(2), hdc1000_get_temperature@data(2), hdc1000_get_reg@d
      +ata(2), 
  6394 ;;  length          1   30[COMRAM] unsigned char 
  6395 ;;  address         2   31[COMRAM] unsigned int 
  6396 ;;  pflag           2   33[COMRAM] PTR enum E6981
  6397 ;;		 -> hdc1000_read@status(1), 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6409 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;Total ram usage:        7 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    4
  6416 ;; This function calls:
  6417 ;;		_I2C1_MasterReadTRBBuild
  6418 ;;		_I2C1_MasterTRBInsert
  6419 ;; This function is called by:
  6420 ;;		_hdc1000_read
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text28
  6425  002F8E                     __ptext28:
  6426                           	opt stack 0
  6427  002F8E                     _I2C1_MasterRead:
  6428                           	opt stack 24
  6429                           
  6430                           ;i2c1.c: 625: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  6431                           ;i2c1.c: 629: if (i2c1_object.trStatus.s.full != 1)
  6432                           
  6433                           ;incstack = 0
  6434  002F8E  B03D               	btfsc	_i2c1_object+4,0,c
  6435  002F90  D01C               	goto	l2406
  6436                           
  6437                           ;i2c1.c: 630: {
  6438                           ;i2c1.c: 631: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  6439  002F92  0EC0               	movlw	low I2C1_MasterRead@trBlock
  6440  002F94  6E14               	movwf	I2C1_MasterReadTRBBuild@ptrb,c
  6441  002F96  0E00               	movlw	high I2C1_MasterRead@trBlock
  6442  002F98  6E15               	movwf	I2C1_MasterReadTRBBuild@ptrb+1,c
  6443  002F9A  C01D  F016         	movff	I2C1_MasterRead@pdata,I2C1_MasterReadTRBBuild@pdata
  6444  002F9E  C01E  F017         	movff	I2C1_MasterRead@pdata+1,I2C1_MasterReadTRBBuild@pdata+1
  6445  002FA2  C01F  F018         	movff	I2C1_MasterRead@length,I2C1_MasterReadTRBBuild@length
  6446  002FA6  C020  F019         	movff	I2C1_MasterRead@address,I2C1_MasterReadTRBBuild@address
  6447  002FAA  C021  F01A         	movff	I2C1_MasterRead@address+1,I2C1_MasterReadTRBBuild@address+1
  6448  002FAE  EC0A  F017         	call	_I2C1_MasterReadTRBBuild	;wreg free
  6449                           
  6450                           ;i2c1.c: 632: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  6451  002FB2  0EC0               	movlw	low I2C1_MasterRead@trBlock
  6452  002FB4  6E14               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  6453  002FB6  0E00               	movlw	high I2C1_MasterRead@trBlock
  6454  002FB8  6E15               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  6455  002FBA  C022  F016         	movff	I2C1_MasterRead@pflag,I2C1_MasterTRBInsert@pflag
  6456  002FBE  C023  F017         	movff	I2C1_MasterRead@pflag+1,I2C1_MasterTRBInsert@pflag+1
  6457  002FC2  0E01               	movlw	1
  6458  002FC4  EC57  F015         	call	_I2C1_MasterTRBInsert
  6459                           
  6460                           ;i2c1.c: 633: }
  6461  002FC8  0012               	return	
  6462  002FCA                     l2406:
  6463                           
  6464                           ;i2c1.c: 634: else
  6465                           ;i2c1.c: 635: {
  6466                           ;i2c1.c: 636: *pflag = I2C1_MESSAGE_FAIL;
  6467  002FCA  C022  FFD9         	movff	I2C1_MasterRead@pflag,fsr2l
  6468  002FCE  C023  FFDA         	movff	I2C1_MasterRead@pflag+1,fsr2h
  6469  002FD2  0E01               	movlw	1
  6470  002FD4  6EDF               	movwf	indf2,c
  6471  002FD6  0012               	return	
  6472  002FD8                     __end_of_I2C1_MasterRead:
  6473                           	opt stack 0
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _I2C1_MasterTRBInsert *****************
  6491 ;; Defined at:
  6492 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  count           1    wreg     unsigned char 
  6495 ;;  ptrb_list       2   19[COMRAM] PTR struct .
  6496 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  6497 ;;  pflag           2   21[COMRAM] PTR enum E6981
  6498 ;;		 -> hdc1000_write@status(1), hdc1000_read@status(1), 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  count           1   24[COMRAM] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  1    wreg      void 
  6503 ;; Registers used:
  6504 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;Total ram usage:        6 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    3
  6517 ;; This function calls:
  6518 ;;		Nothing
  6519 ;; This function is called by:
  6520 ;;		_I2C1_MasterWrite
  6521 ;;		_I2C1_MasterRead
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	text29
  6526  002AAE                     __ptext29:
  6527                           	opt stack 0
  6528  002AAE                     _I2C1_MasterTRBInsert:
  6529                           	opt stack 24
  6530                           
  6531                           ;incstack = 0
  6532                           ;I2C1_MasterTRBInsert@count stored from wreg
  6533  002AAE  6E19               	movwf	I2C1_MasterTRBInsert@count,c
  6534                           
  6535                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  6536  002AB0  B03D               	btfsc	_i2c1_object+4,0,c
  6537  002AB2  D039               	goto	l2344
  6538                           
  6539                           ;i2c1.c: 649: {
  6540                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  6541  002AB4  C016  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
  6542  002AB8  C017  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
  6543  002ABC  0E02               	movlw	2
  6544  002ABE  6EDF               	movwf	indf2,c
  6545                           
  6546                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  6547  002AC0  EE20 F001          	lfsr	2,1
  6548  002AC4  5039               	movf	_i2c1_object,w,c
  6549  002AC6  26D9               	addwf	fsr2l,f,c
  6550  002AC8  503A               	movf	_i2c1_object+1,w,c
  6551  002ACA  22DA               	addwfc	fsr2h,f,c
  6552  002ACC  C014  FFDE         	movff	I2C1_MasterTRBInsert@ptrb_list,postinc2
  6553  002AD0  C015  FFDD         	movff	I2C1_MasterTRBInsert@ptrb_list+1,postdec2
  6554                           
  6555                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  6556  002AD4  C039  FFD9         	movff	_i2c1_object,fsr2l
  6557  002AD8  C03A  FFDA         	movff	_i2c1_object+1,fsr2h
  6558  002ADC  C019  FFDF         	movff	I2C1_MasterTRBInsert@count,indf2
  6559                           
  6560                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  6561  002AE0  EE20 F003          	lfsr	2,3
  6562  002AE4  5039               	movf	_i2c1_object,w,c
  6563  002AE6  26D9               	addwf	fsr2l,f,c
  6564  002AE8  503A               	movf	_i2c1_object+1,w,c
  6565  002AEA  22DA               	addwfc	fsr2h,f,c
  6566  002AEC  C016  FFDE         	movff	I2C1_MasterTRBInsert@pflag,postinc2
  6567  002AF0  C017  FFDD         	movff	I2C1_MasterTRBInsert@pflag+1,postdec2
  6568                           
  6569                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  6570  002AF4  0E05               	movlw	5
  6571  002AF6  2639               	addwf	_i2c1_object,f,c
  6572  002AF8  0E00               	movlw	0
  6573  002AFA  223A               	addwfc	_i2c1_object+1,f,c
  6574                           
  6575                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  6576  002AFC  0ECF               	movlw	low (_i2c1_tr_queue+5)
  6577  002AFE  1839               	xorwf	_i2c1_object,w,c
  6578  002B00  E108               	bnz	l2340
  6579  002B02  0E00               	movlw	high (_i2c1_tr_queue+5)
  6580  002B04  183A               	xorwf	_i2c1_object+1,w,c
  6581  002B06  A4D8               	btfss	status,2,c
  6582  002B08  D004               	goto	l2340
  6583                           
  6584                           ;i2c1.c: 659: {
  6585                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  6586  002B0A  0ECA               	movlw	low _i2c1_tr_queue
  6587  002B0C  6E39               	movwf	_i2c1_object,c
  6588  002B0E  0E00               	movlw	high _i2c1_tr_queue
  6589  002B10  6E3A               	movwf	_i2c1_object+1,c
  6590  002B12                     l2340:
  6591                           
  6592                           ;i2c1.c: 662: }
  6593                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  6594  002B12  923D               	bcf	_i2c1_object+4,1,c
  6595                           
  6596                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  6597  002B14  5039               	movf	_i2c1_object,w,c
  6598  002B16  183B               	xorwf	_i2c1_object+2,w,c
  6599  002B18  E10C               	bnz	l2346
  6600  002B1A  503A               	movf	_i2c1_object+1,w,c
  6601  002B1C  183C               	xorwf	_i2c1_object+3,w,c
  6602  002B1E  A4D8               	btfss	status,2,c
  6603  002B20  D008               	goto	l2346
  6604                           
  6605                           ;i2c1.c: 670: {
  6606                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  6607  002B22  803D               	bsf	_i2c1_object+4,0,c
  6608                           
  6609                           ;i2c1.c: 673: }
  6610                           ;i2c1.c: 675: }
  6611  002B24  D006               	goto	l2346
  6612  002B26                     l2344:
  6613                           
  6614                           ;i2c1.c: 676: else
  6615                           ;i2c1.c: 677: {
  6616                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  6617  002B26  C016  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
  6618  002B2A  C017  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
  6619  002B2E  0E01               	movlw	1
  6620  002B30  6EDF               	movwf	indf2,c
  6621  002B32                     l2346:
  6622                           
  6623                           ;i2c1.c: 679: }
  6624                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  6625  002B32  C016  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
  6626  002B36  C017  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
  6627  002B3A  0E02               	movlw	2
  6628  002B3C  18DE               	xorwf	postinc2,w,c
  6629  002B3E  A4D8               	btfss	status,2,c
  6630  002B40  0012               	return	
  6631  002B42                     l2350:
  6632  002B42  5049               	movf	_i2c1_state,w,c
  6633  002B44  A4D8               	btfss	status,2,c
  6634  002B46  D7FD               	goto	l2350
  6635                           
  6636                           ;i2c1.c: 685: {
  6637                           ;i2c1.c: 688: PIR1bits.SSP1IF = 1;
  6638  002B48  869E               	bsf	3998,3,c	;volatile
  6639  002B4A  0012               	return	
  6640  002B4C                     __end_of_I2C1_MasterTRBInsert:
  6641                           	opt stack 0
  6642                           tblptru	equ	0xFF8
  6643                           tblptrh	equ	0xFF7
  6644                           tblptrl	equ	0xFF6
  6645                           tablat	equ	0xFF5
  6646                           prodh	equ	0xFF4
  6647                           prodl	equ	0xFF3
  6648                           intcon	equ	0xFF2
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           indf2	equ	0xFDF
  6652                           postinc2	equ	0xFDE
  6653                           postdec2	equ	0xFDD
  6654                           fsr2h	equ	0xFDA
  6655                           fsr2l	equ	0xFD9
  6656                           status	equ	0xFD8
  6657                           
  6658 ;; *************** function _I2C1_MasterReadTRBBuild *****************
  6659 ;; Defined at:
  6660 ;;		line 694 in file "mcc_generated_files/i2c1.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  ptrb            2   19[COMRAM] PTR struct .
  6663 ;;		 -> I2C1_MasterRead@trBlock(5), 
  6664 ;;  pdata           2   21[COMRAM] PTR unsigned char 
  6665 ;;		 -> hdc1000_get_everything@data(4), hdc1000_get_humidity@data(2), hdc1000_get_temperature@data(2), hdc1000_get_reg@d
      +ata(2), 
  6666 ;;  length          1   23[COMRAM] unsigned char 
  6667 ;;  address         2   24[COMRAM] unsigned int 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;		None
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6679 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;Total ram usage:        9 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    3
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_I2C1_MasterRead
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text30
  6694  002E14                     __ptext30:
  6695                           	opt stack 0
  6696  002E14                     _I2C1_MasterReadTRBBuild:
  6697                           	opt stack 24
  6698                           
  6699                           ;i2c1.c: 700: ptrb->address = address << 1;
  6700                           
  6701                           ;incstack = 0
  6702  002E14  C019  F01B         	movff	I2C1_MasterReadTRBBuild@address,??_I2C1_MasterReadTRBBuild
  6703  002E18  C01A  F01C         	movff	I2C1_MasterReadTRBBuild@address+1,??_I2C1_MasterReadTRBBuild+1
  6704  002E1C  90D8               	bcf	status,0,c
  6705  002E1E  361B               	rlcf	??_I2C1_MasterReadTRBBuild,f,c
  6706  002E20  361C               	rlcf	??_I2C1_MasterReadTRBBuild+1,f,c
  6707  002E22  C014  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
  6708  002E26  C015  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
  6709  002E2A  C01B  FFDE         	movff	??_I2C1_MasterReadTRBBuild,postinc2
  6710  002E2E  C01C  FFDD         	movff	??_I2C1_MasterReadTRBBuild+1,postdec2
  6711                           
  6712                           ;i2c1.c: 702: ptrb->address |= 0x01;
  6713  002E32  C014  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
  6714  002E36  C015  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
  6715  002E3A  0E00               	movlw	0
  6716  002E3C  80DB               	bsf	plusw2,0,c
  6717                           
  6718                           ;i2c1.c: 703: ptrb->length = length;
  6719  002E3E  EE20 F002          	lfsr	2,2
  6720  002E42  5014               	movf	I2C1_MasterReadTRBBuild@ptrb,w,c
  6721  002E44  26D9               	addwf	fsr2l,f,c
  6722  002E46  5015               	movf	I2C1_MasterReadTRBBuild@ptrb+1,w,c
  6723  002E48  22DA               	addwfc	fsr2h,f,c
  6724  002E4A  C018  FFDF         	movff	I2C1_MasterReadTRBBuild@length,indf2
  6725                           
  6726                           ;i2c1.c: 704: ptrb->pbuffer = pdata;
  6727  002E4E  EE20 F003          	lfsr	2,3
  6728  002E52  5014               	movf	I2C1_MasterReadTRBBuild@ptrb,w,c
  6729  002E54  26D9               	addwf	fsr2l,f,c
  6730  002E56  5015               	movf	I2C1_MasterReadTRBBuild@ptrb+1,w,c
  6731  002E58  22DA               	addwfc	fsr2h,f,c
  6732  002E5A  C016  FFDE         	movff	I2C1_MasterReadTRBBuild@pdata,postinc2
  6733  002E5E  C017  FFDD         	movff	I2C1_MasterReadTRBBuild@pdata+1,postdec2
  6734  002E62  0012               	return		;funcret
  6735  002E64                     __end_of_I2C1_MasterReadTRBBuild:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           postdec2	equ	0xFDD
  6749                           plusw2	equ	0xFDB
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function ___lwtoft *****************
  6755 ;; Defined at:
  6756 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  c               2   27[COMRAM] unsigned int 
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  3   27[COMRAM] float 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        3 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    4
  6777 ;; This function calls:
  6778 ;;		___ftpack
  6779 ;; This function is called by:
  6780 ;;		_main
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text31
  6785  00320E                     __ptext31:
  6786                           	opt stack 0
  6787  00320E                     ___lwtoft:
  6788                           	opt stack 26
  6789                           
  6790                           ;incstack = 0
  6791  00320E  C01C  F014         	movff	___lwtoft@c,___ftpack@arg
  6792  003212  C01D  F015         	movff	___lwtoft@c+1,___ftpack@arg+1
  6793  003216  6A16               	clrf	___ftpack@arg+2,c
  6794  003218  0E8E               	movlw	142
  6795  00321A  6E17               	movwf	___ftpack@exp,c
  6796  00321C  0E00               	movlw	0
  6797  00321E  6E18               	movwf	___ftpack@sign,c
  6798  003220  EC00  F015         	call	___ftpack	;wreg free
  6799  003224  C014  F01C         	movff	?___ftpack,?___lwtoft
  6800  003228  C015  F01D         	movff	?___ftpack+1,?___lwtoft+1
  6801  00322C  C016  F01E         	movff	?___ftpack+2,?___lwtoft+2
  6802  003230  0012               	return	
  6803  003232                     __end_of___lwtoft:
  6804                           	opt stack 0
  6805                           tblptru	equ	0xFF8
  6806                           tblptrh	equ	0xFF7
  6807                           tblptrl	equ	0xFF6
  6808                           tablat	equ	0xFF5
  6809                           prodh	equ	0xFF4
  6810                           prodl	equ	0xFF3
  6811                           intcon	equ	0xFF2
  6812                           postinc0	equ	0xFEE
  6813                           wreg	equ	0xFE8
  6814                           indf2	equ	0xFDF
  6815                           postinc2	equ	0xFDE
  6816                           postdec2	equ	0xFDD
  6817                           plusw2	equ	0xFDB
  6818                           fsr2h	equ	0xFDA
  6819                           fsr2l	equ	0xFD9
  6820                           status	equ	0xFD8
  6821                           
  6822 ;; *************** function ___ftdiv *****************
  6823 ;; Defined at:
  6824 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  f1              3   30[COMRAM] float 
  6827 ;;  f2              3   33[COMRAM] float 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  f3              3   40[COMRAM] float 
  6830 ;;  sign            1   44[COMRAM] unsigned char 
  6831 ;;  exp             1   43[COMRAM] unsigned char 
  6832 ;;  cntr            1   39[COMRAM] unsigned char 
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  3   30[COMRAM] float 
  6835 ;; Registers used:
  6836 ;;		wreg, status,2, status,0, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6842 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;Total ram usage:       15 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    4
  6849 ;; This function calls:
  6850 ;;		___ftpack
  6851 ;; This function is called by:
  6852 ;;		_main
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text32
  6857  00291A                     __ptext32:
  6858                           	opt stack 0
  6859  00291A                     ___ftdiv:
  6860                           	opt stack 26
  6861                           
  6862                           ;incstack = 0
  6863  00291A  C021  F025         	movff	___ftdiv@f1+2,??___ftdiv
  6864  00291E  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  6865  002920  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  6866  002922  3420               	rlcf	___ftdiv@f1+1,w,c
  6867  002924  3625               	rlcf	??___ftdiv& (0+255),f,c
  6868  002926  E301               	bnc	u4361
  6869  002928  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  6870  00292A                     u4361:
  6871  00292A  5025               	movf	??___ftdiv,w,c
  6872  00292C  6E2C               	movwf	___ftdiv@exp,c
  6873  00292E  502C               	movf	___ftdiv@exp,w,c
  6874  002930  A4D8               	btfss	status,2,c
  6875  002932  D007               	goto	l4042
  6876  002934  0E00               	movlw	0
  6877  002936  6E1F               	movwf	?___ftdiv,c
  6878  002938  0E00               	movlw	0
  6879  00293A  6E20               	movwf	?___ftdiv+1,c
  6880  00293C  0E00               	movlw	0
  6881  00293E  6E21               	movwf	?___ftdiv+2,c
  6882  002940  0012               	return	
  6883  002942                     l4042:
  6884  002942  C024  F025         	movff	___ftdiv@f2+2,??___ftdiv
  6885  002946  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  6886  002948  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  6887  00294A  3423               	rlcf	___ftdiv@f2+1,w,c
  6888  00294C  3625               	rlcf	??___ftdiv& (0+255),f,c
  6889  00294E  E301               	bnc	u4381
  6890  002950  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  6891  002952                     u4381:
  6892  002952  5025               	movf	??___ftdiv,w,c
  6893  002954  6E2D               	movwf	___ftdiv@sign,c
  6894  002956  502D               	movf	___ftdiv@sign,w,c
  6895  002958  A4D8               	btfss	status,2,c
  6896  00295A  D007               	goto	l4048
  6897  00295C  0E00               	movlw	0
  6898  00295E  6E1F               	movwf	?___ftdiv,c
  6899  002960  0E00               	movlw	0
  6900  002962  6E20               	movwf	?___ftdiv+1,c
  6901  002964  0E00               	movlw	0
  6902  002966  6E21               	movwf	?___ftdiv+2,c
  6903  002968  0012               	return	
  6904  00296A                     l4048:
  6905  00296A  0E00               	movlw	0
  6906  00296C  6E29               	movwf	___ftdiv@f3,c
  6907  00296E  0E00               	movlw	0
  6908  002970  6E2A               	movwf	___ftdiv@f3+1,c
  6909  002972  0E00               	movlw	0
  6910  002974  6E2B               	movwf	___ftdiv@f3+2,c
  6911  002976  502D               	movf	___ftdiv@sign,w,c
  6912  002978  0F89               	addlw	137
  6913  00297A  5E2C               	subwf	___ftdiv@exp,f,c
  6914  00297C  C021  F02D         	movff	___ftdiv@f1+2,___ftdiv@sign
  6915  002980  5024               	movf	___ftdiv@f2+2,w,c
  6916  002982  1A2D               	xorwf	___ftdiv@sign,f,c
  6917  002984  0E80               	movlw	128
  6918  002986  162D               	andwf	___ftdiv@sign,f,c
  6919  002988  8E20               	bsf	___ftdiv@f1+1,7,c
  6920  00298A  0EFF               	movlw	255
  6921  00298C  161F               	andwf	___ftdiv@f1,f,c
  6922  00298E  0EFF               	movlw	255
  6923  002990  1620               	andwf	___ftdiv@f1+1,f,c
  6924  002992  0E00               	movlw	0
  6925  002994  1621               	andwf	___ftdiv@f1+2,f,c
  6926  002996  8E23               	bsf	___ftdiv@f2+1,7,c
  6927  002998  0EFF               	movlw	255
  6928  00299A  1622               	andwf	___ftdiv@f2,f,c
  6929  00299C  0EFF               	movlw	255
  6930  00299E  1623               	andwf	___ftdiv@f2+1,f,c
  6931  0029A0  0E00               	movlw	0
  6932  0029A2  1624               	andwf	___ftdiv@f2+2,f,c
  6933  0029A4  0E18               	movlw	24
  6934  0029A6  6E28               	movwf	___ftdiv@cntr,c
  6935  0029A8                     l4068:
  6936  0029A8  90D8               	bcf	status,0,c
  6937  0029AA  3629               	rlcf	___ftdiv@f3,f,c
  6938  0029AC  362A               	rlcf	___ftdiv@f3+1,f,c
  6939  0029AE  362B               	rlcf	___ftdiv@f3+2,f,c
  6940  0029B0  5022               	movf	___ftdiv@f2,w,c
  6941  0029B2  5C1F               	subwf	___ftdiv@f1,w,c
  6942  0029B4  5023               	movf	___ftdiv@f2+1,w,c
  6943  0029B6  5820               	subwfb	___ftdiv@f1+1,w,c
  6944  0029B8  5024               	movf	___ftdiv@f2+2,w,c
  6945  0029BA  5821               	subwfb	___ftdiv@f1+2,w,c
  6946  0029BC  A0D8               	btfss	status,0,c
  6947  0029BE  D007               	goto	l749
  6948  0029C0  5022               	movf	___ftdiv@f2,w,c
  6949  0029C2  5E1F               	subwf	___ftdiv@f1,f,c
  6950  0029C4  5023               	movf	___ftdiv@f2+1,w,c
  6951  0029C6  5A20               	subwfb	___ftdiv@f1+1,f,c
  6952  0029C8  5024               	movf	___ftdiv@f2+2,w,c
  6953  0029CA  5A21               	subwfb	___ftdiv@f1+2,f,c
  6954  0029CC  8029               	bsf	___ftdiv@f3,0,c
  6955  0029CE                     l749:
  6956  0029CE  90D8               	bcf	status,0,c
  6957  0029D0  361F               	rlcf	___ftdiv@f1,f,c
  6958  0029D2  3620               	rlcf	___ftdiv@f1+1,f,c
  6959  0029D4  3621               	rlcf	___ftdiv@f1+2,f,c
  6960  0029D6  2E28               	decfsz	___ftdiv@cntr,f,c
  6961  0029D8  D7E7               	goto	l4068
  6962  0029DA  C029  F014         	movff	___ftdiv@f3,___ftpack@arg
  6963  0029DE  C02A  F015         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6964  0029E2  C02B  F016         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6965  0029E6  C02C  F017         	movff	___ftdiv@exp,___ftpack@exp
  6966  0029EA  C02D  F018         	movff	___ftdiv@sign,___ftpack@sign
  6967  0029EE  EC00  F015         	call	___ftpack	;wreg free
  6968  0029F2  C014  F01F         	movff	?___ftpack,?___ftdiv
  6969  0029F6  C015  F020         	movff	?___ftpack+1,?___ftdiv+1
  6970  0029FA  C016  F021         	movff	?___ftpack+2,?___ftdiv+2
  6971  0029FE  0012               	return	
  6972  002A00                     __end_of___ftdiv:
  6973                           	opt stack 0
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon	equ	0xFF2
  6981                           postinc0	equ	0xFEE
  6982                           wreg	equ	0xFE8
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           plusw2	equ	0xFDB
  6987                           fsr2h	equ	0xFDA
  6988                           fsr2l	equ	0xFD9
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function ___ftpack *****************
  6992 ;; Defined at:
  6993 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  arg             3   19[COMRAM] unsigned um
  6996 ;;  exp             1   22[COMRAM] unsigned char 
  6997 ;;  sign            1   23[COMRAM] unsigned char 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  3   19[COMRAM] float 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7009 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;Total ram usage:        8 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    3
  7016 ;; This function calls:
  7017 ;;		Nothing
  7018 ;; This function is called by:
  7019 ;;		___ftadd
  7020 ;;		___ftdiv
  7021 ;;		___ftmul
  7022 ;;		___lltoft
  7023 ;;		___lwtoft
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text33
  7028  002A00                     __ptext33:
  7029                           	opt stack 0
  7030  002A00                     ___ftpack:
  7031                           	opt stack 24
  7032                           
  7033                           ;incstack = 0
  7034  002A00  5017               	movf	___ftpack@exp,w,c
  7035  002A02  B4D8               	btfsc	status,2,c
  7036  002A04  D005               	goto	l3492
  7037  002A06  5014               	movf	___ftpack@arg,w,c
  7038  002A08  1015               	iorwf	___ftpack@arg+1,w,c
  7039  002A0A  1016               	iorwf	___ftpack@arg+2,w,c
  7040  002A0C  A4D8               	btfss	status,2,c
  7041  002A0E  D00C               	goto	l3498
  7042  002A10                     l3492:
  7043  002A10  0E00               	movlw	0
  7044  002A12  6E14               	movwf	?___ftpack,c
  7045  002A14  0E00               	movlw	0
  7046  002A16  6E15               	movwf	?___ftpack+1,c
  7047  002A18  0E00               	movlw	0
  7048  002A1A  6E16               	movwf	?___ftpack+2,c
  7049  002A1C  0012               	return	
  7050  002A1E                     l3496:
  7051  002A1E  2A17               	incf	___ftpack@exp,f,c
  7052  002A20  90D8               	bcf	status,0,c
  7053  002A22  3216               	rrcf	___ftpack@arg+2,f,c
  7054  002A24  3215               	rrcf	___ftpack@arg+1,f,c
  7055  002A26  3214               	rrcf	___ftpack@arg,f,c
  7056  002A28                     l3498:
  7057  002A28  0E00               	movlw	0
  7058  002A2A  1414               	andwf	___ftpack@arg,w,c
  7059  002A2C  6E19               	movwf	??___ftpack& (0+255),c
  7060  002A2E  0E00               	movlw	0
  7061  002A30  1415               	andwf	___ftpack@arg+1,w,c
  7062  002A32  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  7063  002A34  0EFE               	movlw	254
  7064  002A36  1416               	andwf	___ftpack@arg+2,w,c
  7065  002A38  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  7066  002A3A  5019               	movf	??___ftpack,w,c
  7067  002A3C  101A               	iorwf	??___ftpack+1,w,c
  7068  002A3E  101B               	iorwf	??___ftpack+2,w,c
  7069  002A40  B4D8               	btfsc	status,2,c
  7070  002A42  D00C               	goto	l3504
  7071  002A44  D7EC               	goto	l3496
  7072  002A46                     l3500:
  7073  002A46  2A17               	incf	___ftpack@exp,f,c
  7074  002A48  0E01               	movlw	1
  7075  002A4A  2614               	addwf	___ftpack@arg,f,c
  7076  002A4C  0E00               	movlw	0
  7077  002A4E  2215               	addwfc	___ftpack@arg+1,f,c
  7078  002A50  0E00               	movlw	0
  7079  002A52  2216               	addwfc	___ftpack@arg+2,f,c
  7080  002A54  90D8               	bcf	status,0,c
  7081  002A56  3216               	rrcf	___ftpack@arg+2,f,c
  7082  002A58  3215               	rrcf	___ftpack@arg+1,f,c
  7083  002A5A  3214               	rrcf	___ftpack@arg,f,c
  7084  002A5C                     l3504:
  7085  002A5C  0E00               	movlw	0
  7086  002A5E  1414               	andwf	___ftpack@arg,w,c
  7087  002A60  6E19               	movwf	??___ftpack& (0+255),c
  7088  002A62  0E00               	movlw	0
  7089  002A64  1415               	andwf	___ftpack@arg+1,w,c
  7090  002A66  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  7091  002A68  0EFF               	movlw	255
  7092  002A6A  1416               	andwf	___ftpack@arg+2,w,c
  7093  002A6C  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  7094  002A6E  5019               	movf	??___ftpack,w,c
  7095  002A70  101A               	iorwf	??___ftpack+1,w,c
  7096  002A72  101B               	iorwf	??___ftpack+2,w,c
  7097  002A74  B4D8               	btfsc	status,2,c
  7098  002A76  D006               	goto	l3508
  7099  002A78  D7E6               	goto	l3500
  7100  002A7A                     l3506:
  7101  002A7A  0617               	decf	___ftpack@exp,f,c
  7102  002A7C  90D8               	bcf	status,0,c
  7103  002A7E  3614               	rlcf	___ftpack@arg,f,c
  7104  002A80  3615               	rlcf	___ftpack@arg+1,f,c
  7105  002A82  3616               	rlcf	___ftpack@arg+2,f,c
  7106  002A84                     l3508:
  7107  002A84  BE15               	btfsc	___ftpack@arg+1,7,c
  7108  002A86  D003               	goto	l691
  7109  002A88  0E02               	movlw	2
  7110  002A8A  6017               	cpfslt	___ftpack@exp,c
  7111  002A8C  D7F6               	goto	l3506
  7112  002A8E                     l691:
  7113  002A8E  A017               	btfss	___ftpack@exp,0,c
  7114  002A90  9E15               	bcf	___ftpack@arg+1,7,c
  7115  002A92  90D8               	bcf	status,0,c
  7116  002A94  3217               	rrcf	___ftpack@exp,f,c
  7117  002A96  5017               	movf	___ftpack@exp,w,c
  7118  002A98  1216               	iorwf	___ftpack@arg+2,f,c
  7119  002A9A  5018               	movf	___ftpack@sign,w,c
  7120  002A9C  A4D8               	btfss	status,2,c
  7121  002A9E  8E16               	bsf	___ftpack@arg+2,7,c
  7122  002AA0  C014  F014         	movff	___ftpack@arg,?___ftpack
  7123  002AA4  C015  F015         	movff	___ftpack@arg+1,?___ftpack+1
  7124  002AA8  C016  F016         	movff	___ftpack@arg+2,?___ftpack+2
  7125  002AAC  0012               	return	
  7126  002AAE                     __end_of___ftpack:
  7127                           	opt stack 0
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           postinc0	equ	0xFEE
  7136                           wreg	equ	0xFE8
  7137                           indf2	equ	0xFDF
  7138                           postinc2	equ	0xFDE
  7139                           postdec2	equ	0xFDD
  7140                           plusw2	equ	0xFDB
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _SYSTEM_Initialize *****************
  7146 ;; Defined at:
  7147 ;;		line 111 in file "mcc_generated_files/mcc.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;		None
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;		None
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      void 
  7154 ;; Registers used:
  7155 ;;		wreg, status,2, status,0, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;Total ram usage:        0 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    4
  7168 ;; This function calls:
  7169 ;;		_EUSART1_Initialize
  7170 ;;		_I2C1_Initialize
  7171 ;;		_INTERRUPT_Initialize
  7172 ;;		_OSCILLATOR_Initialize
  7173 ;;		_PIN_MANAGER_Initialize
  7174 ;; This function is called by:
  7175 ;;		_main
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text34
  7180  003268                     __ptext34:
  7181                           	opt stack 0
  7182  003268                     _SYSTEM_Initialize:
  7183                           	opt stack 26
  7184                           
  7185                           ;mcc.c: 114: INTERRUPT_Initialize();
  7186                           
  7187                           ;incstack = 0
  7188  003268  EC5C  F019         	call	_INTERRUPT_Initialize	;wreg free
  7189                           
  7190                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7191  00326C  EC56  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  7192                           
  7193                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7194  003270  EC4A  F019         	call	_OSCILLATOR_Initialize	;wreg free
  7195                           
  7196                           ;mcc.c: 117: I2C1_Initialize();
  7197  003274  ECB6  F018         	call	_I2C1_Initialize	;wreg free
  7198                           
  7199                           ;mcc.c: 118: EUSART1_Initialize();
  7200  003278  EC3F  F019         	call	_EUSART1_Initialize	;wreg free
  7201  00327C  0012               	return		;funcret
  7202  00327E                     __end_of_SYSTEM_Initialize:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           plusw2	equ	0xFDB
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function _PIN_MANAGER_Initialize *****************
  7222 ;; Defined at:
  7223 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;		None
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;		None
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      void 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;Total ram usage:        0 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    3
  7244 ;; This function calls:
  7245 ;;		Nothing
  7246 ;; This function is called by:
  7247 ;;		_SYSTEM_Initialize
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text35
  7252  0030AC                     __ptext35:
  7253                           	opt stack 0
  7254  0030AC                     _PIN_MANAGER_Initialize:
  7255                           	opt stack 26
  7256                           
  7257                           ;pin_manager.c: 57: LATE = 0x00;
  7258                           
  7259                           ;incstack = 0
  7260  0030AC  0E00               	movlw	0
  7261  0030AE  6E8D               	movwf	3981,c	;volatile
  7262                           
  7263                           ;pin_manager.c: 58: LATD = 0x00;
  7264  0030B0  0E00               	movlw	0
  7265  0030B2  6E8C               	movwf	3980,c	;volatile
  7266                           
  7267                           ;pin_manager.c: 59: LATA = 0x00;
  7268  0030B4  0E00               	movlw	0
  7269  0030B6  6E89               	movwf	3977,c	;volatile
  7270                           
  7271                           ;pin_manager.c: 60: LATB = 0x00;
  7272  0030B8  0E00               	movlw	0
  7273  0030BA  6E8A               	movwf	3978,c	;volatile
  7274                           
  7275                           ;pin_manager.c: 61: LATC = 0x00;
  7276  0030BC  0E00               	movlw	0
  7277  0030BE  6E8B               	movwf	3979,c	;volatile
  7278                           
  7279                           ;pin_manager.c: 66: TRISE = 0x07;
  7280  0030C0  0E07               	movlw	7
  7281  0030C2  6E96               	movwf	3990,c	;volatile
  7282                           
  7283                           ;pin_manager.c: 67: TRISA = 0xFF;
  7284  0030C4  6892               	setf	3986,c	;volatile
  7285                           
  7286                           ;pin_manager.c: 68: TRISB = 0xFF;
  7287  0030C6  6893               	setf	3987,c	;volatile
  7288                           
  7289                           ;pin_manager.c: 69: TRISC = 0xBF;
  7290  0030C8  0EBF               	movlw	191
  7291  0030CA  6E94               	movwf	3988,c	;volatile
  7292                           
  7293                           ;pin_manager.c: 70: TRISD = 0xFF;
  7294  0030CC  6895               	setf	3989,c	;volatile
  7295                           
  7296                           ;pin_manager.c: 75: ANSELC = 0xA4;
  7297  0030CE  0EA4               	movlw	164
  7298  0030D0  010F               	movlb	15	; () banked
  7299  0030D2  6F3A               	movwf	58,b	;volatile
  7300                           
  7301                           ;pin_manager.c: 76: ANSELB = 0x3F;
  7302  0030D4  0E3F               	movlw	63
  7303  0030D6  010F               	movlb	15	; () banked
  7304  0030D8  6F39               	movwf	57,b	;volatile
  7305                           
  7306                           ; BSR set to: 15
  7307                           ;pin_manager.c: 77: ANSELD = 0xFF;
  7308  0030DA  010F               	movlb	15	; () banked
  7309  0030DC  693B               	setf	59,b	;volatile
  7310                           
  7311                           ;pin_manager.c: 78: ANSELE = 0x07;
  7312  0030DE  0E07               	movlw	7
  7313  0030E0  010F               	movlb	15	; () banked
  7314  0030E2  6F3C               	movwf	60,b	;volatile
  7315                           
  7316                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7317  0030E4  0E2F               	movlw	47
  7318  0030E6  010F               	movlb	15	; () banked
  7319  0030E8  6F38               	movwf	56,b	;volatile
  7320                           
  7321                           ; BSR set to: 15
  7322                           ;pin_manager.c: 84: WPUB = 0xFF;
  7323  0030EA  6861               	setf	3937,c	;volatile
  7324                           
  7325                           ; BSR set to: 15
  7326                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  7327  0030EC  9EF1               	bcf	intcon2,7,c	;volatile
  7328                           
  7329                           ; BSR set to: 15
  7330  0030EE  0012               	return		;funcret
  7331  0030F0                     __end_of_PIN_MANAGER_Initialize:
  7332                           	opt stack 0
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           intcon	equ	0xFF2
  7340                           intcon2	equ	0xFF1
  7341                           postinc0	equ	0xFEE
  7342                           wreg	equ	0xFE8
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           plusw2	equ	0xFDB
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _OSCILLATOR_Initialize *****************
  7352 ;; Defined at:
  7353 ;;		line 121 in file "mcc_generated_files/mcc.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  1    wreg      void 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;Total ram usage:        0 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    3
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		_SYSTEM_Initialize
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text36
  7382  003294                     __ptext36:
  7383                           	opt stack 0
  7384  003294                     _OSCILLATOR_Initialize:
  7385                           	opt stack 26
  7386                           
  7387                           ;mcc.c: 124: OSCCON = 0x42;
  7388                           
  7389                           ; BSR set to: 15
  7390                           ;incstack = 0
  7391  003294  0E42               	movlw	66
  7392  003296  6ED3               	movwf	4051,c	;volatile
  7393                           
  7394                           ;mcc.c: 126: OSCCON2 = 0x04;
  7395  003298  0E04               	movlw	4
  7396  00329A  6ED2               	movwf	4050,c	;volatile
  7397                           
  7398                           ;mcc.c: 128: OSCTUNE = 0x00;
  7399  00329C  0E00               	movlw	0
  7400  00329E  6E9B               	movwf	3995,c	;volatile
  7401  0032A0  0012               	return		;funcret
  7402  0032A2                     __end_of_OSCILLATOR_Initialize:
  7403                           	opt stack 0
  7404                           tblptru	equ	0xFF8
  7405                           tblptrh	equ	0xFF7
  7406                           tblptrl	equ	0xFF6
  7407                           tablat	equ	0xFF5
  7408                           prodh	equ	0xFF4
  7409                           prodl	equ	0xFF3
  7410                           intcon	equ	0xFF2
  7411                           intcon2	equ	0xFF1
  7412                           postinc0	equ	0xFEE
  7413                           wreg	equ	0xFE8
  7414                           indf2	equ	0xFDF
  7415                           postinc2	equ	0xFDE
  7416                           postdec2	equ	0xFDD
  7417                           plusw2	equ	0xFDB
  7418                           fsr2h	equ	0xFDA
  7419                           fsr2l	equ	0xFD9
  7420                           status	equ	0xFD8
  7421                           
  7422 ;; *************** function _INTERRUPT_Initialize *****************
  7423 ;; Defined at:
  7424 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;		None
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;		None
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  1    wreg      void 
  7431 ;; Registers used:
  7432 ;;		None
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;Total ram usage:        0 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    3
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_SYSTEM_Initialize
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text37
  7453  0032B8                     __ptext37:
  7454                           	opt stack 0
  7455  0032B8                     _INTERRUPT_Initialize:
  7456                           	opt stack 26
  7457                           
  7458                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  7459                           
  7460                           ;incstack = 0
  7461  0032B8  9ED0               	bcf	4048,7,c	;volatile
  7462  0032BA  0012               	return		;funcret
  7463  0032BC                     __end_of_INTERRUPT_Initialize:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           intcon2	equ	0xFF1
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           plusw2	equ	0xFDB
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _I2C1_Initialize *****************
  7484 ;; Defined at:
  7485 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;		None
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;		None
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		wreg, status,2, status,0
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;Total ram usage:        0 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    3
  7506 ;; This function calls:
  7507 ;;		Nothing
  7508 ;; This function is called by:
  7509 ;;		_SYSTEM_Initialize
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text38
  7514  00316C                     __ptext38:
  7515                           	opt stack 0
  7516  00316C                     _I2C1_Initialize:
  7517                           	opt stack 26
  7518                           
  7519                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  7520                           
  7521                           ;incstack = 0
  7522  00316C  0ECA               	movlw	low _i2c1_tr_queue
  7523  00316E  6E3B               	movwf	_i2c1_object+2,c
  7524  003170  0E00               	movlw	high _i2c1_tr_queue
  7525  003172  6E3C               	movwf	_i2c1_object+3,c
  7526                           
  7527                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  7528  003174  0ECA               	movlw	low _i2c1_tr_queue
  7529  003176  6E39               	movwf	_i2c1_object,c
  7530  003178  0E00               	movlw	high _i2c1_tr_queue
  7531  00317A  6E3A               	movwf	_i2c1_object+1,c
  7532                           
  7533                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  7534  00317C  823D               	bsf	_i2c1_object+4,1,c
  7535                           
  7536                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  7537  00317E  903D               	bcf	_i2c1_object+4,0,c
  7538                           
  7539                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  7540  003180  0E00               	movlw	0
  7541  003182  6E3F               	movwf	_i2c1_object+6,c
  7542                           
  7543                           ;i2c1.c: 208: SSP1STAT = 0x00;
  7544  003184  0E00               	movlw	0
  7545  003186  6EC7               	movwf	4039,c	;volatile
  7546                           
  7547                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  7548  003188  0E28               	movlw	40
  7549  00318A  6EC6               	movwf	4038,c	;volatile
  7550                           
  7551                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  7552  00318C  0E00               	movlw	0
  7553  00318E  6ECB               	movwf	4043,c	;volatile
  7554                           
  7555                           ;i2c1.c: 214: SSP1ADD = 0x04;
  7556  003190  0E04               	movlw	4
  7557  003192  6EC8               	movwf	4040,c	;volatile
  7558                           
  7559                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  7560  003194  969E               	bcf	3998,3,c	;volatile
  7561                           
  7562                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  7563  003196  869D               	bsf	3997,3,c	;volatile
  7564  003198  0012               	return		;funcret
  7565  00319A                     __end_of_I2C1_Initialize:
  7566                           	opt stack 0
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           intcon2	equ	0xFF1
  7575                           postinc0	equ	0xFEE
  7576                           wreg	equ	0xFE8
  7577                           indf2	equ	0xFDF
  7578                           postinc2	equ	0xFDE
  7579                           postdec2	equ	0xFDD
  7580                           plusw2	equ	0xFDB
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _EUSART1_Initialize *****************
  7586 ;; Defined at:
  7587 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;Total ram usage:        0 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    3
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_SYSTEM_Initialize
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text39
  7616  00327E                     __ptext39:
  7617                           	opt stack 0
  7618  00327E                     _EUSART1_Initialize:
  7619                           	opt stack 26
  7620                           
  7621                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  7622                           
  7623                           ;incstack = 0
  7624  00327E  0E08               	movlw	8
  7625  003280  6EB8               	movwf	4024,c	;volatile
  7626                           
  7627                           ;eusart1.c: 63: RCSTA1 = 0x80;
  7628  003282  0E80               	movlw	128
  7629  003284  6EAB               	movwf	4011,c	;volatile
  7630                           
  7631                           ;eusart1.c: 66: TXSTA1 = 0x24;
  7632  003286  0E24               	movlw	36
  7633  003288  6EAC               	movwf	4012,c	;volatile
  7634                           
  7635                           ;eusart1.c: 69: SPBRG1 = 0x33;
  7636  00328A  0E33               	movlw	51
  7637  00328C  6EAF               	movwf	4015,c	;volatile
  7638                           
  7639                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  7640  00328E  0E00               	movlw	0
  7641  003290  6EB0               	movwf	4016,c	;volatile
  7642  003292  0012               	return		;funcret
  7643  003294                     __end_of_EUSART1_Initialize:
  7644                           	opt stack 0
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           intcon2	equ	0xFF1
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           plusw2	equ	0xFDB
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function _INTERRUPT_InterruptManager *****************
  7664 ;; Defined at:
  7665 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;		None
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      void 
  7672 ;; Registers used:
  7673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;Total ram usage:       14 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    2
  7686 ;; This function calls:
  7687 ;;		_I2C1_BusCollisionISR
  7688 ;;		_I2C1_ISR
  7689 ;; This function is called by:
  7690 ;;		Interrupt level 2
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	intcode
  7695  000008                     __pintcode:
  7696                           	opt stack 0
  7697  000008                     _INTERRUPT_InterruptManager:
  7698                           	opt stack 24
  7699                           
  7700                           ;incstack = 0
  7701  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7702  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
  7703  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7704  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7705  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7706  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7707  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7708  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7709  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7710  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7711  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7712  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7713  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7714  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7715  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7716                           
  7717                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bits.BC
      +                          L1IF == 1)
  7718  000042  BCF2               	btfsc	intcon,6,c	;volatile
  7719  000044  A6A0               	btfss	4000,3,c	;volatile
  7720  000046  D005               	goto	i2l251
  7721  000048  A6A1               	btfss	4001,3,c	;volatile
  7722  00004A  D003               	goto	i2l251
  7723                           
  7724                           ;interrupt_manager.c: 61: {
  7725                           ;interrupt_manager.c: 62: I2C1_BusCollisionISR();
  7726  00004C  EC5F  F019         	call	_I2C1_BusCollisionISR	;wreg free
  7727                           
  7728                           ;interrupt_manager.c: 63: }
  7729  000050  D006               	goto	i2l255
  7730  000052                     i2l251:
  7731                           
  7732                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7733  000052  BCF2               	btfsc	intcon,6,c	;volatile
  7734  000054  A69D               	btfss	3997,3,c	;volatile
  7735  000056  D003               	goto	i2l255
  7736  000058  B69E               	btfsc	3998,3,c	;volatile
  7737                           
  7738                           ;interrupt_manager.c: 65: {
  7739                           ;interrupt_manager.c: 66: I2C1_ISR();
  7740  00005A  EC77  F010         	call	_I2C1_ISR	;wreg free
  7741  00005E                     i2l255:
  7742  00005E  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7743  000062  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7744  000066  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7745  00006A  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7746  00006E  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7747  000072  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7748  000076  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7749  00007A  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7750  00007E  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7751  000082  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7752  000086  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7753  00008A  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7754  00008E  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7755  000092  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7756  000096  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7757  000098  0011               	retfie		f
  7758  00009A                     __end_of_INTERRUPT_InterruptManager:
  7759                           	opt stack 0
  7760                           pclatu	equ	0xFFB
  7761                           pclath	equ	0xFFA
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           intcon2	equ	0xFF1
  7770                           postinc0	equ	0xFEE
  7771                           fsr0h	equ	0xFEA
  7772                           fsr0l	equ	0xFE9
  7773                           wreg	equ	0xFE8
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           plusw2	equ	0xFDB
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _I2C1_ISR *****************
  7785 ;; Defined at:
  7786 ;;		line 233 in file "mcc_generated_files/i2c1.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;		None
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;		None
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  1    wreg      void 
  7793 ;; Registers used:
  7794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;Total ram usage:        2 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    1
  7807 ;; This function calls:
  7808 ;;		_I2C1_FunctionComplete
  7809 ;;		_I2C1_Stop
  7810 ;; This function is called by:
  7811 ;;		_INTERRUPT_InterruptManager
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text41
  7816  0020EE                     __ptext41:
  7817                           	opt stack 0
  7818  0020EE                     _I2C1_ISR:
  7819                           	opt stack 24
  7820                           
  7821                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
  7822                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
  7823                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
  7824                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  7825                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
  7826                           
  7827                           ;incstack = 0
  7828  0020EE  969E               	bcf	3998,3,c	;volatile
  7829                           
  7830                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
  7831  0020F0  AEC6               	btfss	4038,7,c	;volatile
  7832  0020F2  D0F9               	goto	i2l3150
  7833                           
  7834                           ;i2c1.c: 246: {
  7835                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
  7836  0020F4  9EC6               	bcf	4038,7,c	;volatile
  7837                           
  7838                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
  7839  0020F6  0E00               	movlw	0
  7840  0020F8  6E49               	movwf	_i2c1_state,c
  7841                           
  7842                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
  7843  0020FA  EE20 F003          	lfsr	2,3
  7844  0020FE  5042               	movf	_p_i2c1_current,w,c
  7845  002100  26D9               	addwf	fsr2l,f,c
  7846  002102  5043               	movf	_p_i2c1_current+1,w,c
  7847  002104  22DA               	addwfc	fsr2h,f,c
  7848  002106  CFDE F004          	movff	postinc2,??_I2C1_ISR
  7849  00210A  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
  7850  00210E  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
  7851  002112  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
  7852  002116  0E01               	movlw	1
  7853  002118  6EDF               	movwf	indf2,c
  7854                           
  7855                           ;i2c1.c: 253: p_i2c1_current = (0);
  7856  00211A  0E00               	movlw	0
  7857  00211C  6E42               	movwf	_p_i2c1_current,c
  7858  00211E  0E00               	movlw	0
  7859  002120  6E43               	movwf	_p_i2c1_current+1,c
  7860                           
  7861                           ;i2c1.c: 255: return;
  7862  002122  0012               	return	
  7863  002124                     i2l100:
  7864                           
  7865                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
  7866  002124  B23D               	btfsc	_i2c1_object+4,1,c
  7867  002126  0012               	return	
  7868                           
  7869                           ;i2c1.c: 264: {
  7870                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
  7871  002128  C03B  F042         	movff	_i2c1_object+2,_p_i2c1_current
  7872  00212C  C03C  F043         	movff	_i2c1_object+3,_p_i2c1_current+1
  7873                           
  7874                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
  7875  002130  C03B  FFD9         	movff	_i2c1_object+2,fsr2l
  7876  002134  C03C  FFDA         	movff	_i2c1_object+3,fsr2h
  7877  002138  50DF               	movf	indf2,w,c
  7878  00213A  6E48               	movwf	_i2c1_trb_count,c
  7879                           
  7880                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
  7881  00213C  EE20 F001          	lfsr	2,1
  7882  002140  503B               	movf	_i2c1_object+2,w,c
  7883  002142  26D9               	addwf	fsr2l,f,c
  7884  002144  503C               	movf	_i2c1_object+3,w,c
  7885  002146  22DA               	addwfc	fsr2h,f,c
  7886  002148  CFDE F044          	movff	postinc2,_p_i2c1_trb_current
  7887  00214C  CFDD F045          	movff	postdec2,_p_i2c1_trb_current+1
  7888                           
  7889                           ;i2c1.c: 270: i2c1_object.pTrHead++;
  7890  002150  0E05               	movlw	5
  7891  002152  263B               	addwf	_i2c1_object+2,f,c
  7892  002154  0E00               	movlw	0
  7893  002156  223C               	addwfc	_i2c1_object+3,f,c
  7894                           
  7895                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
  7896  002158  0ECF               	movlw	low (_i2c1_tr_queue+5)
  7897  00215A  183B               	xorwf	_i2c1_object+2,w,c
  7898  00215C  E108               	bnz	i2l3042
  7899  00215E  0E00               	movlw	high (_i2c1_tr_queue+5)
  7900  002160  183C               	xorwf	_i2c1_object+3,w,c
  7901  002162  A4D8               	btfss	status,2,c
  7902  002164  D004               	goto	i2l3042
  7903                           
  7904                           ;i2c1.c: 274: {
  7905                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
  7906  002166  0ECA               	movlw	low _i2c1_tr_queue
  7907  002168  6E3B               	movwf	_i2c1_object+2,c
  7908  00216A  0E00               	movlw	high _i2c1_tr_queue
  7909  00216C  6E3C               	movwf	_i2c1_object+3,c
  7910  00216E                     i2l3042:
  7911                           
  7912                           ;i2c1.c: 277: }
  7913                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
  7914  00216E  903D               	bcf	_i2c1_object+4,0,c
  7915                           
  7916                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
  7917  002170  5039               	movf	_i2c1_object,w,c
  7918  002172  183B               	xorwf	_i2c1_object+2,w,c
  7919  002174  E104               	bnz	i2l103
  7920  002176  503A               	movf	_i2c1_object+1,w,c
  7921  002178  183C               	xorwf	_i2c1_object+3,w,c
  7922  00217A  B4D8               	btfsc	status,2,c
  7923                           
  7924                           ;i2c1.c: 285: {
  7925                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
  7926  00217C  823D               	bsf	_i2c1_object+4,1,c
  7927  00217E                     i2l103:
  7928                           
  7929                           ;i2c1.c: 288: }
  7930                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
  7931  00217E  80C5               	bsf	4037,0,c	;volatile
  7932                           
  7933                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
  7934  002180  0E02               	movlw	2
  7935  002182  6E49               	movwf	_i2c1_state,c
  7936                           
  7937                           ;i2c1.c: 295: }
  7938                           ;i2c1.c: 297: break;
  7939  002184  0012               	return	
  7940  002186                     i2l105:
  7941                           
  7942                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
  7943  002186  82C5               	bsf	4037,1,c	;volatile
  7944                           
  7945                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
  7946  002188  0E02               	movlw	2
  7947  00218A  6E49               	movwf	_i2c1_state,c
  7948                           
  7949                           ;i2c1.c: 309: break;
  7950  00218C  0012               	return	
  7951  00218E                     i2l106:
  7952                           
  7953                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
  7954  00218E  ACC5               	btfss	4037,6,c	;volatile
  7955  002190  D005               	goto	i2l3054
  7956                           
  7957                           ;i2c1.c: 314: {
  7958                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
  7959  002192  2A3F               	incf	_i2c1_object+6,f,c
  7960                           
  7961                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  7962  002194  0E04               	movlw	4
  7963  002196  EC97  F018         	call	_I2C1_Stop
  7964                           
  7965                           ;i2c1.c: 317: }
  7966  00219A  0012               	return	
  7967  00219C                     i2l3054:
  7968                           
  7969                           ;i2c1.c: 318: else
  7970                           ;i2c1.c: 319: {
  7971                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
  7972  00219C  90D8               	bcf	status,0,c
  7973  00219E  304B               	rrcf	I2C1_ISR@i2c_address+1,w,c
  7974  0021A0  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
  7975  0021A2  304A               	rrcf	I2C1_ISR@i2c_address,w,c
  7976  0021A4  6E04               	movwf	??_I2C1_ISR& (0+255),c
  7977  0021A6  5004               	movf	??_I2C1_ISR,w,c
  7978  0021A8  6EC9               	movwf	4041,c	;volatile
  7979                           
  7980                           ;i2c1.c: 324: if(i2c_address & 0x01)
  7981  0021AA  A04A               	btfss	I2C1_ISR@i2c_address,0,c
  7982  0021AC  D003               	goto	i2l3060
  7983                           
  7984                           ;i2c1.c: 325: {
  7985                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
  7986  0021AE  0E0B               	movlw	11
  7987  0021B0  6E49               	movwf	_i2c1_state,c
  7988                           
  7989                           ;i2c1.c: 329: }
  7990  0021B2  0012               	return	
  7991  0021B4                     i2l3060:
  7992                           
  7993                           ;i2c1.c: 330: else
  7994                           ;i2c1.c: 331: {
  7995                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
  7996  0021B4  0E03               	movlw	3
  7997  0021B6  6E49               	movwf	_i2c1_state,c
  7998                           
  7999                           ;i2c1.c: 334: }
  8000                           ;i2c1.c: 335: }
  8001                           ;i2c1.c: 337: break;
  8002  0021B8  0012               	return	
  8003  0021BA                     i2l111:
  8004                           
  8005                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
  8006  0021BA  ACC5               	btfss	4037,6,c	;volatile
  8007  0021BC  D005               	goto	i2l112
  8008                           
  8009                           ;i2c1.c: 342: {
  8010                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
  8011  0021BE  2A3F               	incf	_i2c1_object+6,f,c
  8012                           
  8013                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  8014  0021C0  0E04               	movlw	4
  8015  0021C2  EC97  F018         	call	_I2C1_Stop
  8016                           
  8017                           ;i2c1.c: 345: }
  8018  0021C6  0012               	return	
  8019  0021C8                     i2l112:
  8020                           
  8021                           ;i2c1.c: 346: else
  8022                           ;i2c1.c: 347: {
  8023                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
  8024  0021C8  82C5               	bsf	4037,1,c	;volatile
  8025                           
  8026                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8027  0021CA  C04A  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
  8028  0021CE  C04B  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
  8029  0021D2  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
  8030  0021D6  6A05               	clrf	??_I2C1_ISR+1,c
  8031  0021D8  0E06               	movlw	6
  8032  0021DA  1604               	andwf	??_I2C1_ISR,f,c
  8033  0021DC  0E00               	movlw	0
  8034  0021DE  1605               	andwf	??_I2C1_ISR+1,f,c
  8035  0021E0  0EF0               	movlw	240
  8036  0021E2  1004               	iorwf	??_I2C1_ISR,w,c
  8037  0021E4  6E4A               	movwf	I2C1_ISR@i2c_address,c
  8038  0021E6  5005               	movf	??_I2C1_ISR+1,w,c
  8039  0021E8  6E4B               	movwf	I2C1_ISR@i2c_address+1,c
  8040                           
  8041                           ;i2c1.c: 357: i2c_address |= 0x0001;
  8042  0021EA  804A               	bsf	I2C1_ISR@i2c_address,0,c
  8043                           
  8044                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
  8045  0021EC  0E01               	movlw	1
  8046  0021EE  6E46               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
  8047                           
  8048                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
  8049  0021F0  0E02               	movlw	2
  8050  0021F2  6E49               	movwf	_i2c1_state,c
  8051                           
  8052                           ;i2c1.c: 364: }
  8053                           ;i2c1.c: 366: break;
  8054  0021F4  0012               	return	
  8055  0021F6                     i2l3074:
  8056                           
  8057                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
  8058  0021F6  0446               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
  8059  0021F8  B4D8               	btfsc	status,2,c
  8060  0021FA  D01A               	goto	i2l116
  8061                           
  8062                           ;i2c1.c: 382: {
  8063                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
  8064  0021FC  C044  FFD9         	movff	_p_i2c1_trb_current,fsr2l
  8065  002200  C045  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
  8066  002204  CFDE F04A          	movff	postinc2,I2C1_ISR@i2c_address
  8067  002208  CFDD F04B          	movff	postdec2,I2C1_ISR@i2c_address+1
  8068                           
  8069                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
  8070  00220C  EE20 F003          	lfsr	2,3
  8071  002210  5044               	movf	_p_i2c1_trb_current,w,c
  8072  002212  26D9               	addwf	fsr2l,f,c
  8073  002214  5045               	movf	_p_i2c1_trb_current+1,w,c
  8074  002216  22DA               	addwfc	fsr2h,f,c
  8075  002218  CFDE F040          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
  8076  00221C  CFDD F041          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
  8077                           
  8078                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
  8079  002220  EE20 F002          	lfsr	2,2
  8080  002224  5044               	movf	_p_i2c1_trb_current,w,c
  8081  002226  26D9               	addwf	fsr2l,f,c
  8082  002228  5045               	movf	_p_i2c1_trb_current+1,w,c
  8083  00222A  22DA               	addwfc	fsr2h,f,c
  8084  00222C  50DF               	movf	indf2,w,c
  8085  00222E  6E47               	movwf	I2C1_ISR@i2c_bytes_left,c
  8086  002230                     i2l116:
  8087                           
  8088                           ;i2c1.c: 409: else
  8089                           ;i2c1.c: 410: {
  8090                           ;i2c1.c: 412: SSP1BUF = i2c_address;
  8091  002230  C04A  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
  8092                           
  8093                           ;i2c1.c: 413: if(i2c_address & 0x01)
  8094  002234  A04A               	btfss	I2C1_ISR@i2c_address,0,c
  8095  002236  D003               	goto	i2l3094
  8096                           
  8097                           ;i2c1.c: 414: {
  8098                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
  8099  002238  0E05               	movlw	5
  8100  00223A  6E49               	movwf	_i2c1_state,c
  8101                           
  8102                           ;i2c1.c: 417: }
  8103  00223C  0012               	return	
  8104  00223E                     i2l3094:
  8105                           
  8106                           ;i2c1.c: 418: else
  8107                           ;i2c1.c: 419: {
  8108                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
  8109  00223E  0E03               	movlw	3
  8110  002240  6E49               	movwf	_i2c1_state,c
  8111                           
  8112                           ;i2c1.c: 422: }
  8113                           ;i2c1.c: 423: }
  8114                           ;i2c1.c: 424: break;
  8115  002242  0012               	return	
  8116  002244                     i2l122:
  8117                           
  8118                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
  8119  002244  ACC5               	btfss	4037,6,c	;volatile
  8120  002246  D006               	goto	i2l3102
  8121                           
  8122                           ;i2c1.c: 430: {
  8123                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
  8124  002248  2A3F               	incf	_i2c1_object+6,f,c
  8125                           
  8126                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
  8127  00224A  9CC5               	bcf	4037,6,c	;volatile
  8128                           
  8129                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
  8130  00224C  0E05               	movlw	5
  8131  00224E  EC97  F018         	call	_I2C1_Stop
  8132                           
  8133                           ;i2c1.c: 440: }
  8134  002252  0012               	return	
  8135  002254                     i2l3102:
  8136                           
  8137                           ;i2c1.c: 441: else
  8138                           ;i2c1.c: 442: {
  8139                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
  8140  002254  0647               	decf	I2C1_ISR@i2c_bytes_left,f,c
  8141  002256  2847               	incf	I2C1_ISR@i2c_bytes_left,w,c
  8142  002258  A4D8               	btfss	status,2,c
  8143  00225A  D00E               	goto	i2l3112
  8144                           
  8145                           ;i2c1.c: 445: {
  8146                           ;i2c1.c: 449: p_i2c1_trb_current++;
  8147  00225C  0E05               	movlw	5
  8148  00225E  2644               	addwf	_p_i2c1_trb_current,f,c
  8149  002260  0E00               	movlw	0
  8150  002262  2245               	addwfc	_p_i2c1_trb_current+1,f,c
  8151                           
  8152                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
  8153  002264  2E48               	decfsz	_i2c1_trb_count,f,c
  8154  002266  D004               	goto	i2l126
  8155                           
  8156                           ;i2c1.c: 453: {
  8157                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
  8158  002268  0E00               	movlw	0
  8159  00226A  EC97  F018         	call	_I2C1_Stop
  8160                           
  8161                           ;i2c1.c: 455: }
  8162  00226E  0012               	return	
  8163  002270                     i2l126:
  8164                           
  8165                           ;i2c1.c: 456: else
  8166                           ;i2c1.c: 457: {
  8167                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
  8168  002270  82C5               	bsf	4037,1,c	;volatile
  8169                           
  8170                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
  8171  002272  0E02               	movlw	2
  8172  002274  6E49               	movwf	_i2c1_state,c
  8173                           
  8174                           ;i2c1.c: 469: }
  8175                           ;i2c1.c: 470: }
  8176  002276  0012               	return	
  8177  002278                     i2l3112:
  8178                           
  8179                           ;i2c1.c: 471: else
  8180                           ;i2c1.c: 472: {
  8181                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
  8182  002278  C040  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
  8183  00227C  C041  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
  8184  002280  50DF               	movf	indf2,w,c
  8185  002282  6EC9               	movwf	4041,c	;volatile
  8186  002284  4A40               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
  8187  002286  2A41               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
  8188                           
  8189                           ;i2c1.c: 475: }
  8190                           ;i2c1.c: 476: }
  8191                           ;i2c1.c: 477: break;
  8192  002288  0012               	return	
  8193  00228A                     i2l129:
  8194                           
  8195                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
  8196  00228A  ACC5               	btfss	4037,6,c	;volatile
  8197  00228C  D006               	goto	i2l130
  8198                           
  8199                           ;i2c1.c: 483: {
  8200                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
  8201  00228E  2A3F               	incf	_i2c1_object+6,f,c
  8202                           
  8203                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  8204  002290  0E04               	movlw	4
  8205  002292  EC97  F018         	call	_I2C1_Stop
  8206                           
  8207                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
  8208  002296  9CC5               	bcf	4037,6,c	;volatile
  8209                           
  8210                           ;i2c1.c: 493: }
  8211  002298  0012               	return	
  8212  00229A                     i2l130:
  8213                           
  8214                           ;i2c1.c: 494: else
  8215                           ;i2c1.c: 495: {
  8216                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
  8217  00229A  86C5               	bsf	4037,3,c	;volatile
  8218                           
  8219                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
  8220  00229C  0E08               	movlw	8
  8221  00229E  6E49               	movwf	_i2c1_state,c
  8222                           
  8223                           ;i2c1.c: 498: }
  8224                           ;i2c1.c: 499: break;
  8225  0022A0  0012               	return	
  8226  0022A2                     i2l3124:
  8227                           
  8228                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
  8229  0022A2  0E08               	movlw	8
  8230  0022A4  6E49               	movwf	_i2c1_state,c
  8231                           
  8232                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
  8233  0022A6  86C5               	bsf	4037,3,c	;volatile
  8234                           
  8235                           ;i2c1.c: 511: break;
  8236  0022A8  0012               	return	
  8237  0022AA                     i2l3128:
  8238                           
  8239                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
  8240  0022AA  C040  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
  8241  0022AE  C041  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
  8242  0022B2  CFC9 FFDF          	movff	4041,indf2	;volatile
  8243  0022B6  4A40               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
  8244  0022B8  2A41               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
  8245                           
  8246                           ;i2c1.c: 519: if(--i2c_bytes_left)
  8247  0022BA  0E01               	movlw	1
  8248  0022BC  5E47               	subwf	I2C1_ISR@i2c_bytes_left,f,c
  8249  0022BE  B4D8               	btfsc	status,2,c
  8250  0022C0  D004               	goto	i2l134
  8251                           
  8252                           ;i2c1.c: 520: {
  8253                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
  8254  0022C2  9AC5               	bcf	4037,5,c	;volatile
  8255                           
  8256                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
  8257  0022C4  0E06               	movlw	6
  8258  0022C6  6E49               	movwf	_i2c1_state,c
  8259                           
  8260                           ;i2c1.c: 530: }
  8261  0022C8  D003               	goto	i2l3140
  8262  0022CA                     i2l134:
  8263                           
  8264                           ;i2c1.c: 531: else
  8265                           ;i2c1.c: 532: {
  8266                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
  8267  0022CA  8AC5               	bsf	4037,5,c	;volatile
  8268                           
  8269                           ;i2c1.c: 538: I2C1_FunctionComplete();
  8270  0022CC  EC28  F019         	call	_I2C1_FunctionComplete	;wreg free
  8271  0022D0                     i2l3140:
  8272                           
  8273                           ;i2c1.c: 539: }
  8274                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
  8275  0022D0  88C5               	bsf	4037,4,c	;volatile
  8276                           
  8277                           ;i2c1.c: 543: break;
  8278  0022D2  0012               	return	
  8279  0022D4                     i2l3142:
  8280                           
  8281                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
  8282                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
  8283  0022D4  0E00               	movlw	0
  8284  0022D6  EC97  F018         	call	_I2C1_Stop
  8285                           
  8286                           ;i2c1.c: 550: break;
  8287  0022DA  0012               	return	
  8288  0022DC                     i2l3144:
  8289                           
  8290                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
  8291  0022DC  2A3F               	incf	_i2c1_object+6,f,c
  8292                           
  8293                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
  8294  0022DE  0E06               	movlw	6
  8295  0022E0  EC97  F018         	call	_I2C1_Stop
  8296                           
  8297                           ;i2c1.c: 560: }
  8298                           
  8299                           ;i2c1.c: 558: break;
  8300  0022E4  0012               	return	
  8301  0022E6                     i2l3150:
  8302  0022E6  5049               	movf	_i2c1_state,w,c
  8303                           
  8304                           ; Switch size 1, requested type "space"
  8305                           ; Number of cases is 11, Range of values is 0 to 11
  8306                           ; switch strategies available:
  8307                           ; Name         Instructions Cycles
  8308                           ; simple_byte           34    18 (average)
  8309                           ;	Chosen strategy is simple_byte
  8310  0022E8  0A00               	xorlw	0	; case 0
  8311  0022EA  B4D8               	btfsc	status,2,c
  8312  0022EC  D71B               	goto	i2l100
  8313  0022EE  0A01               	xorlw	1	; case 1
  8314  0022F0  B4D8               	btfsc	status,2,c
  8315  0022F2  D749               	goto	i2l105
  8316  0022F4  0A03               	xorlw	3	; case 2
  8317  0022F6  B4D8               	btfsc	status,2,c
  8318  0022F8  D77E               	goto	i2l3074
  8319  0022FA  0A01               	xorlw	1	; case 3
  8320  0022FC  B4D8               	btfsc	status,2,c
  8321  0022FE  D7A2               	goto	i2l122
  8322  002300  0A07               	xorlw	7	; case 4
  8323  002302  B4D8               	btfsc	status,2,c
  8324  002304  D7E7               	goto	i2l3142
  8325  002306  0A01               	xorlw	1	; case 5
  8326  002308  B4D8               	btfsc	status,2,c
  8327  00230A  D7BF               	goto	i2l129
  8328  00230C  0A03               	xorlw	3	; case 6
  8329  00230E  B4D8               	btfsc	status,2,c
  8330  002310  D7C8               	goto	i2l3124
  8331  002312  0A01               	xorlw	1	; case 7
  8332  002314  B4D8               	btfsc	status,2,c
  8333  002316  D7DE               	goto	i2l3142
  8334  002318  0A0F               	xorlw	15	; case 8
  8335  00231A  B4D8               	btfsc	status,2,c
  8336  00231C  D7C6               	goto	i2l3128
  8337  00231E  0A02               	xorlw	2	; case 10
  8338  002320  B4D8               	btfsc	status,2,c
  8339  002322  D735               	goto	i2l106
  8340  002324  0A01               	xorlw	1	; case 11
  8341  002326  B4D8               	btfsc	status,2,c
  8342  002328  D748               	goto	i2l111
  8343  00232A  D7D8               	goto	i2l3144
  8344  00232C                     __end_of_I2C1_ISR:
  8345                           	opt stack 0
  8346                           pclatu	equ	0xFFB
  8347                           pclath	equ	0xFFA
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           intcon2	equ	0xFF1
  8356                           postinc0	equ	0xFEE
  8357                           fsr0h	equ	0xFEA
  8358                           fsr0l	equ	0xFE9
  8359                           wreg	equ	0xFE8
  8360                           fsr1h	equ	0xFE2
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           plusw2	equ	0xFDB
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function _I2C1_Stop *****************
  8371 ;; Defined at:
  8372 ;;		line 581 in file "mcc_generated_files/i2c1.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  completion_c    1    wreg     enum E6981
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  completion_c    1    2[COMRAM] enum E6981
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;Total ram usage:        3 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; This function calls:
  8393 ;;		Nothing
  8394 ;; This function is called by:
  8395 ;;		_I2C1_ISR
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           	psect	text42
  8400  00312E                     __ptext42:
  8401                           	opt stack 0
  8402  00312E                     _I2C1_Stop:
  8403                           	opt stack 24
  8404                           
  8405                           ;incstack = 0
  8406                           ;I2C1_Stop@completion_code stored from wreg
  8407  00312E  6E03               	movwf	I2C1_Stop@completion_code,c
  8408                           
  8409                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
  8410  003130  84C5               	bsf	4037,2,c	;volatile
  8411                           
  8412                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
  8413  003132  EE20 F003          	lfsr	2,3
  8414  003136  5042               	movf	_p_i2c1_current,w,c
  8415  003138  26D9               	addwf	fsr2l,f,c
  8416  00313A  5043               	movf	_p_i2c1_current+1,w,c
  8417  00313C  22DA               	addwfc	fsr2h,f,c
  8418  00313E  50DE               	movf	postinc2,w,c
  8419  003140  10DE               	iorwf	postinc2,w,c
  8420  003142  B4D8               	btfsc	status,2,c
  8421  003144  D010               	goto	i2l2656
  8422                           
  8423                           ;i2c1.c: 588: {
  8424                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
  8425  003146  EE20 F003          	lfsr	2,3
  8426  00314A  5042               	movf	_p_i2c1_current,w,c
  8427  00314C  26D9               	addwf	fsr2l,f,c
  8428  00314E  5043               	movf	_p_i2c1_current+1,w,c
  8429  003150  22DA               	addwfc	fsr2h,f,c
  8430  003152  CFDE F001          	movff	postinc2,??_I2C1_Stop
  8431  003156  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
  8432  00315A  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
  8433  00315E  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
  8434  003162  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
  8435  003166                     i2l2656:
  8436                           
  8437                           ;i2c1.c: 591: }
  8438                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
  8439  003166  0E00               	movlw	0
  8440  003168  6E49               	movwf	_i2c1_state,c
  8441  00316A  0012               	return		;funcret
  8442  00316C                     __end_of_I2C1_Stop:
  8443                           	opt stack 0
  8444                           pclatu	equ	0xFFB
  8445                           pclath	equ	0xFFA
  8446                           tblptru	equ	0xFF8
  8447                           tblptrh	equ	0xFF7
  8448                           tblptrl	equ	0xFF6
  8449                           tablat	equ	0xFF5
  8450                           prodh	equ	0xFF4
  8451                           prodl	equ	0xFF3
  8452                           intcon	equ	0xFF2
  8453                           intcon2	equ	0xFF1
  8454                           postinc0	equ	0xFEE
  8455                           fsr0h	equ	0xFEA
  8456                           fsr0l	equ	0xFE9
  8457                           wreg	equ	0xFE8
  8458                           fsr1h	equ	0xFE2
  8459                           fsr1l	equ	0xFE1
  8460                           indf2	equ	0xFDF
  8461                           postinc2	equ	0xFDE
  8462                           postdec2	equ	0xFDD
  8463                           plusw2	equ	0xFDB
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function _I2C1_FunctionComplete *****************
  8469 ;; Defined at:
  8470 ;;		line 563 in file "mcc_generated_files/i2c1.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;		None
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;		None
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  1    wreg      void 
  8477 ;; Registers used:
  8478 ;;		wreg, status,2, status,0
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;Total ram usage:        0 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; This function calls:
  8491 ;;		Nothing
  8492 ;; This function is called by:
  8493 ;;		_I2C1_ISR
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text43
  8498  003250                     __ptext43:
  8499                           	opt stack 0
  8500  003250                     _I2C1_FunctionComplete:
  8501                           	opt stack 24
  8502                           
  8503                           ;i2c1.c: 567: p_i2c1_trb_current++;
  8504                           
  8505                           ;incstack = 0
  8506  003250  0E05               	movlw	5
  8507  003252  2644               	addwf	_p_i2c1_trb_current,f,c
  8508  003254  0E00               	movlw	0
  8509  003256  2245               	addwfc	_p_i2c1_trb_current+1,f,c
  8510                           
  8511                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
  8512  003258  2E48               	decfsz	_i2c1_trb_count,f,c
  8513  00325A  D003               	goto	i2l2664
  8514                           
  8515                           ;i2c1.c: 571: {
  8516                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
  8517  00325C  0E04               	movlw	4
  8518  00325E  6E49               	movwf	_i2c1_state,c
  8519                           
  8520                           ;i2c1.c: 573: }
  8521  003260  0012               	return	
  8522  003262                     i2l2664:
  8523                           
  8524                           ;i2c1.c: 574: else
  8525                           ;i2c1.c: 575: {
  8526                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
  8527  003262  0E01               	movlw	1
  8528  003264  6E49               	movwf	_i2c1_state,c
  8529  003266  0012               	return	
  8530  003268                     __end_of_I2C1_FunctionComplete:
  8531                           	opt stack 0
  8532                           pclatu	equ	0xFFB
  8533                           pclath	equ	0xFFA
  8534                           tblptru	equ	0xFF8
  8535                           tblptrh	equ	0xFF7
  8536                           tblptrl	equ	0xFF6
  8537                           tablat	equ	0xFF5
  8538                           prodh	equ	0xFF4
  8539                           prodl	equ	0xFF3
  8540                           intcon	equ	0xFF2
  8541                           intcon2	equ	0xFF1
  8542                           postinc0	equ	0xFEE
  8543                           fsr0h	equ	0xFEA
  8544                           fsr0l	equ	0xFE9
  8545                           wreg	equ	0xFE8
  8546                           fsr1h	equ	0xFE2
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           plusw2	equ	0xFDB
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _I2C1_BusCollisionISR *****************
  8557 ;; Defined at:
  8558 ;;		line 728 in file "mcc_generated_files/i2c1.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		None
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;Total ram usage:        0 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; This function calls:
  8579 ;;		Nothing
  8580 ;; This function is called by:
  8581 ;;		_INTERRUPT_InterruptManager
  8582 ;; This function uses a non-reentrant model
  8583 ;;
  8584                           
  8585                           	psect	text44
  8586  0032BE                     __ptext44:
  8587                           	opt stack 0
  8588  0032BE                     _I2C1_BusCollisionISR:
  8589                           	opt stack 25
  8590                           
  8591                           ;incstack = 0
  8592  0032BE  0012               	return		;funcret
  8593  0032C0                     __end_of_I2C1_BusCollisionISR:
  8594                           	opt stack 0
  8595                           pclatu	equ	0xFFB
  8596                           pclath	equ	0xFFA
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           postinc0	equ	0xFEE
  8606                           fsr0h	equ	0xFEA
  8607                           fsr0l	equ	0xFE9
  8608                           wreg	equ	0xFE8
  8609                           fsr1h	equ	0xFE2
  8610                           fsr1l	equ	0xFE1
  8611                           indf2	equ	0xFDF
  8612                           postinc2	equ	0xFDE
  8613                           postdec2	equ	0xFDD
  8614                           plusw2	equ	0xFDB
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           pclatu	equ	0xFFB
  8619                           pclath	equ	0xFFA
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon2	equ	0xFF1
  8628                           postinc0	equ	0xFEE
  8629                           fsr0h	equ	0xFEA
  8630                           fsr0l	equ	0xFE9
  8631                           wreg	equ	0xFE8
  8632                           fsr1h	equ	0xFE2
  8633                           fsr1l	equ	0xFE1
  8634                           indf2	equ	0xFDF
  8635                           postinc2	equ	0xFDE
  8636                           postdec2	equ	0xFDD
  8637                           plusw2	equ	0xFDB
  8638                           fsr2h	equ	0xFDA
  8639                           fsr2l	equ	0xFD9
  8640                           status	equ	0xFD8
  8641                           
  8642                           	psect	rparam
  8643  0000                     pclatu	equ	0xFFB
  8644                           pclath	equ	0xFFA
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodh	equ	0xFF4
  8650                           prodl	equ	0xFF3
  8651                           intcon	equ	0xFF2
  8652                           intcon2	equ	0xFF1
  8653                           postinc0	equ	0xFEE
  8654                           fsr0h	equ	0xFEA
  8655                           fsr0l	equ	0xFE9
  8656                           wreg	equ	0xFE8
  8657                           fsr1h	equ	0xFE2
  8658                           fsr1l	equ	0xFE1
  8659                           indf2	equ	0xFDF
  8660                           postinc2	equ	0xFDE
  8661                           postdec2	equ	0xFDD
  8662                           plusw2	equ	0xFDB
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667                           	psect	temp
  8668  00004C                     btemp:
  8669                           	opt stack 0
  8670  00004C                     	ds	1
  8671  0000                     int$flags	set	btemp
  8672                           pclatu	equ	0xFFB
  8673                           pclath	equ	0xFFA
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           intcon	equ	0xFF2
  8681                           intcon2	equ	0xFF1
  8682                           postinc0	equ	0xFEE
  8683                           fsr0h	equ	0xFEA
  8684                           fsr0l	equ	0xFE9
  8685                           wreg	equ	0xFE8
  8686                           fsr1h	equ	0xFE2
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           plusw2	equ	0xFDB
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    118
    Data        2
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      75
    BANK0           160     81     113
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E6981 size(2) Largest target is 0
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__hdc1000_get_everything	PTR unsigned int  size(2) Largest target is 4
		 -> hdc1000_get_everything@everything(COMRAM[4]), 

    hdc1000_write@data_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), 

    hdc1000_read@data_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E6981 size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E6981 size(2) Largest target is 1
		 -> hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    I2C1_MasterRead@pflag	PTR enum E6981 size(2) Largest target is 1
		 -> hdc1000_read@status(COMRAM[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 

    F7093.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    I2C1_MasterWrite@pflag	PTR enum E6981 size(2) Largest target is 1
		 -> hdc1000_write@status(COMRAM[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), 

    F7088.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E6981 size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    S82$pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    S94$pTrFlag	PTR enum E6981 size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    p_i2c1_current.pTrFlag	PTR enum E6981 size(2) Largest target is 4
		 -> hdc1000_get_everything@data(COMRAM[4]), hdc1000_get_humidity@data(COMRAM[2]), hdc1000_get_temperature@data(COMRAM[2]), hdc1000_get_reg@data(COMRAM[2]), 
		 -> hdc1000_set_reg@data(COMRAM[3]), hdc1000_write@status(COMRAM[1]), hdc1000_read@status(COMRAM[1]), 

    S94$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), NULL(NULL[0]), 

    S105$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    S105$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _printf->___ftmul
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftadd->___ftmul
    _hdc1000_set_reg->_hdc1000_write
    _hdc1000_get_temperature->_hdc1000_read
    _hdc1000_get_temperature->_hdc1000_write
    _hdc1000_get_humidity->_hdc1000_read
    _hdc1000_get_humidity->_hdc1000_write
    _hdc1000_write->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _hdc1000_read->_I2C1_MasterRead
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   88625
                                             54 COMRAM     2     2      0
                                             71 BANK0     10    10      0
                  _SYSTEM_Initialize
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
               _hdc1000_get_humidity
            _hdc1000_get_temperature
                    _hdc1000_set_reg
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              45    37      8   60641
                                             34 BANK0     37    29      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   14748
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             20 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   14469
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3292
                                             33 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6461
                                             45 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             25 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             19 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             19 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3145
                                             27 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             19 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     641
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5274
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4858
                                             16 BANK0     12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             19 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             19 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _hdc1000_set_reg                                      6     4      2    2058
                                             40 COMRAM     6     4      2
                      _hdc1000_write
 ---------------------------------------------------------------------------------
 (1) _hdc1000_get_temperature                              6     4      2    3717
                                             40 COMRAM     6     4      2
                       _hdc1000_read
                      _hdc1000_write
 ---------------------------------------------------------------------------------
 (1) _hdc1000_get_humidity                                 6     4      2    3717
                                             40 COMRAM     6     4      2
                       _hdc1000_read
                      _hdc1000_write
 ---------------------------------------------------------------------------------
 (2) _hdc1000_write                                        5     3      2    1837
                                             35 COMRAM     5     3      2
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     0      7    1286
                                             28 COMRAM     7     0      7
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             9     2      7     436
                                             19 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (2) _hdc1000_read                                         5     3      2    1783
                                             35 COMRAM     5     3      2
                    _I2C1_MasterRead
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterRead                                      7     0      7    1308
                                             28 COMRAM     7     0      7
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 6     2      4     436
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterReadTRBBuild                              9     2      7     458
                                             19 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3164
                                             27 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3873
                                             30 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2953
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                          14    14      0      22
                                              5 COMRAM    14    14      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (6) _I2C1_ISR                                             2     2      0      22
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (7) _I2C1_Stop                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _I2C1_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___ftadd
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _hdc1000_get_humidity
     _hdc1000_read
       _I2C1_MasterRead
         _I2C1_MasterReadTRBBuild
         _I2C1_MasterTRBInsert
     _hdc1000_write
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
   _hdc1000_get_temperature
     _hdc1000_read
       _I2C1_MasterRead
         _I2C1_MasterReadTRBBuild
         _I2C1_MasterTRBInsert
     _hdc1000_write
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
   _hdc1000_set_reg
     _hdc1000_write
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART1_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      71       5       70.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BC      12        0.0%
DATA                 0      0      BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Nov 29 21:17:06 2017

                       ___awdiv@sign 001F                  ___wmul@multiplicand 0024  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 007B                         ___ftadd@exp2 007A  
                        __CFG_LVP$ON 000000                         ___ftadd@sign 0079  
                                l218 32A4                                  l434 15E2  
                                l720 1D02                                  l714 1CA0  
                                l718 1CDA                                  l729 1DD8  
                                l738 1E02                                  l691 2A8E  
                                l659 27E8                                  l763 2590  
                                l756 2502                                  l749 29CE  
                                l757 252A                                  l838 2CD0  
                                l848 2DA6                                  l788 3200  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                       ___awmod@sign 0019                                  wreg 000FE8  
                    ??_hdc1000_write 0026                         ___ftdiv@cntr 0028  
                   __end_of_I2C1_ISR 232C                         ___ftdiv@sign 002D  
                               l3000 2D74                                 l3004 2D98  
                               l2400 2F36                                 l4010 1744  
                               l4002 165C                                 l2340 2B12  
                               l2350 2B42                                 l2406 2FCA  
                               l4030 17DE                                 l4022 1786  
                               l4014 1752                                 l2344 2B26  
                               l4008 1736                                 l4016 1760  
                               l4042 2942                                 l2346 2B32  
                               l4026 17AE                                 l4034 1804  
                               l3500 2A46                                 l2700 2EE4  
                               l3504 2A5C                                 l4048 296A  
                               l3506 2A7A                                 l3508 2A84  
                               l4068 29A8                                 l2820 2556  
                               l3700 2CF6                                 l3612 2852  
                               l2910 2BAC                                 l3550 1CF8  
                               l2830 257E                                 l3710 2D18  
                               l3630 28AA                                 l3606 2826  
                               l4094 25B8                                 l2680 2F6E  
                               l3560 1D3A                                 l3544 1CE8  
                               l2840 26F0                                 l2832 258A  
                               l2824 2566                                 l3712 2D1C  
                               l3720 2D3A                                 l3704 2D02  
                               l3640 28DC                                 l2906 2B7C  
                               l3570 1D84                                 l3538 1CAE  
                               l3802 2366                                 l3626 2894  
                               l3492 2A10                                 l2684 2F78  
                               l2916 2BD8                                 l3580 1DCC  
                               l3572 1D90                                 l3820 23F8  
                               l2860 2750                                 l3724 2D48  
                               l3716 2D30                                 l3708 2D10  
                               l3636 28C6                                 l2678 2F4E  
                               l2694 2EBA                                 l3566 1D68  
                               l3830 2428                                 l2846 270E  
                               l2790 24C8                                 l3670 2C1E  
                               l3662 2C00                                 l2774 3248  
                               l3496 2A1E                                 l2696 2EDA  
                               l3568 1D76                                 l3832 2438  
                               l3824 240C                                 l2880 27AE  
                               l2784 249C                                 l3680 2C3E  
                               l3672 2C22                                 l3656 2BF0  
                               l3760 1964                                 l3498 2A28  
                               l3586 1E2C                                 l3578 1DBE  
                               l3834 2442                                 l2890 27D6  
                               l3746 20AC                                 l3738 1FEA  
                               l3770 1A34                                 l3930 134A  
                               l3922 12DE                                 l3914 1276  
                               l3596 1E7A                                 l2980 2C92  
                               l3844 2DBE                                 l2892 27E2  
                               l2884 27BE                                 l2868 2780  
                               l3668 2C16                                 l3684 2C48  
                               l3932 1360                                 l3838 245E  
                               l3846 2DCA                                 l3766 1A0E  
                               l3942 13D0                                 l3926 1304  
                               l3870 1116                                 l3854 1094  
                               l3792 2E86                                 l2976 2C82  
                               l3688 2C56                                 l3784 1C12  
                               l3952 142E                                 l3928 131A  
                               l3880 1142                                 l3872 112C  
                               l2978 2C8E                                 l3778 1B68  
                               l3970 14E0                                 l3938 13AA  
                               l3882 1168                                 l3866 10DA  
                               l3858 10A8                                 l2988 2CC2  
                               l2996 2D64                                 l3980 1594  
                               l3956 1494                                 l3876 113C  
                               l2998 2D70                                 l3982 15A2  
                               l3974 1508                                 l3958 149A  
                               l3992 15E6                                 l3888 1182  
                               l3986 15B0                                 l3898 11C8  
                               l3988 15C4                                 l3998 160A  
                               STR_1 1077                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u4100 120E                                 u2441 2480  
                               u4105 1202                                 u2461 24AC  
                       printf@tmpval 009D                                 u4260 15DA  
                               u3701 2836                                 u3471 1C4E  
                               u4361 292A                                 u3481 1C6C  
                               u4417 26C4                                 u4427 2FF4  
                               u4381 2952                                 u4437 303C  
                               u3681 280A                                 u3941 2342  
                               u3960 238C                                 u3965 2382  
              ?_hdc1000_get_humidity 0029                                 _WPUB 000F61  
    __end_of_I2C1_MasterReadTRBBuild 2E64                        _EUSART1_Write 32A2  
                               _main 25A2                         ___ftpack@arg 0014  
                       ___ftpack@exp 0017                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
             ??_I2C1_MasterTRBInsert 0018                                 btemp 004C  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 009A  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 0064  
                       ___param_bank 000000                         ___ftmul@sign 0065  
     I2C1_MasterWriteTRBBuild@length 0018            ??_hdc1000_get_temperature 002B  
                       ___fttol@exp1 007B                         ___fttol@lval 0077  
                         _i2c1_state 0049       __size_of_OSCILLATOR_Initialize 000E  
          I2C1_MasterTRBInsert@count 0019        __end_of_OSCILLATOR_Initialize 32A2  
          I2C1_MasterTRBInsert@pflag 0016                                ?_main 0001  
                    __end_of___awdiv 2C60                    __end_of_I2C1_Stop 316C  
                    __end_of___ftadd 1EA0                      __end_of___awmod 2D52  
                    __end_of___ftdiv 2A00                      __end_of___ftneg 320E  
                    __end_of___lldiv 2CE2                      __end_of___ftmul 291A  
                    ___awdiv@divisor 001C                      __end_of___llmod 2DB8  
                    __end_of___ftsub 2EB0                      __end_of___fttol 2470  
                     __CFG_DEBUG$OFF 000000                                i2l100 2124  
                              i2l111 21BA                                i2l103 217E  
                              i2l112 21C8                                i2l105 2186  
                              i2l130 229A                                i2l122 2244  
                              i2l106 218E                                i2l116 2230  
                              i2l134 22CA                                i2l126 2270  
                              i2l129 228A                                i2l251 0052  
                              i2l255 005E                      ___awdiv@counter 001E  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96         __end_of_I2C1_BusCollisionISR 32C0  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                  ??_I2C1_MasterRead 0024                         ___lltoft@exp 0024  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                    ??_I2C1_Initialize 0014  
                       main@humidity 00AA                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                      __end_of_dpowers 1029  
                              _scale 1822                      __end_of_isdigit 3250  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 0018  
                              _putch 32AE                       ?_EUSART1_Write 0001  
                              pclath 000FFA                                tablat 000FF5  
                              plusw2 000FDB                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
    I2C1_MasterWriteTRBBuild@address 0019                      __initialization 30F0  
              I2C1_MasterWrite@pdata 001D                I2C1_MasterWrite@pflag 0022  
         __end_of_EUSART1_Initialize 3294                         __end_of_main 26D2  
                  ??_hdc1000_set_reg 002B          ?_INTERRUPT_InterruptManager 0001  
                        _i2c1_object 0039                               ??_main 0037  
                      ___fttol@sign1 0076                        __activetblptr 000002  
               __size_of__tdiv_to_l_ 0132         hdc1000_get_temperature@F7143 00BC  
                   ___llmod@dividend 0014                               ?_scale 0066  
             ??_hdc1000_get_humidity 002B                     ___awdiv@dividend 001A  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 2AAE                     __end_of___lltoft 2E14  
                             i2l3102 2254                               i2l3112 2278  
                             i2l3042 216E                               i2l3140 22D0  
                             i2l3124 22A2                               i2l3060 21B4  
                             i2l3142 22D4                               i2l3054 219C  
                             i2l3150 22E6                               i2l3144 22DC  
                             i2l3128 22AA                               i2l3074 21F6  
                             i2l3094 223E                       __CFG_WDTEN$OFF 000000  
                             i2l2664 3262                               i2l2656 3166  
                             _RCREG1 000FAE                     __end_of___lwtoft 3232  
                             _RCSTA1 000FAB                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TXREG1 000FAD  
                             _TXSTA1 000FAC                    ?_I2C1_MasterWrite 001D  
                     __CFG_XINST$OFF 000000                   ??_I2C1_MasterWrite 0024  
                   __end_of__powers_ 1050                       _p_i2c1_current 0042  
                             ___ftge 2B4C                               ___wmul 31C4  
                          ??___awdiv 001E                            ??___ftadd 0076  
                     __CFG_STVREN$ON 000000                            ??___awmod 0018  
                          ??___ftdiv 0025                            ??___ftneg 0017  
                          ??___lldiv 001C                            ??___ftmul 0034  
                          ??___llmod 001C                            ??___ftsub 0037  
                          ??___fttol 0071           ??_I2C1_MasterWriteTRBBuild 001B  
                             _fround 1EA0                            ?_I2C1_ISR 0001  
                             clear_0 310E                               clear_1 311A  
                   ___awdiv@quotient 0020                      ___awmod@divisor 0016  
                    ___awmod@counter 0018                               _printf 1086  
                main@temperature_raw 00AD     __size_of_I2C1_MasterReadTRBBuild 0050  
              ___ftmul@f3_as_product 0061                            ??_isdigit 0014  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    ??_EUSART1_Write 0014        I2C1_MasterWriteTRBBuild@pdata 0016  
      __size_of_INTERRUPT_Initialize 0004                    _SYSTEM_Initialize 3268  
                         __accesstop 0060              __end_of__initialization 3120  
                         ___ftadd@f1 0070                           ___ftadd@f2 0073  
                         ___ftge@ff1 0014                           ___ftge@ff2 0017  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                         ___ftdiv@f1 001F                           ___ftdiv@f2 0022  
                         ___ftdiv@f3 0029                           ___ftneg@f1 0014  
                     _i2c1_trb_count 0048                           ___ftmul@f1 002E  
                         ___ftmul@f2 0031                _I2C1_FunctionComplete 3250  
               _I2C1_BusCollisionISR 32BE                           ___ftsub@f1 007C  
                         ___ftsub@f2 007F                           ___fttol@f1 006D  
                     __pcstackCOMRAM 0001               I2C1_MasterWrite@length 001F  
                       __pidataBANK0 32BC                  ??_SYSTEM_Initialize 0014  
                         ___lltoft@c 001C                        __end_of_scale 1C38  
                      __end_of_putch 32B8                           ??_I2C1_ISR 0004  
                         ___lwtoft@c 001C       I2C1_MasterReadTRBBuild@address 0019  
                         __div_to_l_ 26D2          hdc1000_get_temperature@data 002D  
                    __div_to_l_@exp1 001F                      __div_to_l_@cntr 001E  
                            ??_scale 0037            __end_of_SYSTEM_Initialize 327E  
             hdc1000_set_reg@address 002B                 hdc1000_set_reg@F7137 00B9  
                    __div_to_l_@quot 001A                              ??_putch 0015  
                         __pbssBANK0 00B1                      __CFG_PLLCFG$OFF 000000  
                      __div_to_l_@f1 0014                        __div_to_l_@f2 0017  
              ?_I2C1_BusCollisionISR 0001                 hdc1000_set_reg@value 0029  
                 __CFG_CCP2MX$PORTC1 000000                              ?___ftge 0014  
                            ?___wmul 0022                   __CFG_CCP3MX$PORTB5 000000  
                    _I2C1_MasterRead 2F8E                      _I2C1_Initialize 316C  
                            ?_fround 0066                            ?___ftpack 0014  
                            ?_printf 0082                            ?___lltoft 001C  
                          ?___lwtoft 001C                              _OSCCON2 000FD2  
                          _I2C1_Stop 312E                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                              _SSP1ADD 000FC8  
                            _SSP1BUF 000FC9                __end_of_hdc1000_write 2EFA  
      I2C1_MasterTRBInsert@ptrb_list 0014                      _hdc1000_set_reg 319A  
                    __CFG_PWRTEN$OFF 000000               ?_I2C1_FunctionComplete 0001  
                  __end_of__npowers_ 1077                              __Hparam 0000  
      __size_of_I2C1_MasterTRBInsert 009E                           _scale$1618 0069  
                            __Lparam 0000                   _p_i2c1_trb_current 0044  
                    __size_of___ftge 0090                              ___awdiv 2BDC  
                            ___ftadd 1C38                              ___awmod 2CE2  
                            ___ftdiv 291A                              ___ftneg 31EA  
                            ___lldiv 2C60                      __size_of___wmul 0026  
                            ___ftmul 27FA                              ___llmod 2D52  
                            ___ftsub 2E64                              ___fttol 232C  
                       __psmallconst 1000                              __pcinit 30F0  
                         ??___ftpack 0019                      __size_of_fround 024E  
                            __ramtop 1000              _I2C1_MasterReadTRBBuild 2E14  
                         ??___lltoft 0020                              __ptext0 25A2  
                            __ptext1 1086                              __ptext2 1822  
                            __ptext3 32AE                              __ptext4 32A2  
                            __ptext5 3232                              __ptext6 1EA0  
                            __ptext7 31C4                              __ptext8 27FA  
                            __ptext9 2CE2                      __size_of_printf 079C  
                         ??___lwtoft 001F                          ?__div_to_l_ 0014  
                            _dpowers 1001                _OSCILLATOR_Initialize 3294  
                            _isdigit 3232         I2C1_MasterReadTRBBuild@pdata 0016  
               I2C1_MasterRead@pdata 001D                 I2C1_MasterRead@pflag 0022  
                   ___awmod@dividend 0014                   _EUSART1_Initialize 327E  
           ??_PIN_MANAGER_Initialize 0014                           ?_I2C1_Stop 0001  
         __size_of_SYSTEM_Initialize 0016                 I2C1_ISR@pi2c_buf_ptr 0040  
               end_of_initialization 3120                  ?_EUSART1_Initialize 0001  
                      __Lmediumconst 0000                        ?_hdc1000_read 0024  
            __end_of_I2C1_MasterRead 2FD8               ??_I2C1_BusCollisionISR 0001  
           ?_hdc1000_get_temperature 0029              __end_of_I2C1_Initialize 319A  
                    ___lldiv@divisor 0018                      ___lldiv@counter 0020  
                            printf@c 00A6                              printf@f 0082  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                       __tdiv_to_l_@f1 0014  
                     __tdiv_to_l_@f2 0017                 ??_EUSART1_Initialize 0014  
                      ??__tdiv_to_l_ 001A            __size_of_I2C1_MasterWrite 004A  
                  __size_of_I2C1_ISR 023E          hdc1000_get_everything@F7151 00B5  
               hdc1000_get_reg@F7140 00BE          hdc1000_get_everything@F7153 00B1  
            __end_of_hdc1000_set_reg 31C4                  EUSART1_Write@txData 0014  
  I2C1_ISR@i2c_10bit_address_restart 0046        __size_of_hdc1000_get_humidity 0048  
                     ??_hdc1000_read 0026                          ___ftdiv@exp 002C  
            I2C1_MasterWrite@address 0020                  __size_of__div_to_l_ 0128  
                        ___ftmul@exp 0060            ??_I2C1_MasterReadTRBBuild 001B  
       __end_of_INTERRUPT_Initialize 32BC                       __end_of___ftge 2BDC  
                     __end_of___wmul 31EA              I2C1_MasterWrite@trBlock 00C5  
           I2C1_Stop@completion_code 0003               ?_OSCILLATOR_Initialize 0001  
                     __end_of_fround 20EE                       __end_of_printf 1822  
                start_initialization 30F0                          ??_I2C1_Stop 0001  
    __size_of_PIN_MANAGER_Initialize 0044                  __end_of__tdiv_to_l_ 25A2  
           hdc1000_get_humidity@data 002D    __size_of_I2C1_MasterWriteTRBBuild 0044  
                        putch@txData 0015            ?_I2C1_MasterWriteTRBBuild 0014  
              __end_of_EUSART1_Write 32AE      __end_of_hdc1000_get_temperature 3020  
                    ___llmod@divisor 0018                      ___llmod@counter 001C  
                   ?_I2C1_MasterRead 001D                     ?_I2C1_Initialize 0001  
                           ??___ftge 001A                             ??___wmul 0026  
                   main@humidity_raw 00AF                          __pdataBANK0 00CF  
                           ??_fround 0037                             ??_printf 008A  
       I2C1_MasterWriteTRBBuild@ptrb 0014                           fround@prec 006F  
                  __size_of___ftpack 00AE                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0039                    __size_of___lwtoft 0024  
                      __pcstackBANK0 0060                        _i2c1_tr_queue 00CA  
                       _isdigit$1234 0015                     ?_hdc1000_set_reg 0029  
            ??_I2C1_FunctionComplete 0001                  hdc1000_set_reg@data 002C  
             _PIN_MANAGER_Initialize 30AC                            __pintcode 0008  
                           ?___awdiv 001A                             ?___ftadd 0070  
                           ?___awmod 0014                             ?___ftdiv 001F  
                           ?___ftneg 0014                             ?___lldiv 0014  
                           ?___ftmul 002E                             ?___llmod 0014  
                           ?___ftsub 007C                            __npowers_ 1050  
                           ?___fttol 006D                             _I2C1_ISR 20EE  
       ??_INTERRUPT_InterruptManager 0006                     __CFG_PRICLKEN$ON 000000  
                        __tdiv_to_l_ 2470                 __end_of_hdc1000_read 2F8E  
                   _I2C1_MasterWrite 2EFA                         ??__div_to_l_ 001A  
                        __smallconst 1000         __end_of_I2C1_MasterTRBInsert 2B4C  
                           _BAUDCON1 000FB8                             ?_isdigit 0001  
             I2C1_MasterRead@address 0020                   hdc1000_read@length 0026  
                     __size_of_scale 0416                   hdc1000_read@status 0028  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 32B8  
        I2C1_MasterReadTRBBuild@ptrb 0014            hdc1000_get_humidity@F7147 00CF  
             I2C1_MasterRead@trBlock 00C0                       ___wmul@product 0026  
                           _PIE1bits 000F9D                             _PIE2bits 000FA0  
__size_of_INTERRUPT_InterruptManager 0092                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 27FA                             _PIR2bits 000FA1  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _SSP1CON1 000FC6                             _SSP1CON3 000FCB  
                           _SSP1STAT 000FC7               __size_of_hdc1000_write 004A  
   __size_of_hdc1000_get_temperature 0048                    ___wmul@multiplier 0022  
                         printf@flag 0095                           printf@fval 00A3  
                         printf@prec 00A1                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                 hdc1000_read@data_ptr 0024  
                           __Hrparam 0000        __size_of_I2C1_BusCollisionISR 0002  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
             I2C1_ISR@i2c_bytes_left 0047                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0014                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268         __end_of_hdc1000_get_humidity 3068  
                   __size_of___awmod 0070                     __size_of___ftdiv 00E6  
                   __size_of___ftneg 0024                     __size_of___lldiv 0082  
                   __size_of___ftmul 0120                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
        __size_of_EUSART1_Initialize 0016                             ___ftpack 2A00  
   __end_of_I2C1_MasterWriteTRBBuild 30AC                          _fround$1616 006C  
                        _fround$1617 0069                             ___lltoft 2DB8  
                           ___lwtoft 320E                 hdc1000_read@time_out 0027  
              hdc1000_write@data_ptr 0024                     __size_of_isdigit 001E  
                I2C1_ISR@i2c_address 004A                             __ptext10 2BDC  
                           __ptext11 2470                             __ptext20 2B4C  
                           __ptext12 26D2                             __ptext21 319A  
                           __ptext13 2DB8                             __ptext30 2E14  
                           __ptext22 2FD8                             __ptext14 2D52  
                           __ptext31 320E                             __ptext23 3020  
                           __ptext15 2C60                             __ptext32 291A  
                           __ptext24 2EB0                             __ptext16 232C  
                           __ptext41 20EE                             __ptext33 2A00  
                           __ptext25 2EFA                             __ptext17 2E64  
                           __ptext42 312E                             __ptext34 3268  
                           __ptext26 3068                             __ptext18 1C38  
                           __ptext43 3250                             __ptext35 30AC  
                           __ptext27 2F44                             __ptext19 31EA  
                           __ptext44 32BE                             __ptext36 3294  
                           __ptext28 2F8E                             __ptext37 32B8  
                           __ptext29 2AAE                             __ptext38 316C  
                           __ptext39 327E                         _SSP1CON1bits 000FC6  
                       _SSP1CON2bits 000FC5                             __powers_ 1029  
                      _hdc1000_write 2EB0                        __size_of_main 0130  
      I2C1_MasterReadTRBBuild@length 0018                I2C1_MasterRead@length 001F  
               _I2C1_MasterTRBInsert 2AAE                hdc1000_write@time_out 0027  
              __size_of_hdc1000_read 004A                             int$flags 004C  
 __end_of_INTERRUPT_InterruptManager 009A           _INTERRUPT_InterruptManager 0008  
                          printf@exp 009B                            printf@val 0097  
                    main@temperature 00A7                           _INTCONbits 000FF2  
                           isdigit@c 0016               ??_INTERRUPT_Initialize 0014  
                           scale@scl 006C                             intlevel2 0000  
                     ?_hdc1000_write 0024                     __tdiv_to_l_@exp1 0022  
                   __tdiv_to_l_@cntr 0021                     __tdiv_to_l_@quot 001D  
                   ___lldiv@dividend 0014              ?_PIN_MANAGER_Initialize 0001  
           __end_of_I2C1_MasterWrite 2F44                         _hdc1000_read 2F44  
     __size_of_I2C1_FunctionComplete 0018                           _RCSTA1bits 000FAB  
      __end_of_I2C1_FunctionComplete 3268                ?_I2C1_MasterTRBInsert 0014  
           ?_I2C1_MasterReadTRBBuild 0014                             printf@ap 0093  
           __size_of_I2C1_MasterRead 004A              _hdc1000_get_temperature 2FD8  
           __size_of_I2C1_Initialize 002E               __size_of_EUSART1_Write 000C  
                       ?__tdiv_to_l_ 0014                          _printf$1619 0090  
                   ___lldiv@quotient 001C                  hdc1000_write@length 0026  
           _I2C1_MasterWriteTRBBuild 3068                    __CFG_T3CMX$PORTC0 000000  
                hdc1000_write@status 0028       __end_of_PIN_MANAGER_Initialize 30F0  
               _hdc1000_get_humidity 3020                   __size_of_I2C1_Stop 003E  
                  __CFG_FOSC$INTIO67 000000             __size_of_hdc1000_set_reg 002A  
